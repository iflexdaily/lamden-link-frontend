import {
  BackSide,
  Box3,
  BufferAttribute,
  BufferGeometry,
  CircleBufferGeometry,
  Color,
  CubicBezierCurve3,
  Curve,
  CylinderBufferGeometry,
  DoubleSide,
  Euler,
  Float32BufferAttribute,
  Font,
  Group,
  InstancedBufferGeometry,
  InstancedInterleavedBuffer,
  InterleavedBuffer,
  InterleavedBufferAttribute,
  Line,
  Line3,
  LineBasicMaterial,
  LineSegments,
  MathUtils,
  Matrix4,
  Mesh,
  MeshBasicMaterial,
  MeshLambertMaterial,
  MeshPhongMaterial,
  NoColors,
  NormalBlending,
  Object3D,
  QuadraticBezierCurve3,
  ShaderLib,
  ShaderMaterial,
  Sphere,
  SphereBufferGeometry,
  TextBufferGeometry,
  TextureLoader,
  TriangleFanDrawMode,
  TriangleStripDrawMode,
  TrianglesDrawMode,
  TubeBufferGeometry,
  UniformsLib,
  UniformsUtils,
  Vector2,
  Vector3,
  Vector4,
  VertexColors,
  WireframeGeometry,
  __commonJS,
  __toModule
} from "./chunk-SQVQIKNX.js";

// node_modules/debounce/index.js
var require_debounce = __commonJS({
  "node_modules/debounce/index.js"(exports2, module) {
    function debounce2(func, wait, immediate) {
      var timeout, args, context, timestamp, result;
      if (wait == null)
        wait = 100;
      function later() {
        var last = Date.now() - timestamp;
        if (last < wait && last >= 0) {
          timeout = setTimeout(later, wait - last);
        } else {
          timeout = null;
          if (!immediate) {
            result = func.apply(context, args);
            context = args = null;
          }
        }
      }
      ;
      var debounced = function() {
        context = this;
        args = arguments;
        timestamp = Date.now();
        var callNow = immediate && !timeout;
        if (!timeout)
          timeout = setTimeout(later, wait);
        if (callNow) {
          result = func.apply(context, args);
          context = args = null;
        }
        return result;
      };
      debounced.clear = function() {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
      };
      debounced.flush = function() {
        if (timeout) {
          result = func.apply(context, args);
          context = args = null;
          clearTimeout(timeout);
          timeout = null;
        }
      };
      return debounced;
    }
    debounce2.debounce = debounce2;
    module.exports = debounce2;
  }
});

// node_modules/earcut/src/earcut.js
var require_earcut = __commonJS({
  "node_modules/earcut/src/earcut.js"(exports2, module) {
    "use strict";
    module.exports = earcut3;
    module.exports.default = earcut3;
    function earcut3(data, holeIndices, dim) {
      dim = dim || 2;
      var hasHoles = holeIndices && holeIndices.length, outerLen = hasHoles ? holeIndices[0] * dim : data.length, outerNode = linkedList(data, 0, outerLen, dim, true), triangles = [];
      if (!outerNode || outerNode.next === outerNode.prev)
        return triangles;
      var minX, minY, maxX, maxY, x, y, invSize;
      if (hasHoles)
        outerNode = eliminateHoles(data, holeIndices, outerNode, dim);
      if (data.length > 80 * dim) {
        minX = maxX = data[0];
        minY = maxY = data[1];
        for (var i = dim; i < outerLen; i += dim) {
          x = data[i];
          y = data[i + 1];
          if (x < minX)
            minX = x;
          if (y < minY)
            minY = y;
          if (x > maxX)
            maxX = x;
          if (y > maxY)
            maxY = y;
        }
        invSize = Math.max(maxX - minX, maxY - minY);
        invSize = invSize !== 0 ? 1 / invSize : 0;
      }
      earcutLinked(outerNode, triangles, dim, minX, minY, invSize);
      return triangles;
    }
    function linkedList(data, start, end, dim, clockwise) {
      var i, last;
      if (clockwise === signedArea(data, start, end, dim) > 0) {
        for (i = start; i < end; i += dim)
          last = insertNode(i, data[i], data[i + 1], last);
      } else {
        for (i = end - dim; i >= start; i -= dim)
          last = insertNode(i, data[i], data[i + 1], last);
      }
      if (last && equals(last, last.next)) {
        removeNode(last);
        last = last.next;
      }
      return last;
    }
    function filterPoints(start, end) {
      if (!start)
        return start;
      if (!end)
        end = start;
      var p = start, again;
      do {
        again = false;
        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
          removeNode(p);
          p = end = p.prev;
          if (p === p.next)
            break;
          again = true;
        } else {
          p = p.next;
        }
      } while (again || p !== end);
      return end;
    }
    function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
      if (!ear)
        return;
      if (!pass && invSize)
        indexCurve(ear, minX, minY, invSize);
      var stop = ear, prev, next;
      while (ear.prev !== ear.next) {
        prev = ear.prev;
        next = ear.next;
        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
          triangles.push(prev.i / dim);
          triangles.push(ear.i / dim);
          triangles.push(next.i / dim);
          removeNode(ear);
          ear = next.next;
          stop = next.next;
          continue;
        }
        ear = next;
        if (ear === stop) {
          if (!pass) {
            earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
          } else if (pass === 1) {
            ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
            earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
          } else if (pass === 2) {
            splitEarcut(ear, triangles, dim, minX, minY, invSize);
          }
          break;
        }
      }
    }
    function isEar(ear) {
      var a = ear.prev, b = ear, c = ear.next;
      if (area(a, b, c) >= 0)
        return false;
      var p = ear.next.next;
      while (p !== ear.prev) {
        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0)
          return false;
        p = p.next;
      }
      return true;
    }
    function isEarHashed(ear, minX, minY, invSize) {
      var a = ear.prev, b = ear, c = ear.next;
      if (area(a, b, c) >= 0)
        return false;
      var minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x, minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y, maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x, maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y;
      var minZ = zOrder(minTX, minTY, minX, minY, invSize), maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);
      var p = ear.prevZ, n = ear.nextZ;
      while (p && p.z >= minZ && n && n.z <= maxZ) {
        if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0)
          return false;
        p = p.prevZ;
        if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0)
          return false;
        n = n.nextZ;
      }
      while (p && p.z >= minZ) {
        if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0)
          return false;
        p = p.prevZ;
      }
      while (n && n.z <= maxZ) {
        if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0)
          return false;
        n = n.nextZ;
      }
      return true;
    }
    function cureLocalIntersections(start, triangles, dim) {
      var p = start;
      do {
        var a = p.prev, b = p.next.next;
        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
          triangles.push(a.i / dim);
          triangles.push(p.i / dim);
          triangles.push(b.i / dim);
          removeNode(p);
          removeNode(p.next);
          p = start = b;
        }
        p = p.next;
      } while (p !== start);
      return filterPoints(p);
    }
    function splitEarcut(start, triangles, dim, minX, minY, invSize) {
      var a = start;
      do {
        var b = a.next.next;
        while (b !== a.prev) {
          if (a.i !== b.i && isValidDiagonal(a, b)) {
            var c = splitPolygon(a, b);
            a = filterPoints(a, a.next);
            c = filterPoints(c, c.next);
            earcutLinked(a, triangles, dim, minX, minY, invSize);
            earcutLinked(c, triangles, dim, minX, minY, invSize);
            return;
          }
          b = b.next;
        }
        a = a.next;
      } while (a !== start);
    }
    function eliminateHoles(data, holeIndices, outerNode, dim) {
      var queue = [], i, len, start, end, list;
      for (i = 0, len = holeIndices.length; i < len; i++) {
        start = holeIndices[i] * dim;
        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
        list = linkedList(data, start, end, dim, false);
        if (list === list.next)
          list.steiner = true;
        queue.push(getLeftmost(list));
      }
      queue.sort(compareX);
      for (i = 0; i < queue.length; i++) {
        outerNode = eliminateHole(queue[i], outerNode);
        outerNode = filterPoints(outerNode, outerNode.next);
      }
      return outerNode;
    }
    function compareX(a, b) {
      return a.x - b.x;
    }
    function eliminateHole(hole, outerNode) {
      var bridge = findHoleBridge(hole, outerNode);
      if (!bridge) {
        return outerNode;
      }
      var bridgeReverse = splitPolygon(bridge, hole);
      var filteredBridge = filterPoints(bridge, bridge.next);
      filterPoints(bridgeReverse, bridgeReverse.next);
      return outerNode === bridge ? filteredBridge : outerNode;
    }
    function findHoleBridge(hole, outerNode) {
      var p = outerNode, hx = hole.x, hy = hole.y, qx = -Infinity, m;
      do {
        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
          var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
          if (x <= hx && x > qx) {
            qx = x;
            if (x === hx) {
              if (hy === p.y)
                return p;
              if (hy === p.next.y)
                return p.next;
            }
            m = p.x < p.next.x ? p : p.next;
          }
        }
        p = p.next;
      } while (p !== outerNode);
      if (!m)
        return null;
      if (hx === qx)
        return m;
      var stop = m, mx = m.x, my = m.y, tanMin = Infinity, tan4;
      p = m;
      do {
        if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
          tan4 = Math.abs(hy - p.y) / (hx - p.x);
          if (locallyInside(p, hole) && (tan4 < tanMin || tan4 === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {
            m = p;
            tanMin = tan4;
          }
        }
        p = p.next;
      } while (p !== stop);
      return m;
    }
    function sectorContainsSector(m, p) {
      return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
    }
    function indexCurve(start, minX, minY, invSize) {
      var p = start;
      do {
        if (p.z === null)
          p.z = zOrder(p.x, p.y, minX, minY, invSize);
        p.prevZ = p.prev;
        p.nextZ = p.next;
        p = p.next;
      } while (p !== start);
      p.prevZ.nextZ = null;
      p.prevZ = null;
      sortLinked(p);
    }
    function sortLinked(list) {
      var i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;
      do {
        p = list;
        list = null;
        tail = null;
        numMerges = 0;
        while (p) {
          numMerges++;
          q = p;
          pSize = 0;
          for (i = 0; i < inSize; i++) {
            pSize++;
            q = q.nextZ;
            if (!q)
              break;
          }
          qSize = inSize;
          while (pSize > 0 || qSize > 0 && q) {
            if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
              e = p;
              p = p.nextZ;
              pSize--;
            } else {
              e = q;
              q = q.nextZ;
              qSize--;
            }
            if (tail)
              tail.nextZ = e;
            else
              list = e;
            e.prevZ = tail;
            tail = e;
          }
          p = q;
        }
        tail.nextZ = null;
        inSize *= 2;
      } while (numMerges > 1);
      return list;
    }
    function zOrder(x, y, minX, minY, invSize) {
      x = 32767 * (x - minX) * invSize;
      y = 32767 * (y - minY) * invSize;
      x = (x | x << 8) & 16711935;
      x = (x | x << 4) & 252645135;
      x = (x | x << 2) & 858993459;
      x = (x | x << 1) & 1431655765;
      y = (y | y << 8) & 16711935;
      y = (y | y << 4) & 252645135;
      y = (y | y << 2) & 858993459;
      y = (y | y << 1) & 1431655765;
      return x | y << 1;
    }
    function getLeftmost(start) {
      var p = start, leftmost = start;
      do {
        if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y)
          leftmost = p;
        p = p.next;
      } while (p !== start);
      return leftmost;
    }
    function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
      return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
    }
    function isValidDiagonal(a, b) {
      return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && (area(a.prev, a, b.prev) || area(a, b.prev, b)) || equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0);
    }
    function area(p, q, r) {
      return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
    }
    function equals(p1, p2) {
      return p1.x === p2.x && p1.y === p2.y;
    }
    function intersects(p1, q1, p2, q2) {
      var o1 = sign4(area(p1, q1, p2));
      var o2 = sign4(area(p1, q1, q2));
      var o3 = sign4(area(p2, q2, p1));
      var o4 = sign4(area(p2, q2, q1));
      if (o1 !== o2 && o3 !== o4)
        return true;
      if (o1 === 0 && onSegment(p1, p2, q1))
        return true;
      if (o2 === 0 && onSegment(p1, q2, q1))
        return true;
      if (o3 === 0 && onSegment(p2, p1, q2))
        return true;
      if (o4 === 0 && onSegment(p2, q1, q2))
        return true;
      return false;
    }
    function onSegment(p, q, r) {
      return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
    }
    function sign4(num) {
      return num > 0 ? 1 : num < 0 ? -1 : 0;
    }
    function intersectsPolygon(a, b) {
      var p = a;
      do {
        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b))
          return true;
        p = p.next;
      } while (p !== a);
      return false;
    }
    function locallyInside(a, b) {
      return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
    }
    function middleInside(a, b) {
      var p = a, inside = false, px = (a.x + b.x) / 2, py = (a.y + b.y) / 2;
      do {
        if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x)
          inside = !inside;
        p = p.next;
      } while (p !== a);
      return inside;
    }
    function splitPolygon(a, b) {
      var a2 = new Node(a.i, a.x, a.y), b2 = new Node(b.i, b.x, b.y), an = a.next, bp = b.prev;
      a.next = b;
      b.prev = a;
      a2.next = an;
      an.prev = a2;
      b2.next = a2;
      a2.prev = b2;
      bp.next = b2;
      b2.prev = bp;
      return b2;
    }
    function insertNode(i, x, y, last) {
      var p = new Node(i, x, y);
      if (!last) {
        p.prev = p;
        p.next = p;
      } else {
        p.next = last.next;
        p.prev = last;
        last.next.prev = p;
        last.next = p;
      }
      return p;
    }
    function removeNode(p) {
      p.next.prev = p.prev;
      p.prev.next = p.next;
      if (p.prevZ)
        p.prevZ.nextZ = p.nextZ;
      if (p.nextZ)
        p.nextZ.prevZ = p.prevZ;
    }
    function Node(i, x, y) {
      this.i = i;
      this.x = x;
      this.y = y;
      this.prev = null;
      this.next = null;
      this.z = null;
      this.prevZ = null;
      this.nextZ = null;
      this.steiner = false;
    }
    earcut3.deviation = function(data, holeIndices, dim, triangles) {
      var hasHoles = holeIndices && holeIndices.length;
      var outerLen = hasHoles ? holeIndices[0] * dim : data.length;
      var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));
      if (hasHoles) {
        for (var i = 0, len = holeIndices.length; i < len; i++) {
          var start = holeIndices[i] * dim;
          var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
          polygonArea -= Math.abs(signedArea(data, start, end, dim));
        }
      }
      var trianglesArea = 0;
      for (i = 0; i < triangles.length; i += 3) {
        var a = triangles[i] * dim;
        var b = triangles[i + 1] * dim;
        var c = triangles[i + 2] * dim;
        trianglesArea += Math.abs((data[a] - data[c]) * (data[b + 1] - data[a + 1]) - (data[a] - data[b]) * (data[c + 1] - data[a + 1]));
      }
      return polygonArea === 0 && trianglesArea === 0 ? 0 : Math.abs((trianglesArea - polygonArea) / polygonArea);
    };
    function signedArea(data, start, end, dim) {
      var sum5 = 0;
      for (var i = start, j = end - dim; i < end; i += dim) {
        sum5 += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
        j = i;
      }
      return sum5;
    }
    earcut3.flatten = function(data) {
      var dim = data[0][0].length, result = { vertices: [], holes: [], dimensions: dim }, holeIndex = 0;
      for (var i = 0; i < data.length; i++) {
        for (var j = 0; j < data[i].length; j++) {
          for (var d = 0; d < dim; d++)
            result.vertices.push(data[i][j][d]);
        }
        if (i > 0) {
          holeIndex += data[i - 1].length;
          result.holes.push(holeIndex);
        }
      }
      return result;
    };
  }
});

// node_modules/tinycolor2/tinycolor.js
var require_tinycolor = __commonJS({
  "node_modules/tinycolor2/tinycolor.js"(exports2, module) {
    (function(Math2) {
      var trimLeft = /^\s+/, trimRight = /\s+$/, tinyCounter = 0, mathRound = Math2.round, mathMin = Math2.min, mathMax = Math2.max, mathRandom = Math2.random;
      function tinycolor(color3, opts) {
        color3 = color3 ? color3 : "";
        opts = opts || {};
        if (color3 instanceof tinycolor) {
          return color3;
        }
        if (!(this instanceof tinycolor)) {
          return new tinycolor(color3, opts);
        }
        var rgb3 = inputToRGB(color3);
        this._originalInput = color3, this._r = rgb3.r, this._g = rgb3.g, this._b = rgb3.b, this._a = rgb3.a, this._roundA = mathRound(100 * this._a) / 100, this._format = opts.format || rgb3.format;
        this._gradientType = opts.gradientType;
        if (this._r < 1) {
          this._r = mathRound(this._r);
        }
        if (this._g < 1) {
          this._g = mathRound(this._g);
        }
        if (this._b < 1) {
          this._b = mathRound(this._b);
        }
        this._ok = rgb3.ok;
        this._tc_id = tinyCounter++;
      }
      tinycolor.prototype = {
        isDark: function() {
          return this.getBrightness() < 128;
        },
        isLight: function() {
          return !this.isDark();
        },
        isValid: function() {
          return this._ok;
        },
        getOriginalInput: function() {
          return this._originalInput;
        },
        getFormat: function() {
          return this._format;
        },
        getAlpha: function() {
          return this._a;
        },
        getBrightness: function() {
          var rgb3 = this.toRgb();
          return (rgb3.r * 299 + rgb3.g * 587 + rgb3.b * 114) / 1e3;
        },
        getLuminance: function() {
          var rgb3 = this.toRgb();
          var RsRGB, GsRGB, BsRGB, R, G, B4;
          RsRGB = rgb3.r / 255;
          GsRGB = rgb3.g / 255;
          BsRGB = rgb3.b / 255;
          if (RsRGB <= 0.03928) {
            R = RsRGB / 12.92;
          } else {
            R = Math2.pow((RsRGB + 0.055) / 1.055, 2.4);
          }
          if (GsRGB <= 0.03928) {
            G = GsRGB / 12.92;
          } else {
            G = Math2.pow((GsRGB + 0.055) / 1.055, 2.4);
          }
          if (BsRGB <= 0.03928) {
            B4 = BsRGB / 12.92;
          } else {
            B4 = Math2.pow((BsRGB + 0.055) / 1.055, 2.4);
          }
          return 0.2126 * R + 0.7152 * G + 0.0722 * B4;
        },
        setAlpha: function(value) {
          this._a = boundAlpha(value);
          this._roundA = mathRound(100 * this._a) / 100;
          return this;
        },
        toHsv: function() {
          var hsv = rgbToHsv(this._r, this._g, this._b);
          return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };
        },
        toHsvString: function() {
          var hsv = rgbToHsv(this._r, this._g, this._b);
          var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v2 = mathRound(hsv.v * 100);
          return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v2 + "%)" : "hsva(" + h + ", " + s + "%, " + v2 + "%, " + this._roundA + ")";
        },
        toHsl: function() {
          var hsl5 = rgbToHsl(this._r, this._g, this._b);
          return { h: hsl5.h * 360, s: hsl5.s, l: hsl5.l, a: this._a };
        },
        toHslString: function() {
          var hsl5 = rgbToHsl(this._r, this._g, this._b);
          var h = mathRound(hsl5.h * 360), s = mathRound(hsl5.s * 100), l = mathRound(hsl5.l * 100);
          return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
        },
        toHex: function(allow3Char) {
          return rgbToHex(this._r, this._g, this._b, allow3Char);
        },
        toHexString: function(allow3Char) {
          return "#" + this.toHex(allow3Char);
        },
        toHex8: function(allow4Char) {
          return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
        },
        toHex8String: function(allow4Char) {
          return "#" + this.toHex8(allow4Char);
        },
        toRgb: function() {
          return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };
        },
        toRgbString: function() {
          return this._a == 1 ? "rgb(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" : "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
        },
        toPercentageRgb: function() {
          return { r: mathRound(bound01(this._r, 255) * 100) + "%", g: mathRound(bound01(this._g, 255) * 100) + "%", b: mathRound(bound01(this._b, 255) * 100) + "%", a: this._a };
        },
        toPercentageRgbString: function() {
          return this._a == 1 ? "rgb(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" : "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
        },
        toName: function() {
          if (this._a === 0) {
            return "transparent";
          }
          if (this._a < 1) {
            return false;
          }
          return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
        },
        toFilter: function(secondColor) {
          var hex8String = "#" + rgbaToArgbHex(this._r, this._g, this._b, this._a);
          var secondHex8String = hex8String;
          var gradientType = this._gradientType ? "GradientType = 1, " : "";
          if (secondColor) {
            var s = tinycolor(secondColor);
            secondHex8String = "#" + rgbaToArgbHex(s._r, s._g, s._b, s._a);
          }
          return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
        },
        toString: function(format3) {
          var formatSet = !!format3;
          format3 = format3 || this._format;
          var formattedString = false;
          var hasAlpha = this._a < 1 && this._a >= 0;
          var needsAlphaFormat = !formatSet && hasAlpha && (format3 === "hex" || format3 === "hex6" || format3 === "hex3" || format3 === "hex4" || format3 === "hex8" || format3 === "name");
          if (needsAlphaFormat) {
            if (format3 === "name" && this._a === 0) {
              return this.toName();
            }
            return this.toRgbString();
          }
          if (format3 === "rgb") {
            formattedString = this.toRgbString();
          }
          if (format3 === "prgb") {
            formattedString = this.toPercentageRgbString();
          }
          if (format3 === "hex" || format3 === "hex6") {
            formattedString = this.toHexString();
          }
          if (format3 === "hex3") {
            formattedString = this.toHexString(true);
          }
          if (format3 === "hex4") {
            formattedString = this.toHex8String(true);
          }
          if (format3 === "hex8") {
            formattedString = this.toHex8String();
          }
          if (format3 === "name") {
            formattedString = this.toName();
          }
          if (format3 === "hsl") {
            formattedString = this.toHslString();
          }
          if (format3 === "hsv") {
            formattedString = this.toHsvString();
          }
          return formattedString || this.toHexString();
        },
        clone: function() {
          return tinycolor(this.toString());
        },
        _applyModification: function(fn, args) {
          var color3 = fn.apply(null, [this].concat([].slice.call(args)));
          this._r = color3._r;
          this._g = color3._g;
          this._b = color3._b;
          this.setAlpha(color3._a);
          return this;
        },
        lighten: function() {
          return this._applyModification(lighten, arguments);
        },
        brighten: function() {
          return this._applyModification(brighten, arguments);
        },
        darken: function() {
          return this._applyModification(darken, arguments);
        },
        desaturate: function() {
          return this._applyModification(desaturate, arguments);
        },
        saturate: function() {
          return this._applyModification(saturate, arguments);
        },
        greyscale: function() {
          return this._applyModification(greyscale, arguments);
        },
        spin: function() {
          return this._applyModification(spin, arguments);
        },
        _applyCombination: function(fn, args) {
          return fn.apply(null, [this].concat([].slice.call(args)));
        },
        analogous: function() {
          return this._applyCombination(analogous, arguments);
        },
        complement: function() {
          return this._applyCombination(complement, arguments);
        },
        monochromatic: function() {
          return this._applyCombination(monochromatic, arguments);
        },
        splitcomplement: function() {
          return this._applyCombination(splitcomplement, arguments);
        },
        triad: function() {
          return this._applyCombination(triad, arguments);
        },
        tetrad: function() {
          return this._applyCombination(tetrad, arguments);
        }
      };
      tinycolor.fromRatio = function(color3, opts) {
        if (typeof color3 == "object") {
          var newColor = {};
          for (var i in color3) {
            if (color3.hasOwnProperty(i)) {
              if (i === "a") {
                newColor[i] = color3[i];
              } else {
                newColor[i] = convertToPercentage(color3[i]);
              }
            }
          }
          color3 = newColor;
        }
        return tinycolor(color3, opts);
      };
      function inputToRGB(color3) {
        var rgb3 = { r: 0, g: 0, b: 0 };
        var a = 1;
        var s = null;
        var v2 = null;
        var l = null;
        var ok = false;
        var format3 = false;
        if (typeof color3 == "string") {
          color3 = stringInputToObject(color3);
        }
        if (typeof color3 == "object") {
          if (isValidCSSUnit(color3.r) && isValidCSSUnit(color3.g) && isValidCSSUnit(color3.b)) {
            rgb3 = rgbToRgb(color3.r, color3.g, color3.b);
            ok = true;
            format3 = String(color3.r).substr(-1) === "%" ? "prgb" : "rgb";
          } else if (isValidCSSUnit(color3.h) && isValidCSSUnit(color3.s) && isValidCSSUnit(color3.v)) {
            s = convertToPercentage(color3.s);
            v2 = convertToPercentage(color3.v);
            rgb3 = hsvToRgb(color3.h, s, v2);
            ok = true;
            format3 = "hsv";
          } else if (isValidCSSUnit(color3.h) && isValidCSSUnit(color3.s) && isValidCSSUnit(color3.l)) {
            s = convertToPercentage(color3.s);
            l = convertToPercentage(color3.l);
            rgb3 = hslToRgb(color3.h, s, l);
            ok = true;
            format3 = "hsl";
          }
          if (color3.hasOwnProperty("a")) {
            a = color3.a;
          }
        }
        a = boundAlpha(a);
        return {
          ok,
          format: color3.format || format3,
          r: mathMin(255, mathMax(rgb3.r, 0)),
          g: mathMin(255, mathMax(rgb3.g, 0)),
          b: mathMin(255, mathMax(rgb3.b, 0)),
          a
        };
      }
      function rgbToRgb(r, g, b) {
        return {
          r: bound01(r, 255) * 255,
          g: bound01(g, 255) * 255,
          b: bound01(b, 255) * 255
        };
      }
      function rgbToHsl(r, g, b) {
        r = bound01(r, 255);
        g = bound01(g, 255);
        b = bound01(b, 255);
        var max4 = mathMax(r, g, b), min4 = mathMin(r, g, b);
        var h, s, l = (max4 + min4) / 2;
        if (max4 == min4) {
          h = s = 0;
        } else {
          var d = max4 - min4;
          s = l > 0.5 ? d / (2 - max4 - min4) : d / (max4 + min4);
          switch (max4) {
            case r:
              h = (g - b) / d + (g < b ? 6 : 0);
              break;
            case g:
              h = (b - r) / d + 2;
              break;
            case b:
              h = (r - g) / d + 4;
              break;
          }
          h /= 6;
        }
        return { h, s, l };
      }
      function hslToRgb(h, s, l) {
        var r, g, b;
        h = bound01(h, 360);
        s = bound01(s, 100);
        l = bound01(l, 100);
        function hue2rgb(p2, q2, t) {
          if (t < 0)
            t += 1;
          if (t > 1)
            t -= 1;
          if (t < 1 / 6)
            return p2 + (q2 - p2) * 6 * t;
          if (t < 1 / 2)
            return q2;
          if (t < 2 / 3)
            return p2 + (q2 - p2) * (2 / 3 - t) * 6;
          return p2;
        }
        if (s === 0) {
          r = g = b = l;
        } else {
          var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
          var p = 2 * l - q;
          r = hue2rgb(p, q, h + 1 / 3);
          g = hue2rgb(p, q, h);
          b = hue2rgb(p, q, h - 1 / 3);
        }
        return { r: r * 255, g: g * 255, b: b * 255 };
      }
      function rgbToHsv(r, g, b) {
        r = bound01(r, 255);
        g = bound01(g, 255);
        b = bound01(b, 255);
        var max4 = mathMax(r, g, b), min4 = mathMin(r, g, b);
        var h, s, v2 = max4;
        var d = max4 - min4;
        s = max4 === 0 ? 0 : d / max4;
        if (max4 == min4) {
          h = 0;
        } else {
          switch (max4) {
            case r:
              h = (g - b) / d + (g < b ? 6 : 0);
              break;
            case g:
              h = (b - r) / d + 2;
              break;
            case b:
              h = (r - g) / d + 4;
              break;
          }
          h /= 6;
        }
        return { h, s, v: v2 };
      }
      function hsvToRgb(h, s, v2) {
        h = bound01(h, 360) * 6;
        s = bound01(s, 100);
        v2 = bound01(v2, 100);
        var i = Math2.floor(h), f = h - i, p = v2 * (1 - s), q = v2 * (1 - f * s), t = v2 * (1 - (1 - f) * s), mod = i % 6, r = [v2, q, p, p, t, v2][mod], g = [t, v2, v2, q, p, p][mod], b = [p, p, t, v2, v2, q][mod];
        return { r: r * 255, g: g * 255, b: b * 255 };
      }
      function rgbToHex(r, g, b, allow3Char) {
        var hex3 = [
          pad22(mathRound(r).toString(16)),
          pad22(mathRound(g).toString(16)),
          pad22(mathRound(b).toString(16))
        ];
        if (allow3Char && hex3[0].charAt(0) == hex3[0].charAt(1) && hex3[1].charAt(0) == hex3[1].charAt(1) && hex3[2].charAt(0) == hex3[2].charAt(1)) {
          return hex3[0].charAt(0) + hex3[1].charAt(0) + hex3[2].charAt(0);
        }
        return hex3.join("");
      }
      function rgbaToHex(r, g, b, a, allow4Char) {
        var hex3 = [
          pad22(mathRound(r).toString(16)),
          pad22(mathRound(g).toString(16)),
          pad22(mathRound(b).toString(16)),
          pad22(convertDecimalToHex(a))
        ];
        if (allow4Char && hex3[0].charAt(0) == hex3[0].charAt(1) && hex3[1].charAt(0) == hex3[1].charAt(1) && hex3[2].charAt(0) == hex3[2].charAt(1) && hex3[3].charAt(0) == hex3[3].charAt(1)) {
          return hex3[0].charAt(0) + hex3[1].charAt(0) + hex3[2].charAt(0) + hex3[3].charAt(0);
        }
        return hex3.join("");
      }
      function rgbaToArgbHex(r, g, b, a) {
        var hex3 = [
          pad22(convertDecimalToHex(a)),
          pad22(mathRound(r).toString(16)),
          pad22(mathRound(g).toString(16)),
          pad22(mathRound(b).toString(16))
        ];
        return hex3.join("");
      }
      tinycolor.equals = function(color1, color22) {
        if (!color1 || !color22) {
          return false;
        }
        return tinycolor(color1).toRgbString() == tinycolor(color22).toRgbString();
      };
      tinycolor.random = function() {
        return tinycolor.fromRatio({
          r: mathRandom(),
          g: mathRandom(),
          b: mathRandom()
        });
      };
      function desaturate(color3, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl5 = tinycolor(color3).toHsl();
        hsl5.s -= amount / 100;
        hsl5.s = clamp01(hsl5.s);
        return tinycolor(hsl5);
      }
      function saturate(color3, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl5 = tinycolor(color3).toHsl();
        hsl5.s += amount / 100;
        hsl5.s = clamp01(hsl5.s);
        return tinycolor(hsl5);
      }
      function greyscale(color3) {
        return tinycolor(color3).desaturate(100);
      }
      function lighten(color3, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl5 = tinycolor(color3).toHsl();
        hsl5.l += amount / 100;
        hsl5.l = clamp01(hsl5.l);
        return tinycolor(hsl5);
      }
      function brighten(color3, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var rgb3 = tinycolor(color3).toRgb();
        rgb3.r = mathMax(0, mathMin(255, rgb3.r - mathRound(255 * -(amount / 100))));
        rgb3.g = mathMax(0, mathMin(255, rgb3.g - mathRound(255 * -(amount / 100))));
        rgb3.b = mathMax(0, mathMin(255, rgb3.b - mathRound(255 * -(amount / 100))));
        return tinycolor(rgb3);
      }
      function darken(color3, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl5 = tinycolor(color3).toHsl();
        hsl5.l -= amount / 100;
        hsl5.l = clamp01(hsl5.l);
        return tinycolor(hsl5);
      }
      function spin(color3, amount) {
        var hsl5 = tinycolor(color3).toHsl();
        var hue3 = (hsl5.h + amount) % 360;
        hsl5.h = hue3 < 0 ? 360 + hue3 : hue3;
        return tinycolor(hsl5);
      }
      function complement(color3) {
        var hsl5 = tinycolor(color3).toHsl();
        hsl5.h = (hsl5.h + 180) % 360;
        return tinycolor(hsl5);
      }
      function triad(color3) {
        var hsl5 = tinycolor(color3).toHsl();
        var h = hsl5.h;
        return [
          tinycolor(color3),
          tinycolor({ h: (h + 120) % 360, s: hsl5.s, l: hsl5.l }),
          tinycolor({ h: (h + 240) % 360, s: hsl5.s, l: hsl5.l })
        ];
      }
      function tetrad(color3) {
        var hsl5 = tinycolor(color3).toHsl();
        var h = hsl5.h;
        return [
          tinycolor(color3),
          tinycolor({ h: (h + 90) % 360, s: hsl5.s, l: hsl5.l }),
          tinycolor({ h: (h + 180) % 360, s: hsl5.s, l: hsl5.l }),
          tinycolor({ h: (h + 270) % 360, s: hsl5.s, l: hsl5.l })
        ];
      }
      function splitcomplement(color3) {
        var hsl5 = tinycolor(color3).toHsl();
        var h = hsl5.h;
        return [
          tinycolor(color3),
          tinycolor({ h: (h + 72) % 360, s: hsl5.s, l: hsl5.l }),
          tinycolor({ h: (h + 216) % 360, s: hsl5.s, l: hsl5.l })
        ];
      }
      function analogous(color3, results, slices) {
        results = results || 6;
        slices = slices || 30;
        var hsl5 = tinycolor(color3).toHsl();
        var part = 360 / slices;
        var ret = [tinycolor(color3)];
        for (hsl5.h = (hsl5.h - (part * results >> 1) + 720) % 360; --results; ) {
          hsl5.h = (hsl5.h + part) % 360;
          ret.push(tinycolor(hsl5));
        }
        return ret;
      }
      function monochromatic(color3, results) {
        results = results || 6;
        var hsv = tinycolor(color3).toHsv();
        var h = hsv.h, s = hsv.s, v2 = hsv.v;
        var ret = [];
        var modification = 1 / results;
        while (results--) {
          ret.push(tinycolor({ h, s, v: v2 }));
          v2 = (v2 + modification) % 1;
        }
        return ret;
      }
      tinycolor.mix = function(color1, color22, amount) {
        amount = amount === 0 ? 0 : amount || 50;
        var rgb1 = tinycolor(color1).toRgb();
        var rgb22 = tinycolor(color22).toRgb();
        var p = amount / 100;
        var rgba3 = {
          r: (rgb22.r - rgb1.r) * p + rgb1.r,
          g: (rgb22.g - rgb1.g) * p + rgb1.g,
          b: (rgb22.b - rgb1.b) * p + rgb1.b,
          a: (rgb22.a - rgb1.a) * p + rgb1.a
        };
        return tinycolor(rgba3);
      };
      tinycolor.readability = function(color1, color22) {
        var c1 = tinycolor(color1);
        var c2 = tinycolor(color22);
        return (Math2.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math2.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
      };
      tinycolor.isReadable = function(color1, color22, wcag2) {
        var readability = tinycolor.readability(color1, color22);
        var wcag2Parms, out;
        out = false;
        wcag2Parms = validateWCAG2Parms(wcag2);
        switch (wcag2Parms.level + wcag2Parms.size) {
          case "AAsmall":
          case "AAAlarge":
            out = readability >= 4.5;
            break;
          case "AAlarge":
            out = readability >= 3;
            break;
          case "AAAsmall":
            out = readability >= 7;
            break;
        }
        return out;
      };
      tinycolor.mostReadable = function(baseColor, colorList, args) {
        var bestColor = null;
        var bestScore = 0;
        var readability;
        var includeFallbackColors, level, size;
        args = args || {};
        includeFallbackColors = args.includeFallbackColors;
        level = args.level;
        size = args.size;
        for (var i = 0; i < colorList.length; i++) {
          readability = tinycolor.readability(baseColor, colorList[i]);
          if (readability > bestScore) {
            bestScore = readability;
            bestColor = tinycolor(colorList[i]);
          }
        }
        if (tinycolor.isReadable(baseColor, bestColor, { "level": level, "size": size }) || !includeFallbackColors) {
          return bestColor;
        } else {
          args.includeFallbackColors = false;
          return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);
        }
      };
      var names = tinycolor.names = {
        aliceblue: "f0f8ff",
        antiquewhite: "faebd7",
        aqua: "0ff",
        aquamarine: "7fffd4",
        azure: "f0ffff",
        beige: "f5f5dc",
        bisque: "ffe4c4",
        black: "000",
        blanchedalmond: "ffebcd",
        blue: "00f",
        blueviolet: "8a2be2",
        brown: "a52a2a",
        burlywood: "deb887",
        burntsienna: "ea7e5d",
        cadetblue: "5f9ea0",
        chartreuse: "7fff00",
        chocolate: "d2691e",
        coral: "ff7f50",
        cornflowerblue: "6495ed",
        cornsilk: "fff8dc",
        crimson: "dc143c",
        cyan: "0ff",
        darkblue: "00008b",
        darkcyan: "008b8b",
        darkgoldenrod: "b8860b",
        darkgray: "a9a9a9",
        darkgreen: "006400",
        darkgrey: "a9a9a9",
        darkkhaki: "bdb76b",
        darkmagenta: "8b008b",
        darkolivegreen: "556b2f",
        darkorange: "ff8c00",
        darkorchid: "9932cc",
        darkred: "8b0000",
        darksalmon: "e9967a",
        darkseagreen: "8fbc8f",
        darkslateblue: "483d8b",
        darkslategray: "2f4f4f",
        darkslategrey: "2f4f4f",
        darkturquoise: "00ced1",
        darkviolet: "9400d3",
        deeppink: "ff1493",
        deepskyblue: "00bfff",
        dimgray: "696969",
        dimgrey: "696969",
        dodgerblue: "1e90ff",
        firebrick: "b22222",
        floralwhite: "fffaf0",
        forestgreen: "228b22",
        fuchsia: "f0f",
        gainsboro: "dcdcdc",
        ghostwhite: "f8f8ff",
        gold: "ffd700",
        goldenrod: "daa520",
        gray: "808080",
        green: "008000",
        greenyellow: "adff2f",
        grey: "808080",
        honeydew: "f0fff0",
        hotpink: "ff69b4",
        indianred: "cd5c5c",
        indigo: "4b0082",
        ivory: "fffff0",
        khaki: "f0e68c",
        lavender: "e6e6fa",
        lavenderblush: "fff0f5",
        lawngreen: "7cfc00",
        lemonchiffon: "fffacd",
        lightblue: "add8e6",
        lightcoral: "f08080",
        lightcyan: "e0ffff",
        lightgoldenrodyellow: "fafad2",
        lightgray: "d3d3d3",
        lightgreen: "90ee90",
        lightgrey: "d3d3d3",
        lightpink: "ffb6c1",
        lightsalmon: "ffa07a",
        lightseagreen: "20b2aa",
        lightskyblue: "87cefa",
        lightslategray: "789",
        lightslategrey: "789",
        lightsteelblue: "b0c4de",
        lightyellow: "ffffe0",
        lime: "0f0",
        limegreen: "32cd32",
        linen: "faf0e6",
        magenta: "f0f",
        maroon: "800000",
        mediumaquamarine: "66cdaa",
        mediumblue: "0000cd",
        mediumorchid: "ba55d3",
        mediumpurple: "9370db",
        mediumseagreen: "3cb371",
        mediumslateblue: "7b68ee",
        mediumspringgreen: "00fa9a",
        mediumturquoise: "48d1cc",
        mediumvioletred: "c71585",
        midnightblue: "191970",
        mintcream: "f5fffa",
        mistyrose: "ffe4e1",
        moccasin: "ffe4b5",
        navajowhite: "ffdead",
        navy: "000080",
        oldlace: "fdf5e6",
        olive: "808000",
        olivedrab: "6b8e23",
        orange: "ffa500",
        orangered: "ff4500",
        orchid: "da70d6",
        palegoldenrod: "eee8aa",
        palegreen: "98fb98",
        paleturquoise: "afeeee",
        palevioletred: "db7093",
        papayawhip: "ffefd5",
        peachpuff: "ffdab9",
        peru: "cd853f",
        pink: "ffc0cb",
        plum: "dda0dd",
        powderblue: "b0e0e6",
        purple: "800080",
        rebeccapurple: "663399",
        red: "f00",
        rosybrown: "bc8f8f",
        royalblue: "4169e1",
        saddlebrown: "8b4513",
        salmon: "fa8072",
        sandybrown: "f4a460",
        seagreen: "2e8b57",
        seashell: "fff5ee",
        sienna: "a0522d",
        silver: "c0c0c0",
        skyblue: "87ceeb",
        slateblue: "6a5acd",
        slategray: "708090",
        slategrey: "708090",
        snow: "fffafa",
        springgreen: "00ff7f",
        steelblue: "4682b4",
        tan: "d2b48c",
        teal: "008080",
        thistle: "d8bfd8",
        tomato: "ff6347",
        turquoise: "40e0d0",
        violet: "ee82ee",
        wheat: "f5deb3",
        white: "fff",
        whitesmoke: "f5f5f5",
        yellow: "ff0",
        yellowgreen: "9acd32"
      };
      var hexNames = tinycolor.hexNames = flip(names);
      function flip(o) {
        var flipped = {};
        for (var i in o) {
          if (o.hasOwnProperty(i)) {
            flipped[o[i]] = i;
          }
        }
        return flipped;
      }
      function boundAlpha(a) {
        a = parseFloat(a);
        if (isNaN(a) || a < 0 || a > 1) {
          a = 1;
        }
        return a;
      }
      function bound01(n, max4) {
        if (isOnePointZero(n)) {
          n = "100%";
        }
        var processPercent = isPercentage(n);
        n = mathMin(max4, mathMax(0, parseFloat(n)));
        if (processPercent) {
          n = parseInt(n * max4, 10) / 100;
        }
        if (Math2.abs(n - max4) < 1e-6) {
          return 1;
        }
        return n % max4 / parseFloat(max4);
      }
      function clamp01(val) {
        return mathMin(1, mathMax(0, val));
      }
      function parseIntFromHex(val) {
        return parseInt(val, 16);
      }
      function isOnePointZero(n) {
        return typeof n == "string" && n.indexOf(".") != -1 && parseFloat(n) === 1;
      }
      function isPercentage(n) {
        return typeof n === "string" && n.indexOf("%") != -1;
      }
      function pad22(c) {
        return c.length == 1 ? "0" + c : "" + c;
      }
      function convertToPercentage(n) {
        if (n <= 1) {
          n = n * 100 + "%";
        }
        return n;
      }
      function convertDecimalToHex(d) {
        return Math2.round(parseFloat(d) * 255).toString(16);
      }
      function convertHexToDecimal(h) {
        return parseIntFromHex(h) / 255;
      }
      var matchers = function() {
        var CSS_INTEGER = "[-\\+]?\\d+%?";
        var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
        var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
        var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
        var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
        return {
          CSS_UNIT: new RegExp(CSS_UNIT),
          rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
          rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
          hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
          hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
          hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
          hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
          hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
          hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
          hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
          hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
        };
      }();
      function isValidCSSUnit(color3) {
        return !!matchers.CSS_UNIT.exec(color3);
      }
      function stringInputToObject(color3) {
        color3 = color3.replace(trimLeft, "").replace(trimRight, "").toLowerCase();
        var named3 = false;
        if (names[color3]) {
          color3 = names[color3];
          named3 = true;
        } else if (color3 == "transparent") {
          return { r: 0, g: 0, b: 0, a: 0, format: "name" };
        }
        var match;
        if (match = matchers.rgb.exec(color3)) {
          return { r: match[1], g: match[2], b: match[3] };
        }
        if (match = matchers.rgba.exec(color3)) {
          return { r: match[1], g: match[2], b: match[3], a: match[4] };
        }
        if (match = matchers.hsl.exec(color3)) {
          return { h: match[1], s: match[2], l: match[3] };
        }
        if (match = matchers.hsla.exec(color3)) {
          return { h: match[1], s: match[2], l: match[3], a: match[4] };
        }
        if (match = matchers.hsv.exec(color3)) {
          return { h: match[1], s: match[2], v: match[3] };
        }
        if (match = matchers.hsva.exec(color3)) {
          return { h: match[1], s: match[2], v: match[3], a: match[4] };
        }
        if (match = matchers.hex8.exec(color3)) {
          return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            a: convertHexToDecimal(match[4]),
            format: named3 ? "name" : "hex8"
          };
        }
        if (match = matchers.hex6.exec(color3)) {
          return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            format: named3 ? "name" : "hex"
          };
        }
        if (match = matchers.hex4.exec(color3)) {
          return {
            r: parseIntFromHex(match[1] + "" + match[1]),
            g: parseIntFromHex(match[2] + "" + match[2]),
            b: parseIntFromHex(match[3] + "" + match[3]),
            a: convertHexToDecimal(match[4] + "" + match[4]),
            format: named3 ? "name" : "hex8"
          };
        }
        if (match = matchers.hex3.exec(color3)) {
          return {
            r: parseIntFromHex(match[1] + "" + match[1]),
            g: parseIntFromHex(match[2] + "" + match[2]),
            b: parseIntFromHex(match[3] + "" + match[3]),
            format: named3 ? "name" : "hex"
          };
        }
        return false;
      }
      function validateWCAG2Parms(parms) {
        var level, size;
        parms = parms || { "level": "AA", "size": "small" };
        level = (parms.level || "AA").toUpperCase();
        size = (parms.size || "small").toLowerCase();
        if (level !== "AA" && level !== "AAA") {
          level = "AA";
        }
        if (size !== "small" && size !== "large") {
          size = "small";
        }
        return { "level": level, "size": size };
      }
      if (typeof module !== "undefined" && module.exports) {
        module.exports = tinycolor;
      } else if (typeof define === "function" && define.amd) {
        define(function() {
          return tinycolor;
        });
      } else {
        window.tinycolor = tinycolor;
      }
    })(Math);
  }
});

// node_modules/frame-ticker/dist/FrameTicker.js
var require_FrameTicker = __commonJS({
  "node_modules/frame-ticker/dist/FrameTicker.js"(exports2, module) {
    !function(e, t) {
      typeof exports2 == "object" && typeof module == "object" ? module.exports = t() : typeof define == "function" && define.amd ? define("FrameTicker", [], t) : typeof exports2 == "object" ? exports2.FrameTicker = t() : e.FrameTicker = t();
    }(exports2, function() {
      return function(e) {
        function t(n) {
          if (i[n])
            return i[n].exports;
          var r = i[n] = { exports: {}, id: n, loaded: false };
          return e[n].call(r.exports, r, r.exports, t), r.loaded = true, r.exports;
        }
        var i = {};
        return t.m = e, t.c = i, t.p = "", t(0);
      }([function(e, t, i) {
        "use strict";
        var n = i(1), r = function() {
          function e3(e4, t4, i2) {
            e4 === void 0 && (e4 = NaN), t4 === void 0 && (t4 = NaN), i2 === void 0 && (i2 = false), this._minFPS = t4, this._maxFPS = e4, this._timeScale = 1, this._currentTick = 0, this._currentTime = 0, this._tickDeltaTime = 0, this._isRunning = false, this._maxInterval = isNaN(this._minFPS) ? NaN : 1e3 / this._minFPS, this._minInterval = isNaN(this._maxFPS) ? NaN : 1e3 / this._maxFPS, this._onResume = new n.default(), this._onPause = new n.default(), this._onTick = new n.default(), this._onTickOncePerFrame = new n.default(), i2 || this.resume();
          }
          return e3.prototype.updateOnce = function(e4) {
            e4(this.currentTimeSeconds, this.tickDeltaTimeSeconds, this.currentTick);
          }, e3.prototype.resume = function() {
            this._isRunning || (this._isRunning = true, this._lastTimeUpdated = this.getTimer(), this._onResume.dispatch(), this.animateOnce());
          }, e3.prototype.pause = function() {
            this._isRunning && (this._isRunning = false, this._onPause.dispatch(), window.cancelAnimationFrame(this._animationFrameHandle));
          }, e3.prototype.dispose = function() {
            this.pause(), this._onResume.removeAll(), this._onPause.removeAll(), this._onTick.removeAll();
          }, Object.defineProperty(e3.prototype, "currentTick", { get: function() {
            return this._currentTick;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "currentTimeSeconds", { get: function() {
            return this._currentTime / 1e3;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "tickDeltaTimeSeconds", { get: function() {
            return this._tickDeltaTime / 1e3;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "timeScale", { get: function() {
            return this._timeScale;
          }, set: function(e4) {
            this._timeScale !== e4 && (this._timeScale = e4);
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "onResume", { get: function() {
            return this._onResume;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "onPause", { get: function() {
            return this._onPause;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "onTick", { get: function() {
            return this._onTick;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "onTickOncePerFrame", { get: function() {
            return this._onTickOncePerFrame;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "isRunning", { get: function() {
            return this._isRunning;
          }, enumerable: true, configurable: true }), e3.prototype.animateOnce = function() {
            var e4 = this;
            this._animationFrameHandle = window.requestAnimationFrame(function() {
              return e4.onFrame();
            });
          }, e3.prototype.onFrame = function() {
            if (this._now = this.getTimer(), this._frameDeltaTime = this._now - this._lastTimeUpdated, isNaN(this._minInterval) || this._frameDeltaTime >= this._minInterval)
              if (isNaN(this._maxInterval))
                this.update(this._frameDeltaTime * this._timeScale, true), this._lastTimeUpdated = this._now;
              else
                for (this._interval = Math.min(this._frameDeltaTime, this._maxInterval); this._now >= this._lastTimeUpdated + this._interval; )
                  this.update(this._interval * this._timeScale, this._now <= this._lastTimeUpdated + 2 * this._maxInterval), this._lastTimeUpdated += this._interval;
            this._isRunning && this.animateOnce();
          }, e3.prototype.update = function(e4, t4) {
            t4 === void 0 && (t4 = true), this._currentTick++, this._currentTime += e4, this._tickDeltaTime = e4, this._onTick.dispatch(this.currentTimeSeconds, this.tickDeltaTimeSeconds, this.currentTick), t4 && this._onTickOncePerFrame.dispatch(this.currentTimeSeconds, this.tickDeltaTimeSeconds, this.currentTick);
          }, e3.prototype.getTimer = function() {
            return Date.now();
          }, e3;
        }();
        Object.defineProperty(t, "__esModule", { value: true }), t.default = r;
      }, function(e, t, i) {
        !function(t4, i2) {
          e.exports = i2();
        }(this, function() {
          return function(e3) {
            function t4(n) {
              if (i2[n])
                return i2[n].exports;
              var r = i2[n] = { exports: {}, id: n, loaded: false };
              return e3[n].call(r.exports, r, r.exports, t4), r.loaded = true, r.exports;
            }
            var i2 = {};
            return t4.m = e3, t4.c = i2, t4.p = "", t4(0);
          }([function(e3, t4) {
            "use strict";
            var i2 = function() {
              function e4() {
                this.functions = [];
              }
              return e4.prototype.add = function(e6) {
                return this.functions.indexOf(e6) === -1 && (this.functions.push(e6), true);
              }, e4.prototype.remove = function(e6) {
                var t5 = this.functions.indexOf(e6);
                return t5 > -1 && (this.functions.splice(t5, 1), true);
              }, e4.prototype.removeAll = function() {
                return this.functions.length > 0 && (this.functions.length = 0, true);
              }, e4.prototype.dispatch = function() {
                for (var e6 = [], t5 = 0; t5 < arguments.length; t5++)
                  e6[t5] = arguments[t5];
                var i3 = this.functions.concat();
                i3.forEach(function(t6) {
                  t6.apply(void 0, e6);
                });
              }, Object.defineProperty(e4.prototype, "numItems", { get: function() {
                return this.functions.length;
              }, enumerable: true, configurable: true }), e4;
            }();
            Object.defineProperty(t4, "__esModule", { value: true }), t4.default = i2;
          }]);
        });
      }]);
    });
  }
});

// node_modules/kapsule/dist/kapsule.module.js
var import_debounce = __toModule(require_debounce());
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var Prop = function Prop2(name, _ref) {
  var _ref$default = _ref["default"], defaultVal = _ref$default === void 0 ? null : _ref$default, _ref$triggerUpdate = _ref.triggerUpdate, triggerUpdate = _ref$triggerUpdate === void 0 ? true : _ref$triggerUpdate, _ref$onChange = _ref.onChange, onChange6 = _ref$onChange === void 0 ? function(newVal, state) {
  } : _ref$onChange;
  _classCallCheck(this, Prop2);
  this.name = name;
  this.defaultVal = defaultVal;
  this.triggerUpdate = triggerUpdate;
  this.onChange = onChange6;
};
function index(_ref2) {
  var _ref2$stateInit = _ref2.stateInit, stateInit3 = _ref2$stateInit === void 0 ? function() {
    return {};
  } : _ref2$stateInit, _ref2$props = _ref2.props, rawProps = _ref2$props === void 0 ? {} : _ref2$props, _ref2$methods = _ref2.methods, methods = _ref2$methods === void 0 ? {} : _ref2$methods, _ref2$aliases = _ref2.aliases, aliases = _ref2$aliases === void 0 ? {} : _ref2$aliases, _ref2$init = _ref2.init, initFn = _ref2$init === void 0 ? function() {
  } : _ref2$init, _ref2$update = _ref2.update, updateFn = _ref2$update === void 0 ? function() {
  } : _ref2$update;
  var props = Object.keys(rawProps).map(function(propName) {
    return new Prop(propName, rawProps[propName]);
  });
  return function() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var state = Object.assign({}, stateInit3 instanceof Function ? stateInit3(options) : stateInit3, {
      initialised: false
    });
    var changedProps = {};
    function comp(nodeElement) {
      initStatic(nodeElement, options);
      digest();
      return comp;
    }
    var initStatic = function initStatic2(nodeElement, options2) {
      initFn.call(comp, nodeElement, state, options2);
      state.initialised = true;
    };
    var digest = (0, import_debounce.default)(function() {
      if (!state.initialised) {
        return;
      }
      updateFn.call(comp, state, changedProps);
      changedProps = {};
    }, 1);
    props.forEach(function(prop) {
      comp[prop.name] = getSetProp(prop);
      function getSetProp(_ref3) {
        var prop2 = _ref3.name, _ref3$triggerUpdate = _ref3.triggerUpdate, redigest = _ref3$triggerUpdate === void 0 ? false : _ref3$triggerUpdate, _ref3$onChange = _ref3.onChange, onChange6 = _ref3$onChange === void 0 ? function(newVal, state2) {
        } : _ref3$onChange, _ref3$defaultVal = _ref3.defaultVal, defaultVal = _ref3$defaultVal === void 0 ? null : _ref3$defaultVal;
        return function(_) {
          var curVal = state[prop2];
          if (!arguments.length) {
            return curVal;
          }
          var val = _ === void 0 ? defaultVal : _;
          state[prop2] = val;
          onChange6.call(comp, val, state, curVal);
          !changedProps.hasOwnProperty(prop2) && (changedProps[prop2] = curVal);
          if (redigest) {
            digest();
          }
          return comp;
        };
      }
    });
    Object.keys(methods).forEach(function(methodName) {
      comp[methodName] = function() {
        var _methods$methodName;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return (_methods$methodName = methods[methodName]).call.apply(_methods$methodName, [comp, state].concat(args));
      };
    });
    Object.entries(aliases).forEach(function(_ref4) {
      var _ref5 = _slicedToArray(_ref4, 2), alias = _ref5[0], target = _ref5[1];
      return comp[alias] = comp[target];
    });
    comp.resetProps = function() {
      props.forEach(function(prop) {
        comp[prop.name](prop.defaultVal);
      });
      return comp;
    };
    comp.resetProps();
    state._rerender = digest;
    return comp;
  };
}
var kapsule_module_default = index;

// node_modules/@tweenjs/tween.js/dist/tween.esm.js
var Easing = {
  Linear: {
    None: function(amount) {
      return amount;
    }
  },
  Quadratic: {
    In: function(amount) {
      return amount * amount;
    },
    Out: function(amount) {
      return amount * (2 - amount);
    },
    InOut: function(amount) {
      if ((amount *= 2) < 1) {
        return 0.5 * amount * amount;
      }
      return -0.5 * (--amount * (amount - 2) - 1);
    }
  },
  Cubic: {
    In: function(amount) {
      return amount * amount * amount;
    },
    Out: function(amount) {
      return --amount * amount * amount + 1;
    },
    InOut: function(amount) {
      if ((amount *= 2) < 1) {
        return 0.5 * amount * amount * amount;
      }
      return 0.5 * ((amount -= 2) * amount * amount + 2);
    }
  },
  Quartic: {
    In: function(amount) {
      return amount * amount * amount * amount;
    },
    Out: function(amount) {
      return 1 - --amount * amount * amount * amount;
    },
    InOut: function(amount) {
      if ((amount *= 2) < 1) {
        return 0.5 * amount * amount * amount * amount;
      }
      return -0.5 * ((amount -= 2) * amount * amount * amount - 2);
    }
  },
  Quintic: {
    In: function(amount) {
      return amount * amount * amount * amount * amount;
    },
    Out: function(amount) {
      return --amount * amount * amount * amount * amount + 1;
    },
    InOut: function(amount) {
      if ((amount *= 2) < 1) {
        return 0.5 * amount * amount * amount * amount * amount;
      }
      return 0.5 * ((amount -= 2) * amount * amount * amount * amount + 2);
    }
  },
  Sinusoidal: {
    In: function(amount) {
      return 1 - Math.cos(amount * Math.PI / 2);
    },
    Out: function(amount) {
      return Math.sin(amount * Math.PI / 2);
    },
    InOut: function(amount) {
      return 0.5 * (1 - Math.cos(Math.PI * amount));
    }
  },
  Exponential: {
    In: function(amount) {
      return amount === 0 ? 0 : Math.pow(1024, amount - 1);
    },
    Out: function(amount) {
      return amount === 1 ? 1 : 1 - Math.pow(2, -10 * amount);
    },
    InOut: function(amount) {
      if (amount === 0) {
        return 0;
      }
      if (amount === 1) {
        return 1;
      }
      if ((amount *= 2) < 1) {
        return 0.5 * Math.pow(1024, amount - 1);
      }
      return 0.5 * (-Math.pow(2, -10 * (amount - 1)) + 2);
    }
  },
  Circular: {
    In: function(amount) {
      return 1 - Math.sqrt(1 - amount * amount);
    },
    Out: function(amount) {
      return Math.sqrt(1 - --amount * amount);
    },
    InOut: function(amount) {
      if ((amount *= 2) < 1) {
        return -0.5 * (Math.sqrt(1 - amount * amount) - 1);
      }
      return 0.5 * (Math.sqrt(1 - (amount -= 2) * amount) + 1);
    }
  },
  Elastic: {
    In: function(amount) {
      if (amount === 0) {
        return 0;
      }
      if (amount === 1) {
        return 1;
      }
      return -Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);
    },
    Out: function(amount) {
      if (amount === 0) {
        return 0;
      }
      if (amount === 1) {
        return 1;
      }
      return Math.pow(2, -10 * amount) * Math.sin((amount - 0.1) * 5 * Math.PI) + 1;
    },
    InOut: function(amount) {
      if (amount === 0) {
        return 0;
      }
      if (amount === 1) {
        return 1;
      }
      amount *= 2;
      if (amount < 1) {
        return -0.5 * Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);
      }
      return 0.5 * Math.pow(2, -10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI) + 1;
    }
  },
  Back: {
    In: function(amount) {
      var s = 1.70158;
      return amount * amount * ((s + 1) * amount - s);
    },
    Out: function(amount) {
      var s = 1.70158;
      return --amount * amount * ((s + 1) * amount + s) + 1;
    },
    InOut: function(amount) {
      var s = 1.70158 * 1.525;
      if ((amount *= 2) < 1) {
        return 0.5 * (amount * amount * ((s + 1) * amount - s));
      }
      return 0.5 * ((amount -= 2) * amount * ((s + 1) * amount + s) + 2);
    }
  },
  Bounce: {
    In: function(amount) {
      return 1 - Easing.Bounce.Out(1 - amount);
    },
    Out: function(amount) {
      if (amount < 1 / 2.75) {
        return 7.5625 * amount * amount;
      } else if (amount < 2 / 2.75) {
        return 7.5625 * (amount -= 1.5 / 2.75) * amount + 0.75;
      } else if (amount < 2.5 / 2.75) {
        return 7.5625 * (amount -= 2.25 / 2.75) * amount + 0.9375;
      } else {
        return 7.5625 * (amount -= 2.625 / 2.75) * amount + 0.984375;
      }
    },
    InOut: function(amount) {
      if (amount < 0.5) {
        return Easing.Bounce.In(amount * 2) * 0.5;
      }
      return Easing.Bounce.Out(amount * 2 - 1) * 0.5 + 0.5;
    }
  }
};
var now;
if (typeof self === "undefined" && typeof process !== "undefined" && process.hrtime) {
  now = function() {
    var time2 = process.hrtime();
    return time2[0] * 1e3 + time2[1] / 1e6;
  };
} else if (typeof self !== "undefined" && self.performance !== void 0 && self.performance.now !== void 0) {
  now = self.performance.now.bind(self.performance);
} else if (Date.now !== void 0) {
  now = Date.now;
} else {
  now = function() {
    return new Date().getTime();
  };
}
var now$1 = now;
var Group2 = function() {
  function Group3() {
    this._tweens = {};
    this._tweensAddedDuringUpdate = {};
  }
  Group3.prototype.getAll = function() {
    var _this = this;
    return Object.keys(this._tweens).map(function(tweenId) {
      return _this._tweens[tweenId];
    });
  };
  Group3.prototype.removeAll = function() {
    this._tweens = {};
  };
  Group3.prototype.add = function(tween) {
    this._tweens[tween.getId()] = tween;
    this._tweensAddedDuringUpdate[tween.getId()] = tween;
  };
  Group3.prototype.remove = function(tween) {
    delete this._tweens[tween.getId()];
    delete this._tweensAddedDuringUpdate[tween.getId()];
  };
  Group3.prototype.update = function(time2, preserve) {
    if (time2 === void 0) {
      time2 = now$1();
    }
    if (preserve === void 0) {
      preserve = false;
    }
    var tweenIds = Object.keys(this._tweens);
    if (tweenIds.length === 0) {
      return false;
    }
    while (tweenIds.length > 0) {
      this._tweensAddedDuringUpdate = {};
      for (var i = 0; i < tweenIds.length; i++) {
        var tween = this._tweens[tweenIds[i]];
        var autoStart = !preserve;
        if (tween && tween.update(time2, autoStart) === false && !preserve) {
          delete this._tweens[tweenIds[i]];
        }
      }
      tweenIds = Object.keys(this._tweensAddedDuringUpdate);
    }
    return true;
  };
  return Group3;
}();
var Interpolation = {
  Linear: function(v2, k) {
    var m = v2.length - 1;
    var f = m * k;
    var i = Math.floor(f);
    var fn = Interpolation.Utils.Linear;
    if (k < 0) {
      return fn(v2[0], v2[1], f);
    }
    if (k > 1) {
      return fn(v2[m], v2[m - 1], m - f);
    }
    return fn(v2[i], v2[i + 1 > m ? m : i + 1], f - i);
  },
  Bezier: function(v2, k) {
    var b = 0;
    var n = v2.length - 1;
    var pw = Math.pow;
    var bn = Interpolation.Utils.Bernstein;
    for (var i = 0; i <= n; i++) {
      b += pw(1 - k, n - i) * pw(k, i) * v2[i] * bn(n, i);
    }
    return b;
  },
  CatmullRom: function(v2, k) {
    var m = v2.length - 1;
    var f = m * k;
    var i = Math.floor(f);
    var fn = Interpolation.Utils.CatmullRom;
    if (v2[0] === v2[m]) {
      if (k < 0) {
        i = Math.floor(f = m * (1 + k));
      }
      return fn(v2[(i - 1 + m) % m], v2[i], v2[(i + 1) % m], v2[(i + 2) % m], f - i);
    } else {
      if (k < 0) {
        return v2[0] - (fn(v2[0], v2[0], v2[1], v2[1], -f) - v2[0]);
      }
      if (k > 1) {
        return v2[m] - (fn(v2[m], v2[m], v2[m - 1], v2[m - 1], f - m) - v2[m]);
      }
      return fn(v2[i ? i - 1 : 0], v2[i], v2[m < i + 1 ? m : i + 1], v2[m < i + 2 ? m : i + 2], f - i);
    }
  },
  Utils: {
    Linear: function(p02, p1, t) {
      return (p1 - p02) * t + p02;
    },
    Bernstein: function(n, i) {
      var fc = Interpolation.Utils.Factorial;
      return fc(n) / fc(i) / fc(n - i);
    },
    Factorial: function() {
      var a = [1];
      return function(n) {
        var s = 1;
        if (a[n]) {
          return a[n];
        }
        for (var i = n; i > 1; i--) {
          s *= i;
        }
        a[n] = s;
        return s;
      };
    }(),
    CatmullRom: function(p02, p1, p2, p3, t) {
      var v0 = (p2 - p02) * 0.5;
      var v1 = (p3 - p1) * 0.5;
      var t23 = t * t;
      var t33 = t * t23;
      return (2 * p1 - 2 * p2 + v0 + v1) * t33 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t23 + v0 * t + p1;
    }
  }
};
var Sequence = function() {
  function Sequence2() {
  }
  Sequence2.nextId = function() {
    return Sequence2._nextId++;
  };
  Sequence2._nextId = 0;
  return Sequence2;
}();
var mainGroup = new Group2();
var Tween = function() {
  function Tween2(_object, _group) {
    if (_group === void 0) {
      _group = mainGroup;
    }
    this._object = _object;
    this._group = _group;
    this._isPaused = false;
    this._pauseStart = 0;
    this._valuesStart = {};
    this._valuesEnd = {};
    this._valuesStartRepeat = {};
    this._duration = 1e3;
    this._initialRepeat = 0;
    this._repeat = 0;
    this._yoyo = false;
    this._isPlaying = false;
    this._reversed = false;
    this._delayTime = 0;
    this._startTime = 0;
    this._easingFunction = Easing.Linear.None;
    this._interpolationFunction = Interpolation.Linear;
    this._chainedTweens = [];
    this._onStartCallbackFired = false;
    this._id = Sequence.nextId();
    this._isChainStopped = false;
    this._goToEnd = false;
  }
  Tween2.prototype.getId = function() {
    return this._id;
  };
  Tween2.prototype.isPlaying = function() {
    return this._isPlaying;
  };
  Tween2.prototype.isPaused = function() {
    return this._isPaused;
  };
  Tween2.prototype.to = function(properties, duration) {
    this._valuesEnd = Object.create(properties);
    if (duration !== void 0) {
      this._duration = duration;
    }
    return this;
  };
  Tween2.prototype.duration = function(d) {
    this._duration = d;
    return this;
  };
  Tween2.prototype.start = function(time2) {
    if (this._isPlaying) {
      return this;
    }
    this._group && this._group.add(this);
    this._repeat = this._initialRepeat;
    if (this._reversed) {
      this._reversed = false;
      for (var property in this._valuesStartRepeat) {
        this._swapEndStartRepeatValues(property);
        this._valuesStart[property] = this._valuesStartRepeat[property];
      }
    }
    this._isPlaying = true;
    this._isPaused = false;
    this._onStartCallbackFired = false;
    this._isChainStopped = false;
    this._startTime = time2 !== void 0 ? typeof time2 === "string" ? now$1() + parseFloat(time2) : time2 : now$1();
    this._startTime += this._delayTime;
    this._setupProperties(this._object, this._valuesStart, this._valuesEnd, this._valuesStartRepeat);
    return this;
  };
  Tween2.prototype._setupProperties = function(_object, _valuesStart, _valuesEnd, _valuesStartRepeat) {
    for (var property in _valuesEnd) {
      var startValue = _object[property];
      var startValueIsArray = Array.isArray(startValue);
      var propType = startValueIsArray ? "array" : typeof startValue;
      var isInterpolationList = !startValueIsArray && Array.isArray(_valuesEnd[property]);
      if (propType === "undefined" || propType === "function") {
        continue;
      }
      if (isInterpolationList) {
        var endValues = _valuesEnd[property];
        if (endValues.length === 0) {
          continue;
        }
        endValues = endValues.map(this._handleRelativeValue.bind(this, startValue));
        _valuesEnd[property] = [startValue].concat(endValues);
      }
      if ((propType === "object" || startValueIsArray) && startValue && !isInterpolationList) {
        _valuesStart[property] = startValueIsArray ? [] : {};
        for (var prop in startValue) {
          _valuesStart[property][prop] = startValue[prop];
        }
        _valuesStartRepeat[property] = startValueIsArray ? [] : {};
        this._setupProperties(startValue, _valuesStart[property], _valuesEnd[property], _valuesStartRepeat[property]);
      } else {
        if (typeof _valuesStart[property] === "undefined") {
          _valuesStart[property] = startValue;
        }
        if (!startValueIsArray) {
          _valuesStart[property] *= 1;
        }
        if (isInterpolationList) {
          _valuesStartRepeat[property] = _valuesEnd[property].slice().reverse();
        } else {
          _valuesStartRepeat[property] = _valuesStart[property] || 0;
        }
      }
    }
  };
  Tween2.prototype.stop = function() {
    if (!this._isChainStopped) {
      this._isChainStopped = true;
      this.stopChainedTweens();
    }
    if (!this._isPlaying) {
      return this;
    }
    this._group && this._group.remove(this);
    this._isPlaying = false;
    this._isPaused = false;
    if (this._onStopCallback) {
      this._onStopCallback(this._object);
    }
    return this;
  };
  Tween2.prototype.end = function() {
    this._goToEnd = true;
    this.update(Infinity);
    return this;
  };
  Tween2.prototype.pause = function(time2) {
    if (time2 === void 0) {
      time2 = now$1();
    }
    if (this._isPaused || !this._isPlaying) {
      return this;
    }
    this._isPaused = true;
    this._pauseStart = time2;
    this._group && this._group.remove(this);
    return this;
  };
  Tween2.prototype.resume = function(time2) {
    if (time2 === void 0) {
      time2 = now$1();
    }
    if (!this._isPaused || !this._isPlaying) {
      return this;
    }
    this._isPaused = false;
    this._startTime += time2 - this._pauseStart;
    this._pauseStart = 0;
    this._group && this._group.add(this);
    return this;
  };
  Tween2.prototype.stopChainedTweens = function() {
    for (var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {
      this._chainedTweens[i].stop();
    }
    return this;
  };
  Tween2.prototype.group = function(group3) {
    this._group = group3;
    return this;
  };
  Tween2.prototype.delay = function(amount) {
    this._delayTime = amount;
    return this;
  };
  Tween2.prototype.repeat = function(times) {
    this._initialRepeat = times;
    this._repeat = times;
    return this;
  };
  Tween2.prototype.repeatDelay = function(amount) {
    this._repeatDelayTime = amount;
    return this;
  };
  Tween2.prototype.yoyo = function(yoyo) {
    this._yoyo = yoyo;
    return this;
  };
  Tween2.prototype.easing = function(easingFunction) {
    this._easingFunction = easingFunction;
    return this;
  };
  Tween2.prototype.interpolation = function(interpolationFunction) {
    this._interpolationFunction = interpolationFunction;
    return this;
  };
  Tween2.prototype.chain = function() {
    var tweens = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      tweens[_i] = arguments[_i];
    }
    this._chainedTweens = tweens;
    return this;
  };
  Tween2.prototype.onStart = function(callback) {
    this._onStartCallback = callback;
    return this;
  };
  Tween2.prototype.onUpdate = function(callback) {
    this._onUpdateCallback = callback;
    return this;
  };
  Tween2.prototype.onRepeat = function(callback) {
    this._onRepeatCallback = callback;
    return this;
  };
  Tween2.prototype.onComplete = function(callback) {
    this._onCompleteCallback = callback;
    return this;
  };
  Tween2.prototype.onStop = function(callback) {
    this._onStopCallback = callback;
    return this;
  };
  Tween2.prototype.update = function(time2, autoStart) {
    if (time2 === void 0) {
      time2 = now$1();
    }
    if (autoStart === void 0) {
      autoStart = true;
    }
    if (this._isPaused)
      return true;
    var property;
    var elapsed;
    var endTime = this._startTime + this._duration;
    if (!this._goToEnd && !this._isPlaying) {
      if (time2 > endTime)
        return false;
      if (autoStart)
        this.start(time2);
    }
    this._goToEnd = false;
    if (time2 < this._startTime) {
      return true;
    }
    if (this._onStartCallbackFired === false) {
      if (this._onStartCallback) {
        this._onStartCallback(this._object);
      }
      this._onStartCallbackFired = true;
    }
    elapsed = (time2 - this._startTime) / this._duration;
    elapsed = this._duration === 0 || elapsed > 1 ? 1 : elapsed;
    var value = this._easingFunction(elapsed);
    this._updateProperties(this._object, this._valuesStart, this._valuesEnd, value);
    if (this._onUpdateCallback) {
      this._onUpdateCallback(this._object, elapsed);
    }
    if (elapsed === 1) {
      if (this._repeat > 0) {
        if (isFinite(this._repeat)) {
          this._repeat--;
        }
        for (property in this._valuesStartRepeat) {
          if (!this._yoyo && typeof this._valuesEnd[property] === "string") {
            this._valuesStartRepeat[property] = this._valuesStartRepeat[property] + parseFloat(this._valuesEnd[property]);
          }
          if (this._yoyo) {
            this._swapEndStartRepeatValues(property);
          }
          this._valuesStart[property] = this._valuesStartRepeat[property];
        }
        if (this._yoyo) {
          this._reversed = !this._reversed;
        }
        if (this._repeatDelayTime !== void 0) {
          this._startTime = time2 + this._repeatDelayTime;
        } else {
          this._startTime = time2 + this._delayTime;
        }
        if (this._onRepeatCallback) {
          this._onRepeatCallback(this._object);
        }
        return true;
      } else {
        if (this._onCompleteCallback) {
          this._onCompleteCallback(this._object);
        }
        for (var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {
          this._chainedTweens[i].start(this._startTime + this._duration);
        }
        this._isPlaying = false;
        return false;
      }
    }
    return true;
  };
  Tween2.prototype._updateProperties = function(_object, _valuesStart, _valuesEnd, value) {
    for (var property in _valuesEnd) {
      if (_valuesStart[property] === void 0) {
        continue;
      }
      var start = _valuesStart[property] || 0;
      var end = _valuesEnd[property];
      var startIsArray = Array.isArray(_object[property]);
      var endIsArray = Array.isArray(end);
      var isInterpolationList = !startIsArray && endIsArray;
      if (isInterpolationList) {
        _object[property] = this._interpolationFunction(end, value);
      } else if (typeof end === "object" && end) {
        this._updateProperties(_object[property], start, end, value);
      } else {
        end = this._handleRelativeValue(start, end);
        if (typeof end === "number") {
          _object[property] = start + (end - start) * value;
        }
      }
    }
  };
  Tween2.prototype._handleRelativeValue = function(start, end) {
    if (typeof end !== "string") {
      return end;
    }
    if (end.charAt(0) === "+" || end.charAt(0) === "-") {
      return start + parseFloat(end);
    } else {
      return parseFloat(end);
    }
  };
  Tween2.prototype._swapEndStartRepeatValues = function(property) {
    var tmp = this._valuesStartRepeat[property];
    var endValue = this._valuesEnd[property];
    if (typeof endValue === "string") {
      this._valuesStartRepeat[property] = this._valuesStartRepeat[property] + parseFloat(endValue);
    } else {
      this._valuesStartRepeat[property] = this._valuesEnd[property];
    }
    this._valuesEnd[property] = tmp;
  };
  return Tween2;
}();
var VERSION = "18.6.4";
var nextId = Sequence.nextId;
var TWEEN = mainGroup;
var getAll = TWEEN.getAll.bind(TWEEN);
var removeAll = TWEEN.removeAll.bind(TWEEN);
var add = TWEEN.add.bind(TWEEN);
var remove = TWEEN.remove.bind(TWEEN);
var update = TWEEN.update.bind(TWEEN);
var exports = {
  Easing,
  Group: Group2,
  Interpolation,
  now: now$1,
  Sequence,
  nextId,
  Tween,
  VERSION,
  getAll,
  removeAll,
  add,
  remove,
  update
};
var tween_esm_default = exports;

// node_modules/three-geojson-geometry/dist/three-geojson-geometry.module.js
var import_earcut = __toModule(require_earcut());

// node_modules/d3-array/src/ascending.js
function ascending_default(a, b) {
  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

// node_modules/d3-array/src/bisector.js
function bisector_default(f) {
  let delta = f;
  let compare = f;
  if (f.length === 1) {
    delta = (d, x) => f(d) - x;
    compare = ascendingComparator(f);
  }
  function left(a, x, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a.length;
    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (compare(a[mid], x) < 0)
        lo = mid + 1;
      else
        hi = mid;
    }
    return lo;
  }
  function right(a, x, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a.length;
    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (compare(a[mid], x) > 0)
        hi = mid;
      else
        lo = mid + 1;
    }
    return lo;
  }
  function center(a, x, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a.length;
    const i = left(a, x, lo, hi - 1);
    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
  }
  return { left, center, right };
}
function ascendingComparator(f) {
  return (d, x) => ascending_default(f(d), x);
}

// node_modules/d3-array/src/number.js
function number_default(x) {
  return x === null ? NaN : +x;
}

// node_modules/d3-array/src/bisect.js
var ascendingBisect = bisector_default(ascending_default);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;
var bisectCenter = bisector_default(number_default).center;
var bisect_default = bisectRight;

// node_modules/d3-array/src/fsum.js
var Adder = class {
  constructor() {
    this._partials = new Float64Array(32);
    this._n = 0;
  }
  add(x) {
    const p = this._partials;
    let i = 0;
    for (let j = 0; j < this._n && j < 32; j++) {
      const y = p[j], hi = x + y, lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);
      if (lo)
        p[i++] = lo;
      x = hi;
    }
    p[i] = x;
    this._n = i + 1;
    return this;
  }
  valueOf() {
    const p = this._partials;
    let n = this._n, x, y, lo, hi = 0;
    if (n > 0) {
      hi = p[--n];
      while (n > 0) {
        x = hi;
        y = p[--n];
        hi = x + y;
        lo = y - (hi - x);
        if (lo)
          break;
      }
      if (n > 0 && (lo < 0 && p[n - 1] < 0 || lo > 0 && p[n - 1] > 0)) {
        y = lo * 2;
        x = hi + y;
        if (y == x - hi)
          hi = x;
      }
    }
    return hi;
  }
};

// node_modules/d3-array/src/array.js
var array = Array.prototype;
var slice = array.slice;
var map = array.map;

// node_modules/d3-array/src/ticks.js
var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);
function ticks_default(start, stop, count3) {
  var reverse3, i = -1, n, ticks, step;
  stop = +stop, start = +start, count3 = +count3;
  if (start === stop && count3 > 0)
    return [start];
  if (reverse3 = stop < start)
    n = start, start = stop, stop = n;
  if ((step = tickIncrement(start, stop, count3)) === 0 || !isFinite(step))
    return [];
  if (step > 0) {
    let r0 = Math.round(start / step), r1 = Math.round(stop / step);
    if (r0 * step < start)
      ++r0;
    if (r1 * step > stop)
      --r1;
    ticks = new Array(n = r1 - r0 + 1);
    while (++i < n)
      ticks[i] = (r0 + i) * step;
  } else {
    step = -step;
    let r0 = Math.round(start * step), r1 = Math.round(stop * step);
    if (r0 / step < start)
      ++r0;
    if (r1 / step > stop)
      --r1;
    ticks = new Array(n = r1 - r0 + 1);
    while (++i < n)
      ticks[i] = (r0 + i) / step;
  }
  if (reverse3)
    ticks.reverse();
  return ticks;
}
function tickIncrement(start, stop, count3) {
  var step = (stop - start) / Math.max(0, count3), power = Math.floor(Math.log(step) / Math.LN10), error = step / Math.pow(10, power);
  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}
function tickStep(start, stop, count3) {
  var step0 = Math.abs(stop - start) / Math.max(0, count3), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
  if (error >= e10)
    step1 *= 10;
  else if (error >= e5)
    step1 *= 5;
  else if (error >= e2)
    step1 *= 2;
  return stop < start ? -step1 : step1;
}

// node_modules/d3-array/src/mean.js
function mean(values, valueof) {
  let count3 = 0;
  let sum5 = 0;
  if (valueof === void 0) {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        ++count3, sum5 += value;
      }
    }
  } else {
    let index6 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index6, values)) != null && (value = +value) >= value) {
        ++count3, sum5 += value;
      }
    }
  }
  if (count3)
    return sum5 / count3;
}

// node_modules/d3-array/src/merge.js
function* flatten(arrays) {
  for (const array6 of arrays) {
    yield* array6;
  }
}
function merge(arrays) {
  return Array.from(flatten(arrays));
}

// node_modules/d3-array/src/range.js
function range_default(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
  var i = -1, n = Math.max(0, Math.ceil((stop - start) / step)) | 0, range2 = new Array(n);
  while (++i < n) {
    range2[i] = start + i * step;
  }
  return range2;
}

// node_modules/d3-array/src/shuffle.js
var shuffle_default = shuffler(Math.random);
function shuffler(random) {
  return function shuffle(array6, i0 = 0, i1 = array6.length) {
    let m = i1 - (i0 = +i0);
    while (m) {
      const i = random() * m-- | 0, t = array6[m + i0];
      array6[m + i0] = array6[i + i0];
      array6[i + i0] = t;
    }
    return array6;
  };
}

// node_modules/d3-geo/src/math.js
var epsilon = 1e-6;
var epsilon2 = 1e-12;
var pi = Math.PI;
var halfPi = pi / 2;
var quarterPi = pi / 4;
var tau = pi * 2;
var degrees = 180 / pi;
var radians = pi / 180;
var abs = Math.abs;
var atan = Math.atan;
var atan2 = Math.atan2;
var cos = Math.cos;
var ceil = Math.ceil;
var exp = Math.exp;
var log = Math.log;
var sin = Math.sin;
var sign = Math.sign || function(x) {
  return x > 0 ? 1 : x < 0 ? -1 : 0;
};
var sqrt = Math.sqrt;
var tan = Math.tan;
function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}
function asin(x) {
  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
}
function haversin(x) {
  return (x = sin(x / 2)) * x;
}

// node_modules/d3-geo/src/noop.js
function noop() {
}

// node_modules/d3-geo/src/stream.js
function streamGeometry(geometry, stream) {
  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
    streamGeometryType[geometry.type](geometry, stream);
  }
}
var streamObjectType = {
  Feature: function(object3, stream) {
    streamGeometry(object3.geometry, stream);
  },
  FeatureCollection: function(object3, stream) {
    var features = object3.features, i = -1, n = features.length;
    while (++i < n)
      streamGeometry(features[i].geometry, stream);
  }
};
var streamGeometryType = {
  Sphere: function(object3, stream) {
    stream.sphere();
  },
  Point: function(object3, stream) {
    object3 = object3.coordinates;
    stream.point(object3[0], object3[1], object3[2]);
  },
  MultiPoint: function(object3, stream) {
    var coordinates3 = object3.coordinates, i = -1, n = coordinates3.length;
    while (++i < n)
      object3 = coordinates3[i], stream.point(object3[0], object3[1], object3[2]);
  },
  LineString: function(object3, stream) {
    streamLine(object3.coordinates, stream, 0);
  },
  MultiLineString: function(object3, stream) {
    var coordinates3 = object3.coordinates, i = -1, n = coordinates3.length;
    while (++i < n)
      streamLine(coordinates3[i], stream, 0);
  },
  Polygon: function(object3, stream) {
    streamPolygon(object3.coordinates, stream);
  },
  MultiPolygon: function(object3, stream) {
    var coordinates3 = object3.coordinates, i = -1, n = coordinates3.length;
    while (++i < n)
      streamPolygon(coordinates3[i], stream);
  },
  GeometryCollection: function(object3, stream) {
    var geometries = object3.geometries, i = -1, n = geometries.length;
    while (++i < n)
      streamGeometry(geometries[i], stream);
  }
};
function streamLine(coordinates3, stream, closed) {
  var i = -1, n = coordinates3.length - closed, coordinate;
  stream.lineStart();
  while (++i < n)
    coordinate = coordinates3[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
  stream.lineEnd();
}
function streamPolygon(coordinates3, stream) {
  var i = -1, n = coordinates3.length;
  stream.polygonStart();
  while (++i < n)
    streamLine(coordinates3[i], stream, 1);
  stream.polygonEnd();
}
function stream_default(object3, stream) {
  if (object3 && streamObjectType.hasOwnProperty(object3.type)) {
    streamObjectType[object3.type](object3, stream);
  } else {
    streamGeometry(object3, stream);
  }
}

// node_modules/d3-geo/src/area.js
var areaRingSum = new Adder();
var areaSum = new Adder();
var lambda00;
var phi00;
var lambda0;
var cosPhi0;
var sinPhi0;
var areaStream = {
  point: noop,
  lineStart: noop,
  lineEnd: noop,
  polygonStart: function() {
    areaRingSum = new Adder();
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function() {
    var areaRing = +areaRingSum;
    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);
    this.lineStart = this.lineEnd = this.point = noop;
  },
  sphere: function() {
    areaSum.add(tau);
  }
};
function areaRingStart() {
  areaStream.point = areaPointFirst;
}
function areaRingEnd() {
  areaPoint(lambda00, phi00);
}
function areaPointFirst(lambda, phi) {
  areaStream.point = areaPoint;
  lambda00 = lambda, phi00 = phi;
  lambda *= radians, phi *= radians;
  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);
}
function areaPoint(lambda, phi) {
  lambda *= radians, phi *= radians;
  phi = phi / 2 + quarterPi;
  var dLambda = lambda - lambda0, sdLambda = dLambda >= 0 ? 1 : -1, adLambda = sdLambda * dLambda, cosPhi = cos(phi), sinPhi = sin(phi), k = sinPhi0 * sinPhi, u4 = cosPhi0 * cosPhi + k * cos(adLambda), v2 = k * sdLambda * sin(adLambda);
  areaRingSum.add(atan2(v2, u4));
  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
}

// node_modules/d3-geo/src/cartesian.js
function spherical(cartesian4) {
  return [atan2(cartesian4[1], cartesian4[0]), asin(cartesian4[2])];
}
function cartesian(spherical4) {
  var lambda = spherical4[0], phi = spherical4[1], cosPhi = cos(phi);
  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];
}
function cartesianCross(a, b) {
  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
}
function cartesianNormalizeInPlace(d) {
  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
  d[0] /= l, d[1] /= l, d[2] /= l;
}

// node_modules/d3-geo/src/bounds.js
var lambda02;
var phi0;
var lambda1;
var phi1;
var lambda2;
var lambda002;
var phi002;
var p0;
var deltaSum;
var ranges;
var range;
var boundsStream = {
  point: boundsPoint,
  lineStart: boundsLineStart,
  lineEnd: boundsLineEnd,
  polygonStart: function() {
    boundsStream.point = boundsRingPoint;
    boundsStream.lineStart = boundsRingStart;
    boundsStream.lineEnd = boundsRingEnd;
    deltaSum = new Adder();
    areaStream.polygonStart();
  },
  polygonEnd: function() {
    areaStream.polygonEnd();
    boundsStream.point = boundsPoint;
    boundsStream.lineStart = boundsLineStart;
    boundsStream.lineEnd = boundsLineEnd;
    if (areaRingSum < 0)
      lambda02 = -(lambda1 = 180), phi0 = -(phi1 = 90);
    else if (deltaSum > epsilon)
      phi1 = 90;
    else if (deltaSum < -epsilon)
      phi0 = -90;
    range[0] = lambda02, range[1] = lambda1;
  },
  sphere: function() {
    lambda02 = -(lambda1 = 180), phi0 = -(phi1 = 90);
  }
};
function boundsPoint(lambda, phi) {
  ranges.push(range = [lambda02 = lambda, lambda1 = lambda]);
  if (phi < phi0)
    phi0 = phi;
  if (phi > phi1)
    phi1 = phi;
}
function linePoint(lambda, phi) {
  var p = cartesian([lambda * radians, phi * radians]);
  if (p0) {
    var normal = cartesianCross(p0, p), equatorial = [normal[1], -normal[0], 0], inflection = cartesianCross(equatorial, normal);
    cartesianNormalizeInPlace(inflection);
    inflection = spherical(inflection);
    var delta = lambda - lambda2, sign4 = delta > 0 ? 1 : -1, lambdai = inflection[0] * degrees * sign4, phii, antimeridian = abs(delta) > 180;
    if (antimeridian ^ (sign4 * lambda2 < lambdai && lambdai < sign4 * lambda)) {
      phii = inflection[1] * degrees;
      if (phii > phi1)
        phi1 = phii;
    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign4 * lambda2 < lambdai && lambdai < sign4 * lambda)) {
      phii = -inflection[1] * degrees;
      if (phii < phi0)
        phi0 = phii;
    } else {
      if (phi < phi0)
        phi0 = phi;
      if (phi > phi1)
        phi1 = phi;
    }
    if (antimeridian) {
      if (lambda < lambda2) {
        if (angle(lambda02, lambda) > angle(lambda02, lambda1))
          lambda1 = lambda;
      } else {
        if (angle(lambda, lambda1) > angle(lambda02, lambda1))
          lambda02 = lambda;
      }
    } else {
      if (lambda1 >= lambda02) {
        if (lambda < lambda02)
          lambda02 = lambda;
        if (lambda > lambda1)
          lambda1 = lambda;
      } else {
        if (lambda > lambda2) {
          if (angle(lambda02, lambda) > angle(lambda02, lambda1))
            lambda1 = lambda;
        } else {
          if (angle(lambda, lambda1) > angle(lambda02, lambda1))
            lambda02 = lambda;
        }
      }
    }
  } else {
    ranges.push(range = [lambda02 = lambda, lambda1 = lambda]);
  }
  if (phi < phi0)
    phi0 = phi;
  if (phi > phi1)
    phi1 = phi;
  p0 = p, lambda2 = lambda;
}
function boundsLineStart() {
  boundsStream.point = linePoint;
}
function boundsLineEnd() {
  range[0] = lambda02, range[1] = lambda1;
  boundsStream.point = boundsPoint;
  p0 = null;
}
function boundsRingPoint(lambda, phi) {
  if (p0) {
    var delta = lambda - lambda2;
    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
  } else {
    lambda002 = lambda, phi002 = phi;
  }
  areaStream.point(lambda, phi);
  linePoint(lambda, phi);
}
function boundsRingStart() {
  areaStream.lineStart();
}
function boundsRingEnd() {
  boundsRingPoint(lambda002, phi002);
  areaStream.lineEnd();
  if (abs(deltaSum) > epsilon)
    lambda02 = -(lambda1 = 180);
  range[0] = lambda02, range[1] = lambda1;
  p0 = null;
}
function angle(lambda05, lambda12) {
  return (lambda12 -= lambda05) < 0 ? lambda12 + 360 : lambda12;
}
function rangeCompare(a, b) {
  return a[0] - b[0];
}
function rangeContains(range2, x) {
  return range2[0] <= range2[1] ? range2[0] <= x && x <= range2[1] : x < range2[0] || range2[1] < x;
}
function bounds_default(feature) {
  var i, n, a, b, merged, deltaMax, delta;
  phi1 = lambda1 = -(lambda02 = phi0 = Infinity);
  ranges = [];
  stream_default(feature, boundsStream);
  if (n = ranges.length) {
    ranges.sort(rangeCompare);
    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
      b = ranges[i];
      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
        if (angle(a[0], b[1]) > angle(a[0], a[1]))
          a[1] = b[1];
        if (angle(b[0], a[1]) > angle(a[0], a[1]))
          a[0] = b[0];
      } else {
        merged.push(a = b);
      }
    }
    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
      b = merged[i];
      if ((delta = angle(a[1], b[0])) > deltaMax)
        deltaMax = delta, lambda02 = b[0], lambda1 = a[1];
    }
  }
  ranges = range = null;
  return lambda02 === Infinity || phi0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[lambda02, phi0], [lambda1, phi1]];
}

// node_modules/d3-geo/src/rotation.js
function rotationIdentity(lambda, phi) {
  return [abs(lambda) > pi ? lambda + Math.round(-lambda / tau) * tau : lambda, phi];
}
rotationIdentity.invert = rotationIdentity;

// node_modules/d3-geo/src/clip/buffer.js
function buffer_default() {
  var lines = [], line;
  return {
    point: function(x, y, m) {
      line.push([x, y, m]);
    },
    lineStart: function() {
      lines.push(line = []);
    },
    lineEnd: noop,
    rejoin: function() {
      if (lines.length > 1)
        lines.push(lines.pop().concat(lines.shift()));
    },
    result: function() {
      var result = lines;
      lines = [];
      line = null;
      return result;
    }
  };
}

// node_modules/d3-geo/src/pointEqual.js
function pointEqual_default(a, b) {
  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;
}

// node_modules/d3-geo/src/clip/rejoin.js
function Intersection(point3, points, other, entry) {
  this.x = point3;
  this.z = points;
  this.o = other;
  this.e = entry;
  this.v = false;
  this.n = this.p = null;
}
function rejoin_default(segments, compareIntersection3, startInside, interpolate, stream) {
  var subject = [], clip = [], i, n;
  segments.forEach(function(segment) {
    if ((n2 = segment.length - 1) <= 0)
      return;
    var n2, p02 = segment[0], p1 = segment[n2], x;
    if (pointEqual_default(p02, p1)) {
      if (!p02[2] && !p1[2]) {
        stream.lineStart();
        for (i = 0; i < n2; ++i)
          stream.point((p02 = segment[i])[0], p02[1]);
        stream.lineEnd();
        return;
      }
      p1[0] += 2 * epsilon;
    }
    subject.push(x = new Intersection(p02, segment, null, true));
    clip.push(x.o = new Intersection(p02, null, x, false));
    subject.push(x = new Intersection(p1, segment, null, false));
    clip.push(x.o = new Intersection(p1, null, x, true));
  });
  if (!subject.length)
    return;
  clip.sort(compareIntersection3);
  link(subject);
  link(clip);
  for (i = 0, n = clip.length; i < n; ++i) {
    clip[i].e = startInside = !startInside;
  }
  var start = subject[0], points, point3;
  while (1) {
    var current = start, isSubject = true;
    while (current.v)
      if ((current = current.n) === start)
        return;
    points = current.z;
    stream.lineStart();
    do {
      current.v = current.o.v = true;
      if (current.e) {
        if (isSubject) {
          for (i = 0, n = points.length; i < n; ++i)
            stream.point((point3 = points[i])[0], point3[1]);
        } else {
          interpolate(current.x, current.n.x, 1, stream);
        }
        current = current.n;
      } else {
        if (isSubject) {
          points = current.p.z;
          for (i = points.length - 1; i >= 0; --i)
            stream.point((point3 = points[i])[0], point3[1]);
        } else {
          interpolate(current.x, current.p.x, -1, stream);
        }
        current = current.p;
      }
      current = current.o;
      points = current.z;
      isSubject = !isSubject;
    } while (!current.v);
    stream.lineEnd();
  }
}
function link(array6) {
  if (!(n = array6.length))
    return;
  var n, i = 0, a = array6[0], b;
  while (++i < n) {
    a.n = b = array6[i];
    b.p = a;
    a = b;
  }
  a.n = b = array6[0];
  b.p = a;
}

// node_modules/d3-geo/src/polygonContains.js
function longitude(point3) {
  return abs(point3[0]) <= pi ? point3[0] : sign(point3[0]) * ((abs(point3[0]) + pi) % tau - pi);
}
function polygonContains_default(polygon, point3) {
  var lambda = longitude(point3), phi = point3[1], sinPhi = sin(phi), normal = [sin(lambda), -cos(lambda), 0], angle2 = 0, winding = 0;
  var sum5 = new Adder();
  if (sinPhi === 1)
    phi = halfPi + epsilon;
  else if (sinPhi === -1)
    phi = -halfPi - epsilon;
  for (var i = 0, n = polygon.length; i < n; ++i) {
    if (!(m = (ring = polygon[i]).length))
      continue;
    var ring, m, point0 = ring[m - 1], lambda05 = longitude(point0), phi02 = point0[1] / 2 + quarterPi, sinPhi04 = sin(phi02), cosPhi04 = cos(phi02);
    for (var j = 0; j < m; ++j, lambda05 = lambda12, sinPhi04 = sinPhi1, cosPhi04 = cosPhi1, point0 = point1) {
      var point1 = ring[j], lambda12 = longitude(point1), phi12 = point1[1] / 2 + quarterPi, sinPhi1 = sin(phi12), cosPhi1 = cos(phi12), delta = lambda12 - lambda05, sign4 = delta >= 0 ? 1 : -1, absDelta = sign4 * delta, antimeridian = absDelta > pi, k = sinPhi04 * sinPhi1;
      sum5.add(atan2(k * sign4 * sin(absDelta), cosPhi04 * cosPhi1 + k * cos(absDelta)));
      angle2 += antimeridian ? delta + sign4 * tau : delta;
      if (antimeridian ^ lambda05 >= lambda ^ lambda12 >= lambda) {
        var arc = cartesianCross(cartesian(point0), cartesian(point1));
        cartesianNormalizeInPlace(arc);
        var intersection3 = cartesianCross(normal, arc);
        cartesianNormalizeInPlace(intersection3);
        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection3[2]);
        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
          winding += antimeridian ^ delta >= 0 ? 1 : -1;
        }
      }
    }
  }
  return (angle2 < -epsilon || angle2 < epsilon && sum5 < -epsilon2) ^ winding & 1;
}

// node_modules/d3-geo/src/clip/index.js
function clip_default(pointVisible, clipLine, interpolate, start) {
  return function(sink) {
    var line = clipLine(sink), ringBuffer = buffer_default(), ringSink = clipLine(ringBuffer), polygonStarted = false, polygon, segments, ring;
    var clip = {
      point: point3,
      lineStart,
      lineEnd,
      polygonStart: function() {
        clip.point = pointRing;
        clip.lineStart = ringStart;
        clip.lineEnd = ringEnd;
        segments = [];
        polygon = [];
      },
      polygonEnd: function() {
        clip.point = point3;
        clip.lineStart = lineStart;
        clip.lineEnd = lineEnd;
        segments = merge(segments);
        var startInside = polygonContains_default(polygon, start);
        if (segments.length) {
          if (!polygonStarted)
            sink.polygonStart(), polygonStarted = true;
          rejoin_default(segments, compareIntersection, startInside, interpolate, sink);
        } else if (startInside) {
          if (!polygonStarted)
            sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
        }
        if (polygonStarted)
          sink.polygonEnd(), polygonStarted = false;
        segments = polygon = null;
      },
      sphere: function() {
        sink.polygonStart();
        sink.lineStart();
        interpolate(null, null, 1, sink);
        sink.lineEnd();
        sink.polygonEnd();
      }
    };
    function point3(lambda, phi) {
      if (pointVisible(lambda, phi))
        sink.point(lambda, phi);
    }
    function pointLine(lambda, phi) {
      line.point(lambda, phi);
    }
    function lineStart() {
      clip.point = pointLine;
      line.lineStart();
    }
    function lineEnd() {
      clip.point = point3;
      line.lineEnd();
    }
    function pointRing(lambda, phi) {
      ring.push([lambda, phi]);
      ringSink.point(lambda, phi);
    }
    function ringStart() {
      ringSink.lineStart();
      ring = [];
    }
    function ringEnd() {
      pointRing(ring[0][0], ring[0][1]);
      ringSink.lineEnd();
      var clean = ringSink.clean(), ringSegments = ringBuffer.result(), i, n = ringSegments.length, m, segment, point4;
      ring.pop();
      polygon.push(ring);
      ring = null;
      if (!n)
        return;
      if (clean & 1) {
        segment = ringSegments[0];
        if ((m = segment.length - 1) > 0) {
          if (!polygonStarted)
            sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          for (i = 0; i < m; ++i)
            sink.point((point4 = segment[i])[0], point4[1]);
          sink.lineEnd();
        }
        return;
      }
      if (n > 1 && clean & 2)
        ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
      segments.push(ringSegments.filter(validSegment));
    }
    return clip;
  };
}
function validSegment(segment) {
  return segment.length > 1;
}
function compareIntersection(a, b) {
  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);
}

// node_modules/d3-geo/src/clip/antimeridian.js
var antimeridian_default = clip_default(function() {
  return true;
}, clipAntimeridianLine, clipAntimeridianInterpolate, [-pi, -halfPi]);
function clipAntimeridianLine(stream) {
  var lambda05 = NaN, phi02 = NaN, sign0 = NaN, clean;
  return {
    lineStart: function() {
      stream.lineStart();
      clean = 1;
    },
    point: function(lambda12, phi12) {
      var sign1 = lambda12 > 0 ? pi : -pi, delta = abs(lambda12 - lambda05);
      if (abs(delta - pi) < epsilon) {
        stream.point(lambda05, phi02 = (phi02 + phi12) / 2 > 0 ? halfPi : -halfPi);
        stream.point(sign0, phi02);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi02);
        stream.point(lambda12, phi02);
        clean = 0;
      } else if (sign0 !== sign1 && delta >= pi) {
        if (abs(lambda05 - sign0) < epsilon)
          lambda05 -= sign0 * epsilon;
        if (abs(lambda12 - sign1) < epsilon)
          lambda12 -= sign1 * epsilon;
        phi02 = clipAntimeridianIntersect(lambda05, phi02, lambda12, phi12);
        stream.point(sign0, phi02);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi02);
        clean = 0;
      }
      stream.point(lambda05 = lambda12, phi02 = phi12);
      sign0 = sign1;
    },
    lineEnd: function() {
      stream.lineEnd();
      lambda05 = phi02 = NaN;
    },
    clean: function() {
      return 2 - clean;
    }
  };
}
function clipAntimeridianIntersect(lambda05, phi02, lambda12, phi12) {
  var cosPhi04, cosPhi1, sinLambda0Lambda1 = sin(lambda05 - lambda12);
  return abs(sinLambda0Lambda1) > epsilon ? atan((sin(phi02) * (cosPhi1 = cos(phi12)) * sin(lambda12) - sin(phi12) * (cosPhi04 = cos(phi02)) * sin(lambda05)) / (cosPhi04 * cosPhi1 * sinLambda0Lambda1)) : (phi02 + phi12) / 2;
}
function clipAntimeridianInterpolate(from, to, direction, stream) {
  var phi;
  if (from == null) {
    phi = direction * halfPi;
    stream.point(-pi, phi);
    stream.point(0, phi);
    stream.point(pi, phi);
    stream.point(pi, 0);
    stream.point(pi, -phi);
    stream.point(0, -phi);
    stream.point(-pi, -phi);
    stream.point(-pi, 0);
    stream.point(-pi, phi);
  } else if (abs(from[0] - to[0]) > epsilon) {
    var lambda = from[0] < to[0] ? pi : -pi;
    phi = direction * lambda / 2;
    stream.point(-lambda, phi);
    stream.point(0, phi);
    stream.point(lambda, phi);
  } else {
    stream.point(to[0], to[1]);
  }
}

// node_modules/d3-geo/src/clip/rectangle.js
var clipMax = 1e9;
var clipMin = -clipMax;

// node_modules/d3-geo/src/length.js
var lengthSum;
var lambda03;
var sinPhi02;
var cosPhi02;
var lengthStream = {
  sphere: noop,
  point: noop,
  lineStart: lengthLineStart,
  lineEnd: noop,
  polygonStart: noop,
  polygonEnd: noop
};
function lengthLineStart() {
  lengthStream.point = lengthPointFirst;
  lengthStream.lineEnd = lengthLineEnd;
}
function lengthLineEnd() {
  lengthStream.point = lengthStream.lineEnd = noop;
}
function lengthPointFirst(lambda, phi) {
  lambda *= radians, phi *= radians;
  lambda03 = lambda, sinPhi02 = sin(phi), cosPhi02 = cos(phi);
  lengthStream.point = lengthPoint;
}
function lengthPoint(lambda, phi) {
  lambda *= radians, phi *= radians;
  var sinPhi = sin(phi), cosPhi = cos(phi), delta = abs(lambda - lambda03), cosDelta = cos(delta), sinDelta = sin(delta), x = cosPhi * sinDelta, y = cosPhi02 * sinPhi - sinPhi02 * cosPhi * cosDelta, z = sinPhi02 * sinPhi + cosPhi02 * cosPhi * cosDelta;
  lengthSum.add(atan2(sqrt(x * x + y * y), z));
  lambda03 = lambda, sinPhi02 = sinPhi, cosPhi02 = cosPhi;
}
function length_default(object3) {
  lengthSum = new Adder();
  stream_default(object3, lengthStream);
  return +lengthSum;
}

// node_modules/d3-geo/src/distance.js
var coordinates = [null, null];
var object = { type: "LineString", coordinates };
function distance_default(a, b) {
  coordinates[0] = a;
  coordinates[1] = b;
  return length_default(object);
}

// node_modules/d3-geo/src/contains.js
var containsObjectType = {
  Feature: function(object3, point3) {
    return containsGeometry(object3.geometry, point3);
  },
  FeatureCollection: function(object3, point3) {
    var features = object3.features, i = -1, n = features.length;
    while (++i < n)
      if (containsGeometry(features[i].geometry, point3))
        return true;
    return false;
  }
};
var containsGeometryType = {
  Sphere: function() {
    return true;
  },
  Point: function(object3, point3) {
    return containsPoint(object3.coordinates, point3);
  },
  MultiPoint: function(object3, point3) {
    var coordinates3 = object3.coordinates, i = -1, n = coordinates3.length;
    while (++i < n)
      if (containsPoint(coordinates3[i], point3))
        return true;
    return false;
  },
  LineString: function(object3, point3) {
    return containsLine(object3.coordinates, point3);
  },
  MultiLineString: function(object3, point3) {
    var coordinates3 = object3.coordinates, i = -1, n = coordinates3.length;
    while (++i < n)
      if (containsLine(coordinates3[i], point3))
        return true;
    return false;
  },
  Polygon: function(object3, point3) {
    return containsPolygon(object3.coordinates, point3);
  },
  MultiPolygon: function(object3, point3) {
    var coordinates3 = object3.coordinates, i = -1, n = coordinates3.length;
    while (++i < n)
      if (containsPolygon(coordinates3[i], point3))
        return true;
    return false;
  },
  GeometryCollection: function(object3, point3) {
    var geometries = object3.geometries, i = -1, n = geometries.length;
    while (++i < n)
      if (containsGeometry(geometries[i], point3))
        return true;
    return false;
  }
};
function containsGeometry(geometry, point3) {
  return geometry && containsGeometryType.hasOwnProperty(geometry.type) ? containsGeometryType[geometry.type](geometry, point3) : false;
}
function containsPoint(coordinates3, point3) {
  return distance_default(coordinates3, point3) === 0;
}
function containsLine(coordinates3, point3) {
  var ao, bo, ab4;
  for (var i = 0, n = coordinates3.length; i < n; i++) {
    bo = distance_default(coordinates3[i], point3);
    if (bo === 0)
      return true;
    if (i > 0) {
      ab4 = distance_default(coordinates3[i], coordinates3[i - 1]);
      if (ab4 > 0 && ao <= ab4 && bo <= ab4 && (ao + bo - ab4) * (1 - Math.pow((ao - bo) / ab4, 2)) < epsilon2 * ab4)
        return true;
    }
    ao = bo;
  }
  return false;
}
function containsPolygon(coordinates3, point3) {
  return !!polygonContains_default(coordinates3.map(ringRadians), pointRadians(point3));
}
function ringRadians(ring) {
  return ring = ring.map(pointRadians), ring.pop(), ring;
}
function pointRadians(point3) {
  return [point3[0] * radians, point3[1] * radians];
}
function contains_default(object3, point3) {
  return (object3 && containsObjectType.hasOwnProperty(object3.type) ? containsObjectType[object3.type] : containsGeometry)(object3, point3);
}

// node_modules/d3-geo/src/graticule.js
function graticuleX(y03, y12, dy) {
  var y = range_default(y03, y12 - epsilon, dy).concat(y12);
  return function(x) {
    return y.map(function(y2) {
      return [x, y2];
    });
  };
}
function graticuleY(x04, x13, dx) {
  var x = range_default(x04, x13 - epsilon, dx).concat(x13);
  return function(y) {
    return x.map(function(x2) {
      return [x2, y];
    });
  };
}
function graticule() {
  var x13, x04, X12, X02, y12, y03, Y12, Y02, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
  function graticule3() {
    return { type: "MultiLineString", coordinates: lines() };
  }
  function lines() {
    return range_default(ceil(X02 / DX) * DX, X12, DX).map(X).concat(range_default(ceil(Y02 / DY) * DY, Y12, DY).map(Y)).concat(range_default(ceil(x04 / dx) * dx, x13, dx).filter(function(x2) {
      return abs(x2 % DX) > epsilon;
    }).map(x)).concat(range_default(ceil(y03 / dy) * dy, y12, dy).filter(function(y2) {
      return abs(y2 % DY) > epsilon;
    }).map(y));
  }
  graticule3.lines = function() {
    return lines().map(function(coordinates3) {
      return { type: "LineString", coordinates: coordinates3 };
    });
  };
  graticule3.outline = function() {
    return {
      type: "Polygon",
      coordinates: [
        X(X02).concat(Y(Y12).slice(1), X(X12).reverse().slice(1), Y(Y02).reverse().slice(1))
      ]
    };
  };
  graticule3.extent = function(_) {
    if (!arguments.length)
      return graticule3.extentMinor();
    return graticule3.extentMajor(_).extentMinor(_);
  };
  graticule3.extentMajor = function(_) {
    if (!arguments.length)
      return [[X02, Y02], [X12, Y12]];
    X02 = +_[0][0], X12 = +_[1][0];
    Y02 = +_[0][1], Y12 = +_[1][1];
    if (X02 > X12)
      _ = X02, X02 = X12, X12 = _;
    if (Y02 > Y12)
      _ = Y02, Y02 = Y12, Y12 = _;
    return graticule3.precision(precision);
  };
  graticule3.extentMinor = function(_) {
    if (!arguments.length)
      return [[x04, y03], [x13, y12]];
    x04 = +_[0][0], x13 = +_[1][0];
    y03 = +_[0][1], y12 = +_[1][1];
    if (x04 > x13)
      _ = x04, x04 = x13, x13 = _;
    if (y03 > y12)
      _ = y03, y03 = y12, y12 = _;
    return graticule3.precision(precision);
  };
  graticule3.step = function(_) {
    if (!arguments.length)
      return graticule3.stepMinor();
    return graticule3.stepMajor(_).stepMinor(_);
  };
  graticule3.stepMajor = function(_) {
    if (!arguments.length)
      return [DX, DY];
    DX = +_[0], DY = +_[1];
    return graticule3;
  };
  graticule3.stepMinor = function(_) {
    if (!arguments.length)
      return [dx, dy];
    dx = +_[0], dy = +_[1];
    return graticule3;
  };
  graticule3.precision = function(_) {
    if (!arguments.length)
      return precision;
    precision = +_;
    x = graticuleX(y03, y12, 90);
    y = graticuleY(x04, x13, precision);
    X = graticuleX(Y02, Y12, 90);
    Y = graticuleY(X02, X12, precision);
    return graticule3;
  };
  return graticule3.extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]]).extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);
}
function graticule10() {
  return graticule()();
}

// node_modules/d3-geo/src/interpolate.js
function interpolate_default(a, b) {
  var x04 = a[0] * radians, y03 = a[1] * radians, x13 = b[0] * radians, y12 = b[1] * radians, cy0 = cos(y03), sy0 = sin(y03), cy1 = cos(y12), sy1 = sin(y12), kx0 = cy0 * cos(x04), ky0 = cy0 * sin(x04), kx1 = cy1 * cos(x13), ky1 = cy1 * sin(x13), d = 2 * asin(sqrt(haversin(y12 - y03) + cy0 * cy1 * haversin(x13 - x04))), k = sin(d);
  var interpolate = d ? function(t) {
    var B4 = sin(t *= d) / k, A6 = sin(d - t) / k, x = A6 * kx0 + B4 * kx1, y = A6 * ky0 + B4 * ky1, z = A6 * sy0 + B4 * sy1;
    return [
      atan2(y, x) * degrees,
      atan2(z, sqrt(x * x + y * y)) * degrees
    ];
  } : function() {
    return [x04 * degrees, y03 * degrees];
  };
  interpolate.distance = d;
  return interpolate;
}

// node_modules/d3-geo/src/path/area.js
var areaSum2 = new Adder();
var areaRingSum2 = new Adder();

// node_modules/d3-geo/src/path/bounds.js
var x0 = Infinity;
var x1 = -x0;

// node_modules/d3-geo/src/path/context.js
function PathContext(context) {
  this._context = context;
}
PathContext.prototype = {
  _radius: 4.5,
  pointRadius: function(_) {
    return this._radius = _, this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0)
      this._context.closePath();
    this._point = NaN;
  },
  point: function(x, y) {
    switch (this._point) {
      case 0: {
        this._context.moveTo(x, y);
        this._point = 1;
        break;
      }
      case 1: {
        this._context.lineTo(x, y);
        break;
      }
      default: {
        this._context.moveTo(x + this._radius, y);
        this._context.arc(x, y, this._radius, 0, tau);
        break;
      }
    }
  },
  result: noop
};

// node_modules/d3-geo/src/path/measure.js
var lengthSum2 = new Adder();

// node_modules/d3-geo/src/path/string.js
function PathString() {
  this._string = [];
}
PathString.prototype = {
  _radius: 4.5,
  _circle: circle(4.5),
  pointRadius: function(_) {
    if ((_ = +_) !== this._radius)
      this._radius = _, this._circle = null;
    return this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0)
      this._string.push("Z");
    this._point = NaN;
  },
  point: function(x, y) {
    switch (this._point) {
      case 0: {
        this._string.push("M", x, ",", y);
        this._point = 1;
        break;
      }
      case 1: {
        this._string.push("L", x, ",", y);
        break;
      }
      default: {
        if (this._circle == null)
          this._circle = circle(this._radius);
        this._string.push("M", x, ",", y, this._circle);
        break;
      }
    }
  },
  result: function() {
    if (this._string.length) {
      var result = this._string.join("");
      this._string = [];
      return result;
    } else {
      return null;
    }
  }
};
function circle(radius) {
  return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
}

// node_modules/d3-geo/src/transform.js
function transformer(methods) {
  return function(stream) {
    var s = new TransformStream();
    for (var key in methods)
      s[key] = methods[key];
    s.stream = stream;
    return s;
  };
}
function TransformStream() {
}
TransformStream.prototype = {
  constructor: TransformStream,
  point: function(x, y) {
    this.stream.point(x, y);
  },
  sphere: function() {
    this.stream.sphere();
  },
  lineStart: function() {
    this.stream.lineStart();
  },
  lineEnd: function() {
    this.stream.lineEnd();
  },
  polygonStart: function() {
    this.stream.polygonStart();
  },
  polygonEnd: function() {
    this.stream.polygonEnd();
  }
};

// node_modules/d3-geo/src/projection/resample.js
var cosMinDistance = cos(30 * radians);

// node_modules/d3-geo/src/projection/index.js
var transformRadians = transformer({
  point: function(x, y) {
    this.stream.point(x * radians, y * radians);
  }
});

// node_modules/d3-geo/src/projection/azimuthal.js
function azimuthalRaw(scale2) {
  return function(x, y) {
    var cx = cos(x), cy = cos(y), k = scale2(cx * cy);
    if (k === Infinity)
      return [2, 0];
    return [
      k * cy * sin(x),
      k * sin(y)
    ];
  };
}
function azimuthalInvert(angle2) {
  return function(x, y) {
    var z = sqrt(x * x + y * y), c = angle2(z), sc = sin(c), cc2 = cos(c);
    return [
      atan2(x * sc, z * cc2),
      asin(z && y * sc / z)
    ];
  };
}

// node_modules/d3-geo/src/projection/azimuthalEqualArea.js
var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
  return sqrt(2 / (1 + cxcy));
});
azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {
  return 2 * asin(z / 2);
});

// node_modules/d3-geo/src/projection/azimuthalEquidistant.js
var azimuthalEquidistantRaw = azimuthalRaw(function(c) {
  return (c = acos(c)) && c / sin(c);
});
azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {
  return z;
});

// node_modules/d3-geo/src/projection/mercator.js
function mercatorRaw(lambda, phi) {
  return [lambda, log(tan((halfPi + phi) / 2))];
}
mercatorRaw.invert = function(x, y) {
  return [x, 2 * atan(exp(y)) - halfPi];
};

// node_modules/d3-geo/src/projection/equirectangular.js
function equirectangularRaw(lambda, phi) {
  return [lambda, phi];
}
equirectangularRaw.invert = equirectangularRaw;

// node_modules/d3-geo/src/projection/equalEarth.js
var A1 = 1.340264;
var A2 = -0.081106;
var A3 = 893e-6;
var A4 = 3796e-6;
var M = sqrt(3) / 2;
var iterations = 12;
function equalEarthRaw(lambda, phi) {
  var l = asin(M * sin(phi)), l2 = l * l, l6 = l2 * l2 * l2;
  return [
    lambda * cos(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),
    l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))
  ];
}
equalEarthRaw.invert = function(x, y) {
  var l = y, l2 = l * l, l6 = l2 * l2 * l2;
  for (var i = 0, delta, fy, fpy; i < iterations; ++i) {
    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;
    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);
    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;
    if (abs(delta) < epsilon2)
      break;
  }
  return [
    M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos(l),
    asin(sin(l) / M)
  ];
};

// node_modules/d3-geo/src/projection/gnomonic.js
function gnomonicRaw(x, y) {
  var cy = cos(y), k = cos(x) * cy;
  return [cy * sin(x) / k, sin(y) / k];
}
gnomonicRaw.invert = azimuthalInvert(atan);

// node_modules/d3-geo/src/projection/naturalEarth1.js
function naturalEarth1Raw(lambda, phi) {
  var phi2 = phi * phi, phi4 = phi2 * phi2;
  return [
    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (3971e-6 * phi2 - 1529e-6 * phi4))),
    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 5916e-6 * phi4)))
  ];
}
naturalEarth1Raw.invert = function(x, y) {
  var phi = y, i = 25, delta;
  do {
    var phi2 = phi * phi, phi4 = phi2 * phi2;
    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 5916e-6 * phi4))) - y) / (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 5916e-6 * 11 * phi4)));
  } while (abs(delta) > epsilon && --i > 0);
  return [
    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (3971e-6 - 1529e-6 * phi2)))),
    phi
  ];
};

// node_modules/d3-geo/src/projection/orthographic.js
function orthographicRaw(x, y) {
  return [cos(y) * sin(x), sin(y)];
}
orthographicRaw.invert = azimuthalInvert(asin);

// node_modules/d3-geo/src/projection/stereographic.js
function stereographicRaw(x, y) {
  var cy = cos(y), k = 1 + cos(x) * cy;
  return [cy * sin(x) / k, sin(y) / k];
}
stereographicRaw.invert = azimuthalInvert(function(z) {
  return 2 * atan(z);
});

// node_modules/d3-geo/src/projection/transverseMercator.js
function transverseMercatorRaw(lambda, phi) {
  return [log(tan((halfPi + phi) / 2)), -lambda];
}
transverseMercatorRaw.invert = function(x, y) {
  return [-y, 2 * atan(exp(x)) - halfPi];
};

// node_modules/three-geojson-geometry/dist/three-geojson-geometry.module.js
function _classCallCheck2(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf4(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf4(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _possibleConstructorReturn(self2, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized(self2);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _slicedToArray2(arr, i) {
  return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i) || _unsupportedIterableToArray2(arr, i) || _nonIterableRest2();
}
function _arrayWithHoles2(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit2(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _unsupportedIterableToArray2(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray2(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray2(o, minLen);
}
function _arrayLikeToArray2(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableRest2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray2(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i = 0;
      var F = function() {
      };
      return {
        s: F,
        n: function() {
          if (i >= o.length)
            return {
              done: true
            };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function(e) {
          throw e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return {
    s: function() {
      it = it.call(o);
    },
    n: function() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function(e) {
      didErr = true;
      err = e;
    },
    f: function() {
      try {
        if (!normalCompletion && it.return != null)
          it.return();
      } finally {
        if (didErr)
          throw err;
      }
    }
  };
}
var interpolateLine = function interpolateLine2() {
  var lineCoords = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var maxDegDistance = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
  var result = [];
  var prevPnt = null;
  lineCoords.forEach(function(pnt) {
    if (prevPnt) {
      var dist3 = distance_default(pnt, prevPnt) * 180 / Math.PI;
      if (dist3 > maxDegDistance) {
        var interpol = interpolate_default(prevPnt, pnt);
        var tStep = 1 / Math.ceil(dist3 / maxDegDistance);
        var t = tStep;
        while (t < 1) {
          result.push(interpol(t));
          t += tStep;
        }
      }
    }
    result.push(prevPnt = pnt);
  });
  return result;
};
var THREE = typeof window !== "undefined" && window.THREE ? window.THREE : {
  BufferGeometry,
  Float32BufferAttribute
};
var setAttributeFn = new THREE.BufferGeometry().setAttribute ? "setAttribute" : "addAttribute";
var GeoJsonGeometry = function(_THREE$BufferGeometry) {
  _inherits(GeoJsonGeometry2, _THREE$BufferGeometry);
  var _super = _createSuper(GeoJsonGeometry2);
  function GeoJsonGeometry2(geoJson) {
    var _this;
    var radius = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    var resolution2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 5;
    _classCallCheck2(this, GeoJsonGeometry2);
    _this = _super.call(this);
    _this.type = "GeoJsonGeometry";
    _this.parameters = {
      geoJson,
      radius,
      resolution: resolution2
    };
    var groups3 = ({
      Point: genPoint,
      MultiPoint: genMultiPoint,
      LineString: genLineString,
      MultiLineString: genMultiLineString,
      Polygon: genPolygon,
      MultiPolygon: genMultiPolygon
    }[geoJson.type] || function() {
      return [];
    })(geoJson.coordinates, radius);
    var indices = [], vertices = [];
    var groupCnt = 0;
    groups3.forEach(function(newG) {
      var prevIndCnt = indices.length;
      concatGroup({
        indices,
        vertices
      }, newG);
      _this.addGroup(prevIndCnt, indices.length - prevIndCnt, groupCnt++);
    });
    indices.length && _this.setIndex(indices);
    vertices.length && _this[setAttributeFn]("position", new THREE.Float32BufferAttribute(vertices, 3));
    function genPoint(coords, r) {
      var vertices2 = polar2Cartesian(coords[1], coords[0], r);
      var indices2 = [];
      return [{
        vertices: vertices2,
        indices: indices2
      }];
    }
    function genMultiPoint(coords, r) {
      var result = {
        vertices: [],
        indices: []
      };
      coords.map(function(c) {
        return genPoint(c, r);
      }).forEach(function(_ref) {
        var _ref2 = _slicedToArray2(_ref, 1), newPnt = _ref2[0];
        concatGroup(result, newPnt);
      });
      return [result];
    }
    function genLineString(coords, r) {
      var coords3d = interpolateLine(coords, resolution2).map(function(_ref3) {
        var _ref4 = _slicedToArray2(_ref3, 2), lng = _ref4[0], lat = _ref4[1];
        return polar2Cartesian(lat, lng, r);
      });
      var _earcut$flatten = import_earcut.default.flatten([coords3d]), vertices2 = _earcut$flatten.vertices;
      var numPoints = Math.round(vertices2.length / 3);
      var indices2 = [];
      for (var vIdx = 1; vIdx < numPoints; vIdx++) {
        indices2.push(vIdx - 1, vIdx);
      }
      return [{
        vertices: vertices2,
        indices: indices2
      }];
    }
    function genMultiLineString(coords, r) {
      var result = {
        vertices: [],
        indices: []
      };
      coords.map(function(c) {
        return genLineString(c, r);
      }).forEach(function(_ref5) {
        var _ref6 = _slicedToArray2(_ref5, 1), newLine = _ref6[0];
        concatGroup(result, newLine);
      });
      return [result];
    }
    function genPolygon(coords, r) {
      var coords3d = coords.map(function(coordsSegment) {
        return interpolateLine(coordsSegment, resolution2).map(function(_ref7) {
          var _ref8 = _slicedToArray2(_ref7, 2), lng = _ref8[0], lat = _ref8[1];
          return polar2Cartesian(lat, lng, r);
        });
      });
      var _earcut$flatten2 = import_earcut.default.flatten(coords3d), vertices2 = _earcut$flatten2.vertices, holes = _earcut$flatten2.holes;
      var firstHoleIdx = holes[0] || Infinity;
      var outerVertices = vertices2.slice(0, firstHoleIdx);
      var holeVertices = vertices2.slice(firstHoleIdx);
      var holesIdx = new Set(holes);
      var numPoints = Math.round(vertices2.length / 3);
      var outerIndices = [], holeIndices = [];
      for (var vIdx = 1; vIdx < numPoints; vIdx++) {
        if (!holesIdx.has(vIdx)) {
          if (vIdx < firstHoleIdx) {
            outerIndices.push(vIdx - 1, vIdx);
          } else {
            holeIndices.push(vIdx - 1 - firstHoleIdx, vIdx - firstHoleIdx);
          }
        }
      }
      var groups4 = [{
        indices: outerIndices,
        vertices: outerVertices
      }];
      if (holes.length) {
        groups4.push({
          indices: holeIndices,
          vertices: holeVertices
        });
      }
      return groups4;
    }
    function genMultiPolygon(coords, r) {
      var outer = {
        vertices: [],
        indices: []
      };
      var holes = {
        vertices: [],
        indices: []
      };
      coords.map(function(c) {
        return genPolygon(c, r);
      }).forEach(function(_ref9) {
        var _ref10 = _slicedToArray2(_ref9, 2), newOuter = _ref10[0], newHoles = _ref10[1];
        concatGroup(outer, newOuter);
        newHoles && concatGroup(holes, newHoles);
      });
      var groups4 = [outer];
      holes.vertices.length && groups4.push(holes);
      return groups4;
    }
    return _this;
  }
  return GeoJsonGeometry2;
}(THREE.BufferGeometry);
function concatGroup(main, extra) {
  var prevVertCnt = Math.round(main.vertices.length / 3);
  concatArr(main.vertices, extra.vertices);
  concatArr(main.indices, extra.indices.map(function(ind) {
    return ind + prevVertCnt;
  }));
}
function concatArr(target, src) {
  var _iterator = _createForOfIteratorHelper(src), _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var e = _step.value;
      target.push(e);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}
function polar2Cartesian(lat, lng) {
  var r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
  var phi = (90 - lat) * Math.PI / 180;
  var theta = (90 - lng) * Math.PI / 180;
  return [
    r * Math.sin(phi) * Math.cos(theta),
    r * Math.cos(phi),
    r * Math.sin(phi) * Math.sin(theta)
  ];
}

// node_modules/three/examples/jsm/utils/BufferGeometryUtils.js
var BufferGeometryUtils = {
  computeTangents: function(geometry) {
    var index6 = geometry.index;
    var attributes = geometry.attributes;
    if (index6 === null || attributes.position === void 0 || attributes.normal === void 0 || attributes.uv === void 0) {
      console.error("THREE.BufferGeometryUtils: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
      return;
    }
    var indices = index6.array;
    var positions = attributes.position.array;
    var normals = attributes.normal.array;
    var uvs = attributes.uv.array;
    var nVertices = positions.length / 3;
    if (attributes.tangent === void 0) {
      geometry.setAttribute("tangent", new BufferAttribute(new Float32Array(4 * nVertices), 4));
    }
    var tangents = attributes.tangent.array;
    var tan1 = [], tan22 = [];
    for (var i = 0; i < nVertices; i++) {
      tan1[i] = new Vector3();
      tan22[i] = new Vector3();
    }
    var vA = new Vector3(), vB = new Vector3(), vC = new Vector3(), uvA = new Vector2(), uvB = new Vector2(), uvC = new Vector2(), sdir = new Vector3(), tdir = new Vector3();
    function handleTriangle(a, b, c) {
      vA.fromArray(positions, a * 3);
      vB.fromArray(positions, b * 3);
      vC.fromArray(positions, c * 3);
      uvA.fromArray(uvs, a * 2);
      uvB.fromArray(uvs, b * 2);
      uvC.fromArray(uvs, c * 2);
      vB.sub(vA);
      vC.sub(vA);
      uvB.sub(uvA);
      uvC.sub(uvA);
      var r = 1 / (uvB.x * uvC.y - uvC.x * uvB.y);
      if (!isFinite(r))
        return;
      sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);
      tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);
      tan1[a].add(sdir);
      tan1[b].add(sdir);
      tan1[c].add(sdir);
      tan22[a].add(tdir);
      tan22[b].add(tdir);
      tan22[c].add(tdir);
    }
    var groups3 = geometry.groups;
    if (groups3.length === 0) {
      groups3 = [{
        start: 0,
        count: indices.length
      }];
    }
    for (var i = 0, il = groups3.length; i < il; ++i) {
      var group3 = groups3[i];
      var start = group3.start;
      var count3 = group3.count;
      for (var j = start, jl = start + count3; j < jl; j += 3) {
        handleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);
      }
    }
    var tmp = new Vector3(), tmp2 = new Vector3();
    var n = new Vector3(), n2 = new Vector3();
    var w, t, test;
    function handleVertex(v2) {
      n.fromArray(normals, v2 * 3);
      n2.copy(n);
      t = tan1[v2];
      tmp.copy(t);
      tmp.sub(n.multiplyScalar(n.dot(t))).normalize();
      tmp2.crossVectors(n2, t);
      test = tmp2.dot(tan22[v2]);
      w = test < 0 ? -1 : 1;
      tangents[v2 * 4] = tmp.x;
      tangents[v2 * 4 + 1] = tmp.y;
      tangents[v2 * 4 + 2] = tmp.z;
      tangents[v2 * 4 + 3] = w;
    }
    for (var i = 0, il = groups3.length; i < il; ++i) {
      var group3 = groups3[i];
      var start = group3.start;
      var count3 = group3.count;
      for (var j = start, jl = start + count3; j < jl; j += 3) {
        handleVertex(indices[j + 0]);
        handleVertex(indices[j + 1]);
        handleVertex(indices[j + 2]);
      }
    }
  },
  mergeBufferGeometries: function(geometries, useGroups) {
    var isIndexed = geometries[0].index !== null;
    var attributesUsed = new Set(Object.keys(geometries[0].attributes));
    var morphAttributesUsed = new Set(Object.keys(geometries[0].morphAttributes));
    var attributes = {};
    var morphAttributes = {};
    var morphTargetsRelative = geometries[0].morphTargetsRelative;
    var mergedGeometry = new BufferGeometry();
    var offset = 0;
    for (var i = 0; i < geometries.length; ++i) {
      var geometry = geometries[i];
      var attributesCount = 0;
      if (isIndexed !== (geometry.index !== null)) {
        console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index " + i + ". All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.");
        return null;
      }
      for (var name in geometry.attributes) {
        if (!attributesUsed.has(name)) {
          console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index " + i + '. All geometries must have compatible attributes; make sure "' + name + '" attribute exists among all geometries, or in none of them.');
          return null;
        }
        if (attributes[name] === void 0)
          attributes[name] = [];
        attributes[name].push(geometry.attributes[name]);
        attributesCount++;
      }
      if (attributesCount !== attributesUsed.size) {
        console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index " + i + ". Make sure all geometries have the same number of attributes.");
        return null;
      }
      if (morphTargetsRelative !== geometry.morphTargetsRelative) {
        console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index " + i + ". .morphTargetsRelative must be consistent throughout all geometries.");
        return null;
      }
      for (var name in geometry.morphAttributes) {
        if (!morphAttributesUsed.has(name)) {
          console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index " + i + ".  .morphAttributes must be consistent throughout all geometries.");
          return null;
        }
        if (morphAttributes[name] === void 0)
          morphAttributes[name] = [];
        morphAttributes[name].push(geometry.morphAttributes[name]);
      }
      mergedGeometry.userData.mergedUserData = mergedGeometry.userData.mergedUserData || [];
      mergedGeometry.userData.mergedUserData.push(geometry.userData);
      if (useGroups) {
        var count3;
        if (isIndexed) {
          count3 = geometry.index.count;
        } else if (geometry.attributes.position !== void 0) {
          count3 = geometry.attributes.position.count;
        } else {
          console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index " + i + ". The geometry must have either an index or a position attribute");
          return null;
        }
        mergedGeometry.addGroup(offset, count3, i);
        offset += count3;
      }
    }
    if (isIndexed) {
      var indexOffset = 0;
      var mergedIndex = [];
      for (var i = 0; i < geometries.length; ++i) {
        var index6 = geometries[i].index;
        for (var j = 0; j < index6.count; ++j) {
          mergedIndex.push(index6.getX(j) + indexOffset);
        }
        indexOffset += geometries[i].attributes.position.count;
      }
      mergedGeometry.setIndex(mergedIndex);
    }
    for (var name in attributes) {
      var mergedAttribute = this.mergeBufferAttributes(attributes[name]);
      if (!mergedAttribute) {
        console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the " + name + " attribute.");
        return null;
      }
      mergedGeometry.setAttribute(name, mergedAttribute);
    }
    for (var name in morphAttributes) {
      var numMorphTargets = morphAttributes[name][0].length;
      if (numMorphTargets === 0)
        break;
      mergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};
      mergedGeometry.morphAttributes[name] = [];
      for (var i = 0; i < numMorphTargets; ++i) {
        var morphAttributesToMerge = [];
        for (var j = 0; j < morphAttributes[name].length; ++j) {
          morphAttributesToMerge.push(morphAttributes[name][j][i]);
        }
        var mergedMorphAttribute = this.mergeBufferAttributes(morphAttributesToMerge);
        if (!mergedMorphAttribute) {
          console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the " + name + " morphAttribute.");
          return null;
        }
        mergedGeometry.morphAttributes[name].push(mergedMorphAttribute);
      }
    }
    return mergedGeometry;
  },
  mergeBufferAttributes: function(attributes) {
    var TypedArray;
    var itemSize;
    var normalized;
    var arrayLength = 0;
    for (var i = 0; i < attributes.length; ++i) {
      var attribute = attributes[i];
      if (attribute.isInterleavedBufferAttribute) {
        console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. InterleavedBufferAttributes are not supported.");
        return null;
      }
      if (TypedArray === void 0)
        TypedArray = attribute.array.constructor;
      if (TypedArray !== attribute.array.constructor) {
        console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes.");
        return null;
      }
      if (itemSize === void 0)
        itemSize = attribute.itemSize;
      if (itemSize !== attribute.itemSize) {
        console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes.");
        return null;
      }
      if (normalized === void 0)
        normalized = attribute.normalized;
      if (normalized !== attribute.normalized) {
        console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes.");
        return null;
      }
      arrayLength += attribute.array.length;
    }
    var array6 = new TypedArray(arrayLength);
    var offset = 0;
    for (var i = 0; i < attributes.length; ++i) {
      array6.set(attributes[i].array, offset);
      offset += attributes[i].array.length;
    }
    return new BufferAttribute(array6, itemSize, normalized);
  },
  interleaveAttributes: function(attributes) {
    var TypedArray;
    var arrayLength = 0;
    var stride = 0;
    for (var i = 0, l = attributes.length; i < l; ++i) {
      var attribute = attributes[i];
      if (TypedArray === void 0)
        TypedArray = attribute.array.constructor;
      if (TypedArray !== attribute.array.constructor) {
        console.error("AttributeBuffers of different types cannot be interleaved");
        return null;
      }
      arrayLength += attribute.array.length;
      stride += attribute.itemSize;
    }
    var interleavedBuffer = new InterleavedBuffer(new TypedArray(arrayLength), stride);
    var offset = 0;
    var res = [];
    var getters = ["getX", "getY", "getZ", "getW"];
    var setters = ["setX", "setY", "setZ", "setW"];
    for (var j = 0, l = attributes.length; j < l; j++) {
      var attribute = attributes[j];
      var itemSize = attribute.itemSize;
      var count3 = attribute.count;
      var iba = new InterleavedBufferAttribute(interleavedBuffer, itemSize, offset, attribute.normalized);
      res.push(iba);
      offset += itemSize;
      for (var c = 0; c < count3; c++) {
        for (var k = 0; k < itemSize; k++) {
          iba[setters[k]](c, attribute[getters[k]](c));
        }
      }
    }
    return res;
  },
  estimateBytesUsed: function(geometry) {
    var mem = 0;
    for (var name in geometry.attributes) {
      var attr = geometry.getAttribute(name);
      mem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;
    }
    var indices = geometry.getIndex();
    mem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;
    return mem;
  },
  mergeVertices: function(geometry, tolerance = 1e-4) {
    tolerance = Math.max(tolerance, Number.EPSILON);
    var hashToIndex = {};
    var indices = geometry.getIndex();
    var positions = geometry.getAttribute("position");
    var vertexCount = indices ? indices.count : positions.count;
    var nextIndex = 0;
    var attributeNames = Object.keys(geometry.attributes);
    var attrArrays = {};
    var morphAttrsArrays = {};
    var newIndices = [];
    var getters = ["getX", "getY", "getZ", "getW"];
    for (var i = 0, l = attributeNames.length; i < l; i++) {
      var name = attributeNames[i];
      attrArrays[name] = [];
      var morphAttr = geometry.morphAttributes[name];
      if (morphAttr) {
        morphAttrsArrays[name] = new Array(morphAttr.length).fill().map(() => []);
      }
    }
    var decimalShift = Math.log10(1 / tolerance);
    var shiftMultiplier = Math.pow(10, decimalShift);
    for (var i = 0; i < vertexCount; i++) {
      var index6 = indices ? indices.getX(i) : i;
      var hash = "";
      for (var j = 0, l = attributeNames.length; j < l; j++) {
        var name = attributeNames[j];
        var attribute = geometry.getAttribute(name);
        var itemSize = attribute.itemSize;
        for (var k = 0; k < itemSize; k++) {
          hash += `${~~(attribute[getters[k]](index6) * shiftMultiplier)},`;
        }
      }
      if (hash in hashToIndex) {
        newIndices.push(hashToIndex[hash]);
      } else {
        for (var j = 0, l = attributeNames.length; j < l; j++) {
          var name = attributeNames[j];
          var attribute = geometry.getAttribute(name);
          var morphAttr = geometry.morphAttributes[name];
          var itemSize = attribute.itemSize;
          var newarray = attrArrays[name];
          var newMorphArrays = morphAttrsArrays[name];
          for (var k = 0; k < itemSize; k++) {
            var getterFunc = getters[k];
            newarray.push(attribute[getterFunc](index6));
            if (morphAttr) {
              for (var m = 0, ml = morphAttr.length; m < ml; m++) {
                newMorphArrays[m].push(morphAttr[m][getterFunc](index6));
              }
            }
          }
        }
        hashToIndex[hash] = nextIndex;
        newIndices.push(nextIndex);
        nextIndex++;
      }
    }
    const result = geometry.clone();
    for (var i = 0, l = attributeNames.length; i < l; i++) {
      var name = attributeNames[i];
      var oldAttribute = geometry.getAttribute(name);
      var buffer = new oldAttribute.array.constructor(attrArrays[name]);
      var attribute = new BufferAttribute(buffer, oldAttribute.itemSize, oldAttribute.normalized);
      result.setAttribute(name, attribute);
      if (name in morphAttrsArrays) {
        for (var j = 0; j < morphAttrsArrays[name].length; j++) {
          var oldMorphAttribute = geometry.morphAttributes[name][j];
          var buffer = new oldMorphAttribute.array.constructor(morphAttrsArrays[name][j]);
          var morphAttribute = new BufferAttribute(buffer, oldMorphAttribute.itemSize, oldMorphAttribute.normalized);
          result.morphAttributes[name][j] = morphAttribute;
        }
      }
    }
    result.setIndex(newIndices);
    return result;
  },
  toTrianglesDrawMode: function(geometry, drawMode) {
    if (drawMode === TrianglesDrawMode) {
      console.warn("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.");
      return geometry;
    }
    if (drawMode === TriangleFanDrawMode || drawMode === TriangleStripDrawMode) {
      var index6 = geometry.getIndex();
      if (index6 === null) {
        var indices = [];
        var position = geometry.getAttribute("position");
        if (position !== void 0) {
          for (var i = 0; i < position.count; i++) {
            indices.push(i);
          }
          geometry.setIndex(indices);
          index6 = geometry.getIndex();
        } else {
          console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.");
          return geometry;
        }
      }
      var numberOfTriangles = index6.count - 2;
      var newIndices = [];
      if (drawMode === TriangleFanDrawMode) {
        for (var i = 1; i <= numberOfTriangles; i++) {
          newIndices.push(index6.getX(0));
          newIndices.push(index6.getX(i));
          newIndices.push(index6.getX(i + 1));
        }
      } else {
        for (var i = 0; i < numberOfTriangles; i++) {
          if (i % 2 === 0) {
            newIndices.push(index6.getX(i));
            newIndices.push(index6.getX(i + 1));
            newIndices.push(index6.getX(i + 2));
          } else {
            newIndices.push(index6.getX(i + 2));
            newIndices.push(index6.getX(i + 1));
            newIndices.push(index6.getX(i));
          }
        }
      }
      if (newIndices.length / 3 !== numberOfTriangles) {
        console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");
      }
      var newGeometry = geometry.clone();
      newGeometry.setIndex(newIndices);
      newGeometry.clearGroups();
      return newGeometry;
    } else {
      console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:", drawMode);
      return geometry;
    }
  }
};

// node_modules/accessor-fn/dist/accessor-fn.module.js
var index3 = function(p) {
  return p instanceof Function ? p : typeof p === "string" ? function(obj) {
    return obj[p];
  } : function(obj) {
    return p;
  };
};
var accessor_fn_module_default = index3;

// node_modules/three-globe/dist/three-globe.module.js
var import_tinycolor2 = __toModule(require_tinycolor());

// node_modules/index-array-by/dist/index-array-by.module.js
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _slicedToArray3(arr, i) {
  return _arrayWithHoles3(arr) || _iterableToArrayLimit3(arr, i) || _unsupportedIterableToArray3(arr, i) || _nonIterableRest3();
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray3(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray3(arr);
}
function _arrayWithHoles3(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _iterableToArrayLimit3(arr, i) {
  var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _unsupportedIterableToArray3(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray3(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray3(o, minLen);
}
function _arrayLikeToArray3(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableRest3() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
var index4 = function() {
  var list = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var keyAccessors = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  var multiItem = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
  var flattenKeys = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  var keys = (keyAccessors instanceof Array ? keyAccessors.length ? keyAccessors : [void 0] : [keyAccessors]).map(function(key) {
    return {
      keyAccessor: key,
      isProp: !(key instanceof Function)
    };
  });
  var indexedResult = list.reduce(function(res, item) {
    var iterObj = res;
    var itemVal = item;
    keys.forEach(function(_ref, idx) {
      var keyAccessor = _ref.keyAccessor, isProp = _ref.isProp;
      var key;
      if (isProp) {
        var _itemVal = itemVal, propVal = _itemVal[keyAccessor], rest = _objectWithoutProperties(_itemVal, [keyAccessor].map(_toPropertyKey));
        key = propVal;
        itemVal = rest;
      } else {
        key = keyAccessor(itemVal, idx);
      }
      if (idx + 1 < keys.length) {
        if (!iterObj.hasOwnProperty(key)) {
          iterObj[key] = {};
        }
        iterObj = iterObj[key];
      } else {
        if (multiItem) {
          if (!iterObj.hasOwnProperty(key)) {
            iterObj[key] = [];
          }
          iterObj[key].push(itemVal);
        } else {
          iterObj[key] = itemVal;
        }
      }
    });
    return res;
  }, {});
  if (multiItem instanceof Function) {
    (function reduce3(node) {
      var level = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      if (level === keys.length) {
        Object.keys(node).forEach(function(k) {
          return node[k] = multiItem(node[k]);
        });
      } else {
        Object.values(node).forEach(function(child) {
          return reduce3(child, level + 1);
        });
      }
    })(indexedResult);
  }
  var result = indexedResult;
  if (flattenKeys) {
    result = [];
    (function flatten2(node) {
      var accKeys = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      if (accKeys.length === keys.length) {
        result.push({
          keys: accKeys,
          vals: node
        });
      } else {
        Object.entries(node).forEach(function(_ref2) {
          var _ref3 = _slicedToArray3(_ref2, 2), key = _ref3[0], val = _ref3[1];
          return flatten2(val, [].concat(_toConsumableArray(accKeys), [key]));
        });
      }
    })(indexedResult);
    if (keyAccessors instanceof Array && keyAccessors.length === 0 && result.length === 1) {
      result[0].keys = [];
    }
  }
  return result;
};
var index_array_by_module_default = index4;

// node_modules/data-joint/dist/data-joint.module.js
function ownKeys(object3, enumerableOnly) {
  var keys = Object.keys(object3);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object3);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object3, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties2(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose2(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _slicedToArray4(arr, i) {
  return _arrayWithHoles4(arr) || _iterableToArrayLimit4(arr, i) || _unsupportedIterableToArray4(arr, i) || _nonIterableRest4();
}
function _toConsumableArray2(arr) {
  return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _unsupportedIterableToArray4(arr) || _nonIterableSpread2();
}
function _arrayWithoutHoles2(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray4(arr);
}
function _arrayWithHoles4(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArray2(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _iterableToArrayLimit4(arr, i) {
  var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _unsupportedIterableToArray4(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray4(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray4(o, minLen);
}
function _arrayLikeToArray4(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread2() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableRest4() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function diffArrays(prev, next, idAccessor) {
  var result = {
    enter: [],
    update: [],
    exit: []
  };
  if (!idAccessor) {
    var prevSet = new Set(prev);
    var nextSet = new Set(next);
    new Set([].concat(_toConsumableArray2(prevSet), _toConsumableArray2(nextSet))).forEach(function(item) {
      var type = !prevSet.has(item) ? "enter" : !nextSet.has(item) ? "exit" : "update";
      result[type].push(type === "update" ? [item, item] : item);
    });
  } else {
    var prevById = index_array_by_module_default(prev, idAccessor, false);
    var nextById = index_array_by_module_default(next, idAccessor, false);
    var byId = Object.assign({}, prevById, nextById);
    Object.entries(byId).forEach(function(_ref) {
      var _ref2 = _slicedToArray4(_ref, 2), id = _ref2[0], item = _ref2[1];
      var type = !prevById.hasOwnProperty(id) ? "enter" : !nextById.hasOwnProperty(id) ? "exit" : "update";
      result[type].push(type === "update" ? [prevById[id], nextById[id]] : item);
    });
  }
  return result;
}
function dataBindDiff(data, existingObjs, _ref3) {
  var _ref3$objBindAttr = _ref3.objBindAttr, objBindAttr = _ref3$objBindAttr === void 0 ? "__obj" : _ref3$objBindAttr, _ref3$dataBindAttr = _ref3.dataBindAttr, dataBindAttr = _ref3$dataBindAttr === void 0 ? "__data" : _ref3$dataBindAttr, idAccessor = _ref3.idAccessor, _ref3$purge = _ref3.purge, purge = _ref3$purge === void 0 ? false : _ref3$purge;
  var isObjValid = function isObjValid2(obj) {
    return obj.hasOwnProperty(dataBindAttr);
  };
  var removeObjs = existingObjs.filter(function(obj) {
    return !isObjValid(obj);
  });
  var prevD = existingObjs.filter(isObjValid).map(function(obj) {
    return obj[dataBindAttr];
  });
  var nextD = data;
  var diff = purge ? {
    enter: nextD,
    exit: prevD,
    update: []
  } : diffArrays(prevD, nextD, idAccessor);
  diff.update = diff.update.map(function(_ref4) {
    var _ref5 = _slicedToArray4(_ref4, 2), prevD2 = _ref5[0], nextD2 = _ref5[1];
    if (prevD2 !== nextD2) {
      nextD2[objBindAttr] = prevD2[objBindAttr];
      nextD2[objBindAttr][dataBindAttr] = nextD2;
    }
    return nextD2;
  });
  diff.exit = diff.exit.concat(removeObjs.map(function(obj) {
    return _defineProperty({}, objBindAttr, obj);
  }));
  return diff;
}
function viewDigest(data, existingObjs, appendObj, removeObj, _ref7) {
  var _ref7$createObj = _ref7.createObj, createObj = _ref7$createObj === void 0 ? function(d) {
    return {};
  } : _ref7$createObj, _ref7$updateObj = _ref7.updateObj, updateObj = _ref7$updateObj === void 0 ? function(obj, d) {
  } : _ref7$updateObj, _ref7$exitObj = _ref7.exitObj, exitObj = _ref7$exitObj === void 0 ? function(obj) {
  } : _ref7$exitObj, _ref7$objBindAttr = _ref7.objBindAttr, objBindAttr = _ref7$objBindAttr === void 0 ? "__obj" : _ref7$objBindAttr, _ref7$dataBindAttr = _ref7.dataBindAttr, dataBindAttr = _ref7$dataBindAttr === void 0 ? "__data" : _ref7$dataBindAttr, dataDiffOptions = _objectWithoutProperties2(_ref7, ["createObj", "updateObj", "exitObj", "objBindAttr", "dataBindAttr"]);
  var _dataBindDiff = dataBindDiff(data, existingObjs, _objectSpread2({
    objBindAttr,
    dataBindAttr
  }, dataDiffOptions)), enter = _dataBindDiff.enter, update13 = _dataBindDiff.update, exit = _dataBindDiff.exit;
  exit.forEach(function(d) {
    var obj = d[objBindAttr];
    delete d[objBindAttr];
    exitObj(obj);
    removeObj(obj);
  });
  var newObjs = createObjs(enter);
  var pointsData = [].concat(_toConsumableArray2(enter), _toConsumableArray2(update13));
  updateObjs(pointsData);
  newObjs.forEach(appendObj);
  function createObjs(data2) {
    var newObjs2 = [];
    data2.forEach(function(d) {
      var obj = createObj(d);
      if (obj) {
        obj[dataBindAttr] = d;
        d[objBindAttr] = obj;
        newObjs2.push(obj);
      }
    });
    return newObjs2;
  }
  function updateObjs(data2) {
    data2.forEach(function(d) {
      var obj = d[objBindAttr];
      if (obj) {
        obj[dataBindAttr] = d;
        updateObj(obj, d);
      }
    });
  }
}
var data_joint_module_default = viewDigest;

// node_modules/three-globe/dist/three-globe.module.js
var import_frame_ticker = __toModule(require_FrameTicker());

// node_modules/d3-scale/src/init.js
function initRange(domain, range2) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range2).domain(domain);
      break;
  }
  return this;
}

// node_modules/d3-scale/src/ordinal.js
var implicit = Symbol("implicit");

// node_modules/d3-color/src/define.js
function define_default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}

// node_modules/d3-color/src/color.js
function Color2() {
}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*";
var reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex = /^#([0-9a-f]{3,8})$/;
var reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$");
var reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$");
var reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$");
var reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$");
var reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$");
var reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
var named = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default(Color2, color, {
  copy: function(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable: function() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  formatHex: color_formatHex,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format3) {
  var m, l;
  format3 = (format3 + "").trim().toLowerCase();
  return (m = reHex.exec(format3)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) : l === 3 ? new Rgb(m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, (m & 15) << 4 | m & 15, 1) : l === 8 ? rgba(m >> 24 & 255, m >> 16 & 255, m >> 8 & 255, (m & 255) / 255) : l === 4 ? rgba(m >> 12 & 15 | m >> 8 & 240, m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, ((m & 15) << 4 | m & 15) / 255) : null) : (m = reRgbInteger.exec(format3)) ? new Rgb(m[1], m[2], m[3], 1) : (m = reRgbPercent.exec(format3)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) : (m = reRgbaInteger.exec(format3)) ? rgba(m[1], m[2], m[3], m[4]) : (m = reRgbaPercent.exec(format3)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) : (m = reHslPercent.exec(format3)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) : (m = reHslaPercent.exec(format3)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) : named.hasOwnProperty(format3) ? rgbn(named[format3]) : format3 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n) {
  return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
}
function rgba(r, g, b, a) {
  if (a <= 0)
    r = g = b = NaN;
  return new Rgb(r, g, b, a);
}
function rgbConvert(o) {
  if (!(o instanceof Color2))
    o = color(o);
  if (!o)
    return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}
function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}
define_default(Rgb, rgb, extend(Color2, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb: function() {
    return this;
  },
  displayable: function() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex,
  formatHex: rgb_formatHex,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));
function rgb_formatHex() {
  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
}
function rgb_formatRgb() {
  var a = this.opacity;
  a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
  return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
}
function hex(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h, s, l, a) {
  if (a <= 0)
    h = s = l = NaN;
  else if (l <= 0 || l >= 1)
    h = s = NaN;
  else if (s <= 0)
    h = NaN;
  return new Hsl(h, s, l, a);
}
function hslConvert(o) {
  if (o instanceof Hsl)
    return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color2))
    o = color(o);
  if (!o)
    return new Hsl();
  if (o instanceof Hsl)
    return o;
  o = o.rgb();
  var r = o.r / 255, g = o.g / 255, b = o.b / 255, min4 = Math.min(r, g, b), max4 = Math.max(r, g, b), h = NaN, s = max4 - min4, l = (max4 + min4) / 2;
  if (s) {
    if (r === max4)
      h = (g - b) / s + (g < b) * 6;
    else if (g === max4)
      h = (b - r) / s + 2;
    else
      h = (r - g) / s + 4;
    s /= l < 0.5 ? max4 + min4 : 2 - max4 - min4;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s, l, o.opacity);
}
function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}
function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}
define_default(Hsl, hsl, extend(Color2, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function() {
    var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
    return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
  },
  displayable: function() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl: function() {
    var a = this.opacity;
    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a === 1 ? ")" : ", " + a + ")");
  }
}));
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}

// node_modules/d3-color/src/math.js
var radians2 = Math.PI / 180;
var degrees2 = 180 / Math.PI;

// node_modules/d3-color/src/lab.js
var K = 18;
var Xn = 0.96422;
var Yn = 1;
var Zn = 0.82521;
var t0 = 4 / 29;
var t1 = 6 / 29;
var t2 = 3 * t1 * t1;
var t3 = t1 * t1 * t1;
function labConvert(o) {
  if (o instanceof Lab)
    return new Lab(o.l, o.a, o.b, o.opacity);
  if (o instanceof Hcl)
    return hcl2lab(o);
  if (!(o instanceof Rgb))
    o = rgbConvert(o);
  var r = rgb2lrgb(o.r), g = rgb2lrgb(o.g), b = rgb2lrgb(o.b), y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;
  if (r === g && g === b)
    x = z = y;
  else {
    x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
  }
  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
}
function lab(l, a, b, opacity) {
  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
}
function Lab(l, a, b, opacity) {
  this.l = +l;
  this.a = +a;
  this.b = +b;
  this.opacity = +opacity;
}
define_default(Lab, lab, extend(Color2, {
  brighter: function(k) {
    return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  darker: function(k) {
    return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  rgb: function() {
    var y = (this.l + 16) / 116, x = isNaN(this.a) ? y : y + this.a / 500, z = isNaN(this.b) ? y : y - this.b / 200;
    x = Xn * lab2xyz(x);
    y = Yn * lab2xyz(y);
    z = Zn * lab2xyz(z);
    return new Rgb(lrgb2rgb(3.1338561 * x - 1.6168667 * y - 0.4906146 * z), lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.033454 * z), lrgb2rgb(0.0719453 * x - 0.2289914 * y + 1.4052427 * z), this.opacity);
  }
}));
function xyz2lab(t) {
  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
}
function lab2xyz(t) {
  return t > t1 ? t * t * t : t2 * (t - t0);
}
function lrgb2rgb(x) {
  return 255 * (x <= 31308e-7 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
}
function rgb2lrgb(x) {
  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
}
function hclConvert(o) {
  if (o instanceof Hcl)
    return new Hcl(o.h, o.c, o.l, o.opacity);
  if (!(o instanceof Lab))
    o = labConvert(o);
  if (o.a === 0 && o.b === 0)
    return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
  var h = Math.atan2(o.b, o.a) * degrees2;
  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}
function hcl(h, c, l, opacity) {
  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}
function Hcl(h, c, l, opacity) {
  this.h = +h;
  this.c = +c;
  this.l = +l;
  this.opacity = +opacity;
}
function hcl2lab(o) {
  if (isNaN(o.h))
    return new Lab(o.l, 0, 0, o.opacity);
  var h = o.h * radians2;
  return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
}
define_default(Hcl, hcl, extend(Color2, {
  brighter: function(k) {
    return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
  },
  darker: function(k) {
    return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
  },
  rgb: function() {
    return hcl2lab(this).rgb();
  }
}));

// node_modules/d3-color/src/cubehelix.js
var A = -0.14861;
var B = 1.78277;
var C = -0.29227;
var D = -0.90649;
var E = 1.97294;
var ED = E * D;
var EB = E * B;
var BC_DA = B * C - D * A;
function cubehelixConvert(o) {
  if (o instanceof Cubehelix)
    return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Rgb))
    o = rgbConvert(o);
  var r = o.r / 255, g = o.g / 255, b = o.b / 255, l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB), bl = b - l, k = (E * (g - l) - C * bl) / D, s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), h = s ? Math.atan2(k, bl) * degrees2 - 120 : NaN;
  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
}
function cubehelix(h, s, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
}
function Cubehelix(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}
define_default(Cubehelix, cubehelix, extend(Color2, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function() {
    var h = isNaN(this.h) ? 0 : (this.h + 120) * radians2, l = +this.l, a = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh2 = Math.cos(h), sinh2 = Math.sin(h);
    return new Rgb(255 * (l + a * (A * cosh2 + B * sinh2)), 255 * (l + a * (C * cosh2 + D * sinh2)), 255 * (l + a * (E * cosh2)), this.opacity);
  }
}));

// node_modules/d3-interpolate/src/basis.js
function basis(t15, v0, v1, v2, v3) {
  var t23 = t15 * t15, t33 = t23 * t15;
  return ((1 - 3 * t15 + 3 * t23 - t33) * v0 + (4 - 6 * t23 + 3 * t33) * v1 + (1 + 3 * t15 + 3 * t23 - 3 * t33) * v2 + t33 * v3) / 6;
}
function basis_default(values) {
  var n = values.length - 1;
  return function(t) {
    var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}

// node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default(values) {
  var n = values.length;
  return function(t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}

// node_modules/d3-interpolate/src/constant.js
var constant_default3 = (x) => () => x;

// node_modules/d3-interpolate/src/color.js
function linear(a, d) {
  return function(t) {
    return a + t * d;
  };
}
function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
    return Math.pow(a + t * b, y);
  };
}
function hue(a, b) {
  var d = b - a;
  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant_default3(isNaN(a) ? b : a);
}
function gamma(y) {
  return (y = +y) === 1 ? nogamma : function(a, b) {
    return b - a ? exponential(a, b, y) : constant_default3(isNaN(a) ? b : a);
  };
}
function nogamma(a, b) {
  var d = b - a;
  return d ? linear(a, d) : constant_default3(isNaN(a) ? b : a);
}

// node_modules/d3-interpolate/src/rgb.js
var rgb_default = function rgbGamma(y) {
  var color3 = gamma(y);
  function rgb3(start, end) {
    var r = color3((start = rgb(start)).r, (end = rgb(end)).r), g = color3(start.g, end.g), b = color3(start.b, end.b), opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }
  rgb3.gamma = rgbGamma;
  return rgb3;
}(1);
function rgbSpline(spline) {
  return function(colors) {
    var n = colors.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color3;
    for (i = 0; i < n; ++i) {
      color3 = rgb(colors[i]);
      r[i] = color3.r || 0;
      g[i] = color3.g || 0;
      b[i] = color3.b || 0;
    }
    r = spline(r);
    g = spline(g);
    b = spline(b);
    color3.opacity = 1;
    return function(t) {
      color3.r = r(t);
      color3.g = g(t);
      color3.b = b(t);
      return color3 + "";
    };
  };
}
var rgbBasis = rgbSpline(basis_default);
var rgbBasisClosed = rgbSpline(basisClosed_default);

// node_modules/d3-interpolate/src/numberArray.js
function numberArray_default(a, b) {
  if (!b)
    b = [];
  var n = a ? Math.min(b.length, a.length) : 0, c = b.slice(), i;
  return function(t) {
    for (i = 0; i < n; ++i)
      c[i] = a[i] * (1 - t) + b[i] * t;
    return c;
  };
}
function isNumberArray(x) {
  return ArrayBuffer.isView(x) && !(x instanceof DataView);
}

// node_modules/d3-interpolate/src/array.js
function array_default(a, b) {
  return (isNumberArray(b) ? numberArray_default : genericArray)(a, b);
}
function genericArray(a, b) {
  var nb = b ? b.length : 0, na = a ? Math.min(nb, a.length) : 0, x = new Array(na), c = new Array(nb), i;
  for (i = 0; i < na; ++i)
    x[i] = value_default(a[i], b[i]);
  for (; i < nb; ++i)
    c[i] = b[i];
  return function(t) {
    for (i = 0; i < na; ++i)
      c[i] = x[i](t);
    return c;
  };
}

// node_modules/d3-interpolate/src/date.js
function date_default(a, b) {
  var d = new Date();
  return a = +a, b = +b, function(t) {
    return d.setTime(a * (1 - t) + b * t), d;
  };
}

// node_modules/d3-interpolate/src/number.js
function number_default2(a, b) {
  return a = +a, b = +b, function(t) {
    return a * (1 - t) + b * t;
  };
}

// node_modules/d3-interpolate/src/object.js
function object_default(a, b) {
  var i = {}, c = {}, k;
  if (a === null || typeof a !== "object")
    a = {};
  if (b === null || typeof b !== "object")
    b = {};
  for (k in b) {
    if (k in a) {
      i[k] = value_default(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }
  return function(t) {
    for (k in i)
      c[k] = i[k](t);
    return c;
  };
}

// node_modules/d3-interpolate/src/string.js
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB = new RegExp(reA.source, "g");
function zero(b) {
  return function() {
    return b;
  };
}
function one(b) {
  return function(t) {
    return b(t) + "";
  };
}
function string_default(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
  a = a + "", b = b + "";
  while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      bs = b.slice(bi, bs);
      if (s[i])
        s[i] += bs;
      else
        s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s[i])
        s[i] += bm;
      else
        s[++i] = bm;
    } else {
      s[++i] = null;
      q.push({ i, x: number_default2(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i])
      s[i] += bs;
    else
      s[++i] = bs;
  }
  return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function(t) {
    for (var i2 = 0, o; i2 < b; ++i2)
      s[(o = q[i2]).i] = o.x(t);
    return s.join("");
  });
}

// node_modules/d3-interpolate/src/value.js
function value_default(a, b) {
  var t = typeof b, c;
  return b == null || t === "boolean" ? constant_default3(b) : (t === "number" ? number_default2 : t === "string" ? (c = color(b)) ? (b = c, rgb_default) : string_default : b instanceof color ? rgb_default : b instanceof Date ? date_default : isNumberArray(b) ? numberArray_default : Array.isArray(b) ? genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object_default : number_default2)(a, b);
}

// node_modules/d3-interpolate/src/round.js
function round_default(a, b) {
  return a = +a, b = +b, function(t) {
    return Math.round(a * (1 - t) + b * t);
  };
}

// node_modules/d3-interpolate/src/transform/decompose.js
var degrees3 = 180 / Math.PI;
var identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose_default(a, b, c, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b))
    a /= scaleX, b /= scaleX;
  if (skewX = a * c + b * d)
    c -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c * c + d * d))
    c /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c)
    a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees3,
    skewX: Math.atan(skewX) * degrees3,
    scaleX,
    scaleY
  };
}

// node_modules/d3-interpolate/src/transform/parse.js
var svgNode;
function parseCss(value) {
  const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m.isIdentity ? identity : decompose_default(m.a, m.b, m.c, m.d, m.e, m.f);
}
function parseSvg(value) {
  if (value == null)
    return identity;
  if (!svgNode)
    svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate()))
    return identity;
  value = value.matrix;
  return decompose_default(value.a, value.b, value.c, value.d, value.e, value.f);
}

// node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({ i: i - 4, x: number_default2(xa, xb) }, { i: i - 2, x: number_default2(ya, yb) });
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180)
        b += 360;
      else if (b - a > 180)
        a += 360;
      q.push({ i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: number_default2(a, b) });
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }
  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({ i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: number_default2(a, b) });
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }
  function scale2(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({ i: i - 4, x: number_default2(xa, xb) }, { i: i - 2, x: number_default2(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a, b) {
    var s = [], q = [];
    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale2(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null;
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n)
        s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  };
}
var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

// node_modules/d3-interpolate/src/zoom.js
var epsilon22 = 1e-12;
function cosh(x) {
  return ((x = Math.exp(x)) + 1 / x) / 2;
}
function sinh(x) {
  return ((x = Math.exp(x)) - 1 / x) / 2;
}
function tanh(x) {
  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
}
var zoom_default = function zoomRho(rho, rho2, rho4) {
  function zoom(p02, p1) {
    var ux0 = p02[0], uy0 = p02[1], w0 = p02[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
    if (d2 < epsilon22) {
      S = Math.log(w1 / w0) / rho;
      i = function(t) {
        return [
          ux0 + t * dx,
          uy0 + t * dy,
          w0 * Math.exp(rho * t * S)
        ];
      };
    } else {
      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / rho;
      i = function(t) {
        var s = t * S, coshr0 = cosh(r0), u4 = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
        return [
          ux0 + u4 * dx,
          uy0 + u4 * dy,
          w0 * coshr0 / cosh(rho * s + r0)
        ];
      };
    }
    i.duration = S * 1e3 * rho / Math.SQRT2;
    return i;
  }
  zoom.rho = function(_) {
    var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
    return zoomRho(_1, _2, _4);
  };
  return zoom;
}(Math.SQRT2, 2, 4);

// node_modules/d3-interpolate/src/hsl.js
function hsl2(hue3) {
  return function(start, end) {
    var h = hue3((start = hsl(start)).h, (end = hsl(end)).h), s = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.h = h(t);
      start.s = s(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  };
}
var hsl_default = hsl2(hue);
var hslLong = hsl2(nogamma);

// node_modules/d3-interpolate/src/hcl.js
function hcl2(hue3) {
  return function(start, end) {
    var h = hue3((start = hcl(start)).h, (end = hcl(end)).h), c = nogamma(start.c, end.c), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.h = h(t);
      start.c = c(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  };
}
var hcl_default = hcl2(hue);
var hclLong = hcl2(nogamma);

// node_modules/d3-interpolate/src/cubehelix.js
function cubehelix2(hue3) {
  return function cubehelixGamma(y) {
    y = +y;
    function cubehelix5(start, end) {
      var h = hue3((start = cubehelix(start)).h, (end = cubehelix(end)).h), s = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
      return function(t) {
        start.h = h(t);
        start.s = s(t);
        start.l = l(Math.pow(t, y));
        start.opacity = opacity(t);
        return start + "";
      };
    }
    cubehelix5.gamma = cubehelixGamma;
    return cubehelix5;
  }(1);
}
var cubehelix_default = cubehelix2(hue);
var cubehelixLong = cubehelix2(nogamma);

// node_modules/d3-scale/src/constant.js
function constants(x) {
  return function() {
    return x;
  };
}

// node_modules/d3-scale/src/number.js
function number(x) {
  return +x;
}

// node_modules/d3-scale/src/continuous.js
var unit = [0, 1];
function identity2(x) {
  return x;
}
function normalize(a, b) {
  return (b -= a = +a) ? function(x) {
    return (x - a) / b;
  } : constants(isNaN(b) ? NaN : 0.5);
}
function clamper(a, b) {
  var t;
  if (a > b)
    t = a, a = b, b = t;
  return function(x) {
    return Math.max(a, Math.min(b, x));
  };
}
function bimap(domain, range2, interpolate) {
  var d0 = domain[0], d1 = domain[1], r0 = range2[0], r1 = range2[1];
  if (d1 < d0)
    d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
  else
    d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function(x) {
    return r0(d0(x));
  };
}
function polymap(domain, range2, interpolate) {
  var j = Math.min(domain.length, range2.length) - 1, d = new Array(j), r = new Array(j), i = -1;
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range2 = range2.slice().reverse();
  }
  while (++i < j) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate(range2[i], range2[i + 1]);
  }
  return function(x) {
    var i2 = bisect_default(domain, x, 1, j) - 1;
    return r[i2](d[i2](x));
  };
}
function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function transformer2() {
  var domain = unit, range2 = unit, interpolate = value_default, transform, untransform, unknown, clamp = identity2, piecewise3, output, input;
  function rescale() {
    var n = Math.min(domain.length, range2.length);
    if (clamp !== identity2)
      clamp = clamper(domain[0], domain[n - 1]);
    piecewise3 = n > 2 ? polymap : bimap;
    output = input = null;
    return scale2;
  }
  function scale2(x) {
    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise3(domain.map(transform), range2, interpolate)))(transform(clamp(x)));
  }
  scale2.invert = function(y) {
    return clamp(untransform((input || (input = piecewise3(range2, domain.map(transform), number_default2)))(y)));
  };
  scale2.domain = function(_) {
    return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();
  };
  scale2.range = function(_) {
    return arguments.length ? (range2 = Array.from(_), rescale()) : range2.slice();
  };
  scale2.rangeRound = function(_) {
    return range2 = Array.from(_), interpolate = round_default, rescale();
  };
  scale2.clamp = function(_) {
    return arguments.length ? (clamp = _ ? true : identity2, rescale()) : clamp !== identity2;
  };
  scale2.interpolate = function(_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };
  scale2.unknown = function(_) {
    return arguments.length ? (unknown = _, scale2) : unknown;
  };
  return function(t, u4) {
    transform = t, untransform = u4;
    return rescale();
  };
}
function continuous() {
  return transformer2()(identity2, identity2);
}

// node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default(x) {
  return Math.abs(x = Math.round(x)) >= 1e21 ? x.toLocaleString("en").replace(/,/g, "") : x.toString(10);
}
function formatDecimalParts(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0)
    return null;
  var i, coefficient = x.slice(0, i);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x.slice(i + 1)
  ];
}

// node_modules/d3-format/src/exponent.js
function exponent_default(x) {
  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
}

// node_modules/d3-format/src/formatGroup.js
function formatGroup_default(grouping, thousands) {
  return function(value, width) {
    var i = value.length, t = [], j = 0, g = grouping[0], length = 0;
    while (i > 0 && g > 0) {
      if (length + g + 1 > width)
        g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width)
        break;
      g = grouping[j = (j + 1) % grouping.length];
    }
    return t.reverse().join(thousands);
  };
}

// node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
}

// node_modules/d3-format/src/formatSpecifier.js
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier)))
    throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype;
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

// node_modules/d3-format/src/formatTrim.js
function formatTrim_default(s) {
  out:
    for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
      switch (s[i]) {
        case ".":
          i0 = i1 = i;
          break;
        case "0":
          if (i0 === 0)
            i0 = i;
          i1 = i;
          break;
        default:
          if (!+s[i])
            break out;
          if (i0 > 0)
            i0 = 0;
          break;
      }
    }
  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}

// node_modules/d3-format/src/formatPrefixAuto.js
var prefixExponent;
function formatPrefixAuto_default(x, p) {
  var d = formatDecimalParts(x, p);
  if (!d)
    return x + "";
  var coefficient = d[0], exponent = d[1], i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0];
}

// node_modules/d3-format/src/formatRounded.js
function formatRounded_default(x, p) {
  var d = formatDecimalParts(x, p);
  if (!d)
    return x + "";
  var coefficient = d[0], exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

// node_modules/d3-format/src/formatTypes.js
var formatTypes_default = {
  "%": (x, p) => (x * 100).toFixed(p),
  "b": (x) => Math.round(x).toString(2),
  "c": (x) => x + "",
  "d": formatDecimal_default,
  "e": (x, p) => x.toExponential(p),
  "f": (x, p) => x.toFixed(p),
  "g": (x, p) => x.toPrecision(p),
  "o": (x) => Math.round(x).toString(8),
  "p": (x, p) => formatRounded_default(x * 100, p),
  "r": formatRounded_default,
  "s": formatPrefixAuto_default,
  "X": (x) => Math.round(x).toString(16).toUpperCase(),
  "x": (x) => Math.round(x).toString(16)
};

// node_modules/d3-format/src/identity.js
function identity_default4(x) {
  return x;
}

// node_modules/d3-format/src/locale.js
var map3 = Array.prototype.map;
var prefixes = ["y", "z", "a", "f", "p", "n", "\xB5", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function locale_default(locale5) {
  var group3 = locale5.grouping === void 0 || locale5.thousands === void 0 ? identity_default4 : formatGroup_default(map3.call(locale5.grouping, Number), locale5.thousands + ""), currencyPrefix = locale5.currency === void 0 ? "" : locale5.currency[0] + "", currencySuffix = locale5.currency === void 0 ? "" : locale5.currency[1] + "", decimal = locale5.decimal === void 0 ? "." : locale5.decimal + "", numerals = locale5.numerals === void 0 ? identity_default4 : formatNumerals_default(map3.call(locale5.numerals, String)), percent = locale5.percent === void 0 ? "%" : locale5.percent + "", minus = locale5.minus === void 0 ? "\u2212" : locale5.minus + "", nan = locale5.nan === void 0 ? "NaN" : locale5.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill, align = specifier.align, sign4 = specifier.sign, symbol = specifier.symbol, zero2 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
    if (type === "n")
      comma = true, type = "g";
    else if (!formatTypes_default[type])
      precision === void 0 && (precision = 12), trim = true, type = "g";
    if (zero2 || fill === "0" && align === "=")
      zero2 = true, fill = "0", align = "=";
    var prefix2 = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
    var formatType = formatTypes_default[type], maybeSuffix = /[defgprs%]/.test(type);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format3(value) {
      var valuePrefix = prefix2, valueSuffix = suffix, i, n, c;
      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim)
          value = formatTrim_default(value);
        if (valueNegative && +value === 0 && sign4 !== "+")
          valueNegative = false;
        valuePrefix = (valueNegative ? sign4 === "(" ? sign4 : minus : sign4 === "-" || sign4 === "(" ? "" : sign4) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign4 === "(" ? ")" : "");
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }
      if (comma && !zero2)
        value = group3(value, Infinity);
      var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
      if (comma && zero2)
        value = group3(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format3.toString = function() {
      return specifier + "";
    };
    return format3;
  }
  function formatPrefix3(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3, k = Math.pow(10, -e), prefix2 = prefixes[8 + e / 3];
    return function(value2) {
      return f(k * value2) + prefix2;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix3
  };
}

// node_modules/d3-format/src/defaultLocale.js
var locale;
var format;
var formatPrefix;
defaultLocale({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
function defaultLocale(definition) {
  locale = locale_default(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}

// node_modules/d3-format/src/precisionFixed.js
function precisionFixed_default(step) {
  return Math.max(0, -exponent_default(Math.abs(step)));
}

// node_modules/d3-format/src/precisionPrefix.js
function precisionPrefix_default(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3 - exponent_default(Math.abs(step)));
}

// node_modules/d3-format/src/precisionRound.js
function precisionRound_default(step, max4) {
  step = Math.abs(step), max4 = Math.abs(max4) - step;
  return Math.max(0, exponent_default(max4) - exponent_default(step)) + 1;
}

// node_modules/d3-scale/src/tickFormat.js
function tickFormat(start, stop, count3, specifier) {
  var step = tickStep(start, stop, count3), precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix_default(step, value)))
        specifier.precision = precision;
      return formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound_default(step, Math.max(Math.abs(start), Math.abs(stop)))))
        specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed_default(step)))
        specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format(specifier);
}

// node_modules/d3-scale/src/linear.js
function linearish(scale2) {
  var domain = scale2.domain;
  scale2.ticks = function(count3) {
    var d = domain();
    return ticks_default(d[0], d[d.length - 1], count3 == null ? 10 : count3);
  };
  scale2.tickFormat = function(count3, specifier) {
    var d = domain();
    return tickFormat(d[0], d[d.length - 1], count3 == null ? 10 : count3, specifier);
  };
  scale2.nice = function(count3) {
    if (count3 == null)
      count3 = 10;
    var d = domain();
    var i0 = 0;
    var i1 = d.length - 1;
    var start = d[i0];
    var stop = d[i1];
    var prestep;
    var step;
    var maxIter = 10;
    if (stop < start) {
      step = start, start = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }
    while (maxIter-- > 0) {
      step = tickIncrement(start, stop, count3);
      if (step === prestep) {
        d[i0] = start;
        d[i1] = stop;
        return domain(d);
      } else if (step > 0) {
        start = Math.floor(start / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start = Math.ceil(start * step) / step;
        stop = Math.floor(stop * step) / step;
      } else {
        break;
      }
      prestep = step;
    }
    return scale2;
  };
  return scale2;
}
function linear2() {
  var scale2 = continuous();
  scale2.copy = function() {
    return copy(scale2, linear2());
  };
  initRange.apply(scale2, arguments);
  return linearish(scale2);
}

// node_modules/d3-time/src/interval.js
var t02 = new Date();
var t12 = new Date();
function newInterval(floori, offseti, count3, field) {
  function interval(date) {
    return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;
  }
  interval.floor = function(date) {
    return floori(date = new Date(+date)), date;
  };
  interval.ceil = function(date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };
  interval.round = function(date) {
    var d0 = interval(date), d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };
  interval.offset = function(date, step) {
    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };
  interval.range = function(start, stop, step) {
    var range2 = [], previous;
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0))
      return range2;
    do
      range2.push(previous = new Date(+start)), offseti(start, step), floori(start);
    while (previous < start && start < stop);
    return range2;
  };
  interval.filter = function(test) {
    return newInterval(function(date) {
      if (date >= date)
        while (floori(date), !test(date))
          date.setTime(date - 1);
    }, function(date, step) {
      if (date >= date) {
        if (step < 0)
          while (++step <= 0) {
            while (offseti(date, -1), !test(date)) {
            }
          }
        else
          while (--step >= 0) {
            while (offseti(date, 1), !test(date)) {
            }
          }
      }
    });
  };
  if (count3) {
    interval.count = function(start, end) {
      t02.setTime(+start), t12.setTime(+end);
      floori(t02), floori(t12);
      return Math.floor(count3(t02, t12));
    };
    interval.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function(d) {
        return field(d) % step === 0;
      } : function(d) {
        return interval.count(0, d) % step === 0;
      });
    };
  }
  return interval;
}

// node_modules/d3-time/src/millisecond.js
var millisecond = newInterval(function() {
}, function(date, step) {
  date.setTime(+date + step);
}, function(start, end) {
  return end - start;
});
millisecond.every = function(k) {
  k = Math.floor(k);
  if (!isFinite(k) || !(k > 0))
    return null;
  if (!(k > 1))
    return millisecond;
  return newInterval(function(date) {
    date.setTime(Math.floor(date / k) * k);
  }, function(date, step) {
    date.setTime(+date + step * k);
  }, function(start, end) {
    return (end - start) / k;
  });
};
var millisecond_default = millisecond;
var milliseconds = millisecond.range;

// node_modules/d3-time/src/duration.js
var durationSecond = 1e3;
var durationMinute = durationSecond * 60;
var durationHour = durationMinute * 60;
var durationDay = durationHour * 24;
var durationWeek = durationDay * 7;
var durationMonth = durationDay * 30;
var durationYear = durationDay * 365;

// node_modules/d3-time/src/second.js
var second = newInterval(function(date) {
  date.setTime(date - date.getMilliseconds());
}, function(date, step) {
  date.setTime(+date + step * durationSecond);
}, function(start, end) {
  return (end - start) / durationSecond;
}, function(date) {
  return date.getUTCSeconds();
});
var second_default = second;
var seconds = second.range;

// node_modules/d3-time/src/minute.js
var minute = newInterval(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
}, function(date, step) {
  date.setTime(+date + step * durationMinute);
}, function(start, end) {
  return (end - start) / durationMinute;
}, function(date) {
  return date.getMinutes();
});
var minute_default = minute;
var minutes = minute.range;

// node_modules/d3-time/src/hour.js
var hour = newInterval(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
}, function(date, step) {
  date.setTime(+date + step * durationHour);
}, function(start, end) {
  return (end - start) / durationHour;
}, function(date) {
  return date.getHours();
});
var hour_default = hour;
var hours = hour.range;

// node_modules/d3-time/src/day.js
var day = newInterval((date) => date.setHours(0, 0, 0, 0), (date, step) => date.setDate(date.getDate() + step), (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay, (date) => date.getDate() - 1);
var day_default = day;
var days = day.range;

// node_modules/d3-time/src/week.js
function weekday(i) {
  return newInterval(function(date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function(start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}
var sunday = weekday(0);
var monday = weekday(1);
var tuesday = weekday(2);
var wednesday = weekday(3);
var thursday = weekday(4);
var friday = weekday(5);
var saturday = weekday(6);
var sundays = sunday.range;
var mondays = monday.range;
var tuesdays = tuesday.range;
var wednesdays = wednesday.range;
var thursdays = thursday.range;
var fridays = friday.range;
var saturdays = saturday.range;

// node_modules/d3-time/src/month.js
var month = newInterval(function(date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setMonth(date.getMonth() + step);
}, function(start, end) {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function(date) {
  return date.getMonth();
});
var month_default = month;
var months = month.range;

// node_modules/d3-time/src/year.js
var year = newInterval(function(date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function(start, end) {
  return end.getFullYear() - start.getFullYear();
}, function(date) {
  return date.getFullYear();
});
year.every = function(k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setFullYear(date.getFullYear() + step * k);
  });
};
var year_default = year;
var years = year.range;

// node_modules/d3-time/src/utcMinute.js
var utcMinute = newInterval(function(date) {
  date.setUTCSeconds(0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationMinute);
}, function(start, end) {
  return (end - start) / durationMinute;
}, function(date) {
  return date.getUTCMinutes();
});
var utcMinute_default = utcMinute;
var utcMinutes = utcMinute.range;

// node_modules/d3-time/src/utcHour.js
var utcHour = newInterval(function(date) {
  date.setUTCMinutes(0, 0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationHour);
}, function(start, end) {
  return (end - start) / durationHour;
}, function(date) {
  return date.getUTCHours();
});
var utcHour_default = utcHour;
var utcHours = utcHour.range;

// node_modules/d3-time/src/utcDay.js
var utcDay = newInterval(function(date) {
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function(start, end) {
  return (end - start) / durationDay;
}, function(date) {
  return date.getUTCDate() - 1;
});
var utcDay_default = utcDay;
var utcDays = utcDay.range;

// node_modules/d3-time/src/utcWeek.js
function utcWeekday(i) {
  return newInterval(function(date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function(start, end) {
    return (end - start) / durationWeek;
  });
}
var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);
var utcSundays = utcSunday.range;
var utcMondays = utcMonday.range;
var utcTuesdays = utcTuesday.range;
var utcWednesdays = utcWednesday.range;
var utcThursdays = utcThursday.range;
var utcFridays = utcFriday.range;
var utcSaturdays = utcSaturday.range;

// node_modules/d3-time/src/utcMonth.js
var utcMonth = newInterval(function(date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function(start, end) {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, function(date) {
  return date.getUTCMonth();
});
var utcMonth_default = utcMonth;
var utcMonths = utcMonth.range;

// node_modules/d3-time/src/utcYear.js
var utcYear = newInterval(function(date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function(start, end) {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, function(date) {
  return date.getUTCFullYear();
});
utcYear.every = function(k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k);
  });
};
var utcYear_default = utcYear;
var utcYears = utcYear.range;

// node_modules/d3-time/src/ticks.js
function ticker(year3, month3, week, day3, hour3, minute3) {
  const tickIntervals = [
    [second_default, 1, durationSecond],
    [second_default, 5, 5 * durationSecond],
    [second_default, 15, 15 * durationSecond],
    [second_default, 30, 30 * durationSecond],
    [minute3, 1, durationMinute],
    [minute3, 5, 5 * durationMinute],
    [minute3, 15, 15 * durationMinute],
    [minute3, 30, 30 * durationMinute],
    [hour3, 1, durationHour],
    [hour3, 3, 3 * durationHour],
    [hour3, 6, 6 * durationHour],
    [hour3, 12, 12 * durationHour],
    [day3, 1, durationDay],
    [day3, 2, 2 * durationDay],
    [week, 1, durationWeek],
    [month3, 1, durationMonth],
    [month3, 3, 3 * durationMonth],
    [year3, 1, durationYear]
  ];
  function ticks(start, stop, count3) {
    const reverse3 = stop < start;
    if (reverse3)
      [start, stop] = [stop, start];
    const interval = count3 && typeof count3.range === "function" ? count3 : tickInterval(start, stop, count3);
    const ticks2 = interval ? interval.range(start, +stop + 1) : [];
    return reverse3 ? ticks2.reverse() : ticks2;
  }
  function tickInterval(start, stop, count3) {
    const target = Math.abs(stop - start) / count3;
    const i = bisector_default(([, , step2]) => step2).right(tickIntervals, target);
    if (i === tickIntervals.length)
      return year3.every(tickStep(start / durationYear, stop / durationYear, count3));
    if (i === 0)
      return millisecond_default.every(Math.max(tickStep(start, stop, count3), 1));
    const [t, step] = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
    return t.every(step);
  }
  return [ticks, tickInterval];
}
var [utcTicks, utcTickInterval] = ticker(utcYear_default, utcMonth_default, utcSunday, utcDay_default, utcHour_default, utcMinute_default);
var [timeTicks, timeTickInterval] = ticker(year_default, month_default, sunday, day_default, hour_default, minute_default);

// node_modules/d3-time-format/src/locale.js
function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }
  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}
function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }
  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}
function newDate(y, m, d) {
  return { y, m, d, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale(locale5) {
  var locale_dateTime = locale5.dateTime, locale_date = locale5.date, locale_time = locale5.time, locale_periods = locale5.periods, locale_weekdays = locale5.days, locale_shortWeekdays = locale5.shortDays, locale_months = locale5.months, locale_shortMonths = locale5.shortMonths;
  var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date) {
      var string = [], i = -1, j = 0, n = specifier.length, c, pad3, format3;
      if (!(date instanceof Date))
        date = new Date(+date);
      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j, i));
          if ((pad3 = pads[c = specifier.charAt(++i)]) != null)
            c = specifier.charAt(++i);
          else
            pad3 = c === "e" ? " " : "0";
          if (format3 = formats2[c])
            c = format3(date, pad3);
          string.push(c);
          j = i + 1;
        }
      }
      string.push(specifier.slice(j, i));
      return string.join("");
    };
  }
  function newParse(specifier, Z) {
    return function(string) {
      var d = newDate(1900, void 0, 1), i = parseSpecifier(d, specifier, string += "", 0), week, day3;
      if (i != string.length)
        return null;
      if ("Q" in d)
        return new Date(d.Q);
      if ("s" in d)
        return new Date(d.s * 1e3 + ("L" in d ? d.L : 0));
      if (Z && !("Z" in d))
        d.Z = 0;
      if ("p" in d)
        d.H = d.H % 12 + d.p * 12;
      if (d.m === void 0)
        d.m = "q" in d ? d.q : 0;
      if ("V" in d) {
        if (d.V < 1 || d.V > 53)
          return null;
        if (!("w" in d))
          d.w = 1;
        if ("Z" in d) {
          week = utcDate(newDate(d.y, 0, 1)), day3 = week.getUTCDay();
          week = day3 > 4 || day3 === 0 ? utcMonday.ceil(week) : utcMonday(week);
          week = utcDay_default.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = localDate(newDate(d.y, 0, 1)), day3 = week.getDay();
          week = day3 > 4 || day3 === 0 ? monday.ceil(week) : monday(week);
          week = day_default.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d))
          d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day3 = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day3 + 5) % 7 : d.w + d.U * 7 - (day3 + 6) % 7;
      }
      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      }
      return localDate(d);
    };
  }
  function parseSpecifier(d, specifier, string, j) {
    var i = 0, n = specifier.length, m = string.length, c, parse;
    while (i < n) {
      if (j >= m)
        return -1;
      c = specifier.charCodeAt(i++);
      if (c === 37) {
        c = specifier.charAt(i++);
        parse = parses[c in pads ? specifier.charAt(i++) : c];
        if (!parse || (j = parse(d, string, j)) < 0)
          return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }
    return j;
  }
  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }
  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }
  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }
  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }
  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }
  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }
  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }
  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }
  function formatQuarter(d) {
    return 1 + ~~(d.getMonth() / 3);
  }
  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }
  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }
  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }
  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }
  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d) {
    return 1 + ~~(d.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f = newFormat(specifier += "", formats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    parse: function(specifier) {
      var p = newParse(specifier += "", false);
      p.toString = function() {
        return specifier;
      };
      return p;
    },
    utcFormat: function(specifier) {
      var f = newFormat(specifier += "", utcFormats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    utcParse: function(specifier) {
      var p = newParse(specifier += "", true);
      p.toString = function() {
        return specifier;
      };
      return p;
    }
  };
}
var pads = { "-": "", "_": " ", "0": "0" };
var numberRe = /^\s*\d+/;
var percentRe = /^%/;
var requoteRe = /[\\^$*+?|[\]().{}]/g;
function pad(value, fill, width) {
  var sign4 = value < 0 ? "-" : "", string = (sign4 ? -value : value) + "", length = string.length;
  return sign4 + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}
function requote(s) {
  return s.replace(requoteRe, "\\$&");
}
function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}
function formatLookup(names) {
  return new Map(names.map((name, i) => [name.toLowerCase(), i]));
}
function parseWeekdayNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}
function parseWeekdayNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.u = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberISO(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.V = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}
function parseFullYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}
function parseYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2e3), i + n[0].length) : -1;
}
function parseZone(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}
function parseQuarter(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
}
function parseMonthNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}
function parseDayOfMonth(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}
function parseDayOfYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}
function parseHour24(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}
function parseMinutes(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}
function parseSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}
function parseMilliseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}
function parseMicroseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 6));
  return n ? (d.L = Math.floor(n[0] / 1e3), i + n[0].length) : -1;
}
function parseLiteralPercent(d, string, i) {
  var n = percentRe.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}
function parseUnixTimestamp(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0], i + n[0].length) : -1;
}
function parseUnixTimestampSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.s = +n[0], i + n[0].length) : -1;
}
function formatDayOfMonth(d, p) {
  return pad(d.getDate(), p, 2);
}
function formatHour24(d, p) {
  return pad(d.getHours(), p, 2);
}
function formatHour12(d, p) {
  return pad(d.getHours() % 12 || 12, p, 2);
}
function formatDayOfYear(d, p) {
  return pad(1 + day_default.count(year_default(d), d), p, 3);
}
function formatMilliseconds(d, p) {
  return pad(d.getMilliseconds(), p, 3);
}
function formatMicroseconds(d, p) {
  return formatMilliseconds(d, p) + "000";
}
function formatMonthNumber(d, p) {
  return pad(d.getMonth() + 1, p, 2);
}
function formatMinutes(d, p) {
  return pad(d.getMinutes(), p, 2);
}
function formatSeconds(d, p) {
  return pad(d.getSeconds(), p, 2);
}
function formatWeekdayNumberMonday(d) {
  var day3 = d.getDay();
  return day3 === 0 ? 7 : day3;
}
function formatWeekNumberSunday(d, p) {
  return pad(sunday.count(year_default(d) - 1, d), p, 2);
}
function dISO(d) {
  var day3 = d.getDay();
  return day3 >= 4 || day3 === 0 ? thursday(d) : thursday.ceil(d);
}
function formatWeekNumberISO(d, p) {
  d = dISO(d);
  return pad(thursday.count(year_default(d), d) + (year_default(d).getDay() === 4), p, 2);
}
function formatWeekdayNumberSunday(d) {
  return d.getDay();
}
function formatWeekNumberMonday(d, p) {
  return pad(monday.count(year_default(d) - 1, d), p, 2);
}
function formatYear(d, p) {
  return pad(d.getFullYear() % 100, p, 2);
}
function formatYearISO(d, p) {
  d = dISO(d);
  return pad(d.getFullYear() % 100, p, 2);
}
function formatFullYear(d, p) {
  return pad(d.getFullYear() % 1e4, p, 4);
}
function formatFullYearISO(d, p) {
  var day3 = d.getDay();
  d = day3 >= 4 || day3 === 0 ? thursday(d) : thursday.ceil(d);
  return pad(d.getFullYear() % 1e4, p, 4);
}
function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
}
function formatUTCDayOfMonth(d, p) {
  return pad(d.getUTCDate(), p, 2);
}
function formatUTCHour24(d, p) {
  return pad(d.getUTCHours(), p, 2);
}
function formatUTCHour12(d, p) {
  return pad(d.getUTCHours() % 12 || 12, p, 2);
}
function formatUTCDayOfYear(d, p) {
  return pad(1 + utcDay_default.count(utcYear_default(d), d), p, 3);
}
function formatUTCMilliseconds(d, p) {
  return pad(d.getUTCMilliseconds(), p, 3);
}
function formatUTCMicroseconds(d, p) {
  return formatUTCMilliseconds(d, p) + "000";
}
function formatUTCMonthNumber(d, p) {
  return pad(d.getUTCMonth() + 1, p, 2);
}
function formatUTCMinutes(d, p) {
  return pad(d.getUTCMinutes(), p, 2);
}
function formatUTCSeconds(d, p) {
  return pad(d.getUTCSeconds(), p, 2);
}
function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday(d, p) {
  return pad(utcSunday.count(utcYear_default(d) - 1, d), p, 2);
}
function UTCdISO(d) {
  var day3 = d.getUTCDay();
  return day3 >= 4 || day3 === 0 ? utcThursday(d) : utcThursday.ceil(d);
}
function formatUTCWeekNumberISO(d, p) {
  d = UTCdISO(d);
  return pad(utcThursday.count(utcYear_default(d), d) + (utcYear_default(d).getUTCDay() === 4), p, 2);
}
function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}
function formatUTCWeekNumberMonday(d, p) {
  return pad(utcMonday.count(utcYear_default(d) - 1, d), p, 2);
}
function formatUTCYear(d, p) {
  return pad(d.getUTCFullYear() % 100, p, 2);
}
function formatUTCYearISO(d, p) {
  d = UTCdISO(d);
  return pad(d.getUTCFullYear() % 100, p, 2);
}
function formatUTCFullYear(d, p) {
  return pad(d.getUTCFullYear() % 1e4, p, 4);
}
function formatUTCFullYearISO(d, p) {
  var day3 = d.getUTCDay();
  d = day3 >= 4 || day3 === 0 ? utcThursday(d) : utcThursday.ceil(d);
  return pad(d.getUTCFullYear() % 1e4, p, 4);
}
function formatUTCZone() {
  return "+0000";
}
function formatLiteralPercent() {
  return "%";
}
function formatUnixTimestamp(d) {
  return +d;
}
function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1e3);
}

// node_modules/d3-time-format/src/defaultLocale.js
var locale2;
var timeFormat;
var timeParse;
var utcFormat;
var utcParse;
defaultLocale2({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function defaultLocale2(definition) {
  locale2 = formatLocale(definition);
  timeFormat = locale2.format;
  timeParse = locale2.parse;
  utcFormat = locale2.utcFormat;
  utcParse = locale2.utcParse;
  return locale2;
}

// node_modules/d3-time-format/src/isoFormat.js
var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
function formatIsoNative(date) {
  return date.toISOString();
}
var formatIso = Date.prototype.toISOString ? formatIsoNative : utcFormat(isoSpecifier);

// node_modules/d3-time-format/src/isoParse.js
function parseIsoNative(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}
var parseIso = +new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : utcParse(isoSpecifier);

// node_modules/three-conic-polygon-geometry/dist/three-conic-polygon-geometry.module.js
var import_earcut2 = __toModule(require_earcut());

// node_modules/robust-predicates/esm/util.js
var epsilon3 = 11102230246251565e-32;
var splitter = 134217729;
var resulterrbound = (3 + 8 * epsilon3) * epsilon3;
function sum2(elen, e, flen, f, h) {
  let Q, Qnew, hh, bvirt;
  let enow = e[0];
  let fnow = f[0];
  let eindex = 0;
  let findex = 0;
  if (fnow > enow === fnow > -enow) {
    Q = enow;
    enow = e[++eindex];
  } else {
    Q = fnow;
    fnow = f[++findex];
  }
  let hindex = 0;
  if (eindex < elen && findex < flen) {
    if (fnow > enow === fnow > -enow) {
      Qnew = enow + Q;
      hh = Q - (Qnew - enow);
      enow = e[++eindex];
    } else {
      Qnew = fnow + Q;
      hh = Q - (Qnew - fnow);
      fnow = f[++findex];
    }
    Q = Qnew;
    if (hh !== 0) {
      h[hindex++] = hh;
    }
    while (eindex < elen && findex < flen) {
      if (fnow > enow === fnow > -enow) {
        Qnew = Q + enow;
        bvirt = Qnew - Q;
        hh = Q - (Qnew - bvirt) + (enow - bvirt);
        enow = e[++eindex];
      } else {
        Qnew = Q + fnow;
        bvirt = Qnew - Q;
        hh = Q - (Qnew - bvirt) + (fnow - bvirt);
        fnow = f[++findex];
      }
      Q = Qnew;
      if (hh !== 0) {
        h[hindex++] = hh;
      }
    }
  }
  while (eindex < elen) {
    Qnew = Q + enow;
    bvirt = Qnew - Q;
    hh = Q - (Qnew - bvirt) + (enow - bvirt);
    enow = e[++eindex];
    Q = Qnew;
    if (hh !== 0) {
      h[hindex++] = hh;
    }
  }
  while (findex < flen) {
    Qnew = Q + fnow;
    bvirt = Qnew - Q;
    hh = Q - (Qnew - bvirt) + (fnow - bvirt);
    fnow = f[++findex];
    Q = Qnew;
    if (hh !== 0) {
      h[hindex++] = hh;
    }
  }
  if (Q !== 0 || hindex === 0) {
    h[hindex++] = Q;
  }
  return hindex;
}
function estimate(elen, e) {
  let Q = e[0];
  for (let i = 1; i < elen; i++)
    Q += e[i];
  return Q;
}
function vec(n) {
  return new Float64Array(n);
}

// node_modules/robust-predicates/esm/orient2d.js
var ccwerrboundA = (3 + 16 * epsilon3) * epsilon3;
var ccwerrboundB = (2 + 12 * epsilon3) * epsilon3;
var ccwerrboundC = (9 + 64 * epsilon3) * epsilon3 * epsilon3;
var B2 = vec(4);
var C1 = vec(8);
var C2 = vec(12);
var D2 = vec(16);
var u = vec(4);
function orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {
  let acxtail, acytail, bcxtail, bcytail;
  let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t15, t05, u32;
  const acx = ax - cx;
  const bcx = bx - cx;
  const acy = ay - cy;
  const bcy = by - cy;
  s1 = acx * bcy;
  c = splitter * acx;
  ahi = c - (c - acx);
  alo = acx - ahi;
  c = splitter * bcy;
  bhi = c - (c - bcy);
  blo = bcy - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t15 = acy * bcx;
  c = splitter * acy;
  ahi = c - (c - acy);
  alo = acy - ahi;
  c = splitter * bcx;
  bhi = c - (c - bcx);
  blo = bcx - bhi;
  t05 = alo * blo - (t15 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t05;
  bvirt = s0 - _i;
  B2[0] = s0 - (_i + bvirt) + (bvirt - t05);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t15;
  bvirt = _0 - _i;
  B2[1] = _0 - (_i + bvirt) + (bvirt - t15);
  u32 = _j + _i;
  bvirt = u32 - _j;
  B2[2] = _j - (u32 - bvirt) + (_i - bvirt);
  B2[3] = u32;
  let det = estimate(4, B2);
  let errbound = ccwerrboundB * detsum;
  if (det >= errbound || -det >= errbound) {
    return det;
  }
  bvirt = ax - acx;
  acxtail = ax - (acx + bvirt) + (bvirt - cx);
  bvirt = bx - bcx;
  bcxtail = bx - (bcx + bvirt) + (bvirt - cx);
  bvirt = ay - acy;
  acytail = ay - (acy + bvirt) + (bvirt - cy);
  bvirt = by - bcy;
  bcytail = by - (bcy + bvirt) + (bvirt - cy);
  if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) {
    return det;
  }
  errbound = ccwerrboundC * detsum + resulterrbound * Math.abs(det);
  det += acx * bcytail + bcy * acxtail - (acy * bcxtail + bcx * acytail);
  if (det >= errbound || -det >= errbound)
    return det;
  s1 = acxtail * bcy;
  c = splitter * acxtail;
  ahi = c - (c - acxtail);
  alo = acxtail - ahi;
  c = splitter * bcy;
  bhi = c - (c - bcy);
  blo = bcy - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t15 = acytail * bcx;
  c = splitter * acytail;
  ahi = c - (c - acytail);
  alo = acytail - ahi;
  c = splitter * bcx;
  bhi = c - (c - bcx);
  blo = bcx - bhi;
  t05 = alo * blo - (t15 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t05;
  bvirt = s0 - _i;
  u[0] = s0 - (_i + bvirt) + (bvirt - t05);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t15;
  bvirt = _0 - _i;
  u[1] = _0 - (_i + bvirt) + (bvirt - t15);
  u32 = _j + _i;
  bvirt = u32 - _j;
  u[2] = _j - (u32 - bvirt) + (_i - bvirt);
  u[3] = u32;
  const C1len = sum2(4, B2, 4, u, C1);
  s1 = acx * bcytail;
  c = splitter * acx;
  ahi = c - (c - acx);
  alo = acx - ahi;
  c = splitter * bcytail;
  bhi = c - (c - bcytail);
  blo = bcytail - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t15 = acy * bcxtail;
  c = splitter * acy;
  ahi = c - (c - acy);
  alo = acy - ahi;
  c = splitter * bcxtail;
  bhi = c - (c - bcxtail);
  blo = bcxtail - bhi;
  t05 = alo * blo - (t15 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t05;
  bvirt = s0 - _i;
  u[0] = s0 - (_i + bvirt) + (bvirt - t05);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t15;
  bvirt = _0 - _i;
  u[1] = _0 - (_i + bvirt) + (bvirt - t15);
  u32 = _j + _i;
  bvirt = u32 - _j;
  u[2] = _j - (u32 - bvirt) + (_i - bvirt);
  u[3] = u32;
  const C2len = sum2(C1len, C1, 4, u, C2);
  s1 = acxtail * bcytail;
  c = splitter * acxtail;
  ahi = c - (c - acxtail);
  alo = acxtail - ahi;
  c = splitter * bcytail;
  bhi = c - (c - bcytail);
  blo = bcytail - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t15 = acytail * bcxtail;
  c = splitter * acytail;
  ahi = c - (c - acytail);
  alo = acytail - ahi;
  c = splitter * bcxtail;
  bhi = c - (c - bcxtail);
  blo = bcxtail - bhi;
  t05 = alo * blo - (t15 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t05;
  bvirt = s0 - _i;
  u[0] = s0 - (_i + bvirt) + (bvirt - t05);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t15;
  bvirt = _0 - _i;
  u[1] = _0 - (_i + bvirt) + (bvirt - t15);
  u32 = _j + _i;
  bvirt = u32 - _j;
  u[2] = _j - (u32 - bvirt) + (_i - bvirt);
  u[3] = u32;
  const Dlen = sum2(C2len, C2, 4, u, D2);
  return D2[Dlen - 1];
}
function orient2d(ax, ay, bx, by, cx, cy) {
  const detleft = (ay - cy) * (bx - cx);
  const detright = (ax - cx) * (by - cy);
  const det = detleft - detright;
  if (detleft === 0 || detright === 0 || detleft > 0 !== detright > 0)
    return det;
  const detsum = Math.abs(detleft + detright);
  if (Math.abs(det) >= ccwerrboundA * detsum)
    return det;
  return -orient2dadapt(ax, ay, bx, by, cx, cy, detsum);
}

// node_modules/robust-predicates/esm/orient3d.js
var o3derrboundA = (7 + 56 * epsilon3) * epsilon3;
var o3derrboundB = (3 + 28 * epsilon3) * epsilon3;
var o3derrboundC = (26 + 288 * epsilon3) * epsilon3 * epsilon3;
var bc = vec(4);
var ca = vec(4);
var ab = vec(4);
var at_b = vec(4);
var at_c = vec(4);
var bt_c = vec(4);
var bt_a = vec(4);
var ct_a = vec(4);
var ct_b = vec(4);
var bct = vec(8);
var cat = vec(8);
var abt = vec(8);
var u2 = vec(4);
var _8 = vec(8);
var _8b = vec(8);
var _16 = vec(8);
var _12 = vec(12);
var fin = vec(192);
var fin2 = vec(192);

// node_modules/robust-predicates/esm/incircle.js
var iccerrboundA = (10 + 96 * epsilon3) * epsilon3;
var iccerrboundB = (4 + 48 * epsilon3) * epsilon3;
var iccerrboundC = (44 + 576 * epsilon3) * epsilon3 * epsilon3;
var bc2 = vec(4);
var ca2 = vec(4);
var ab2 = vec(4);
var aa = vec(4);
var bb = vec(4);
var cc = vec(4);
var u3 = vec(4);
var v = vec(4);
var axtbc = vec(8);
var aytbc = vec(8);
var bxtca = vec(8);
var bytca = vec(8);
var cxtab = vec(8);
var cytab = vec(8);
var abt2 = vec(8);
var bct2 = vec(8);
var cat2 = vec(8);
var abtt = vec(4);
var bctt = vec(4);
var catt = vec(4);
var _82 = vec(8);
var _162 = vec(16);
var _16b = vec(16);
var _16c = vec(16);
var _32 = vec(32);
var _32b = vec(32);
var _48 = vec(48);
var _64 = vec(64);
var fin3 = vec(1152);
var fin22 = vec(1152);

// node_modules/robust-predicates/esm/insphere.js
var isperrboundA = (16 + 224 * epsilon3) * epsilon3;
var isperrboundB = (5 + 72 * epsilon3) * epsilon3;
var isperrboundC = (71 + 1408 * epsilon3) * epsilon3 * epsilon3;
var ab3 = vec(4);
var bc3 = vec(4);
var cd = vec(4);
var de = vec(4);
var ea = vec(4);
var ac = vec(4);
var bd = vec(4);
var ce = vec(4);
var da = vec(4);
var eb = vec(4);
var abc = vec(24);
var bcd = vec(24);
var cde = vec(24);
var dea = vec(24);
var eab = vec(24);
var abd = vec(24);
var bce = vec(24);
var cda = vec(24);
var deb = vec(24);
var eac = vec(24);
var adet = vec(1152);
var bdet = vec(1152);
var cdet = vec(1152);
var ddet = vec(1152);
var edet = vec(1152);
var abdet = vec(2304);
var cddet = vec(2304);
var cdedet = vec(3456);
var deter = vec(5760);
var _83 = vec(8);
var _8b2 = vec(8);
var _8c = vec(8);
var _163 = vec(16);
var _24 = vec(24);
var _482 = vec(48);
var _48b = vec(48);
var _96 = vec(96);
var _192 = vec(192);
var _384x = vec(384);
var _384y = vec(384);
var _384z = vec(384);
var _768 = vec(768);
var xdet = vec(96);
var ydet = vec(96);
var zdet = vec(96);
var fin4 = vec(1152);

// node_modules/delaunator/index.js
var EPSILON = Math.pow(2, -52);
var EDGE_STACK = new Uint32Array(512);
var Delaunator = class {
  static from(points, getX = defaultGetX, getY = defaultGetY) {
    const n = points.length;
    const coords = new Float64Array(n * 2);
    for (let i = 0; i < n; i++) {
      const p = points[i];
      coords[2 * i] = getX(p);
      coords[2 * i + 1] = getY(p);
    }
    return new Delaunator(coords);
  }
  constructor(coords) {
    const n = coords.length >> 1;
    if (n > 0 && typeof coords[0] !== "number")
      throw new Error("Expected coords to contain numbers.");
    this.coords = coords;
    const maxTriangles = Math.max(2 * n - 5, 0);
    this._triangles = new Uint32Array(maxTriangles * 3);
    this._halfedges = new Int32Array(maxTriangles * 3);
    this._hashSize = Math.ceil(Math.sqrt(n));
    this._hullPrev = new Uint32Array(n);
    this._hullNext = new Uint32Array(n);
    this._hullTri = new Uint32Array(n);
    this._hullHash = new Int32Array(this._hashSize).fill(-1);
    this._ids = new Uint32Array(n);
    this._dists = new Float64Array(n);
    this.update();
  }
  update() {
    const { coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash } = this;
    const n = coords.length >> 1;
    let minX = Infinity;
    let minY = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;
    for (let i = 0; i < n; i++) {
      const x = coords[2 * i];
      const y = coords[2 * i + 1];
      if (x < minX)
        minX = x;
      if (y < minY)
        minY = y;
      if (x > maxX)
        maxX = x;
      if (y > maxY)
        maxY = y;
      this._ids[i] = i;
    }
    const cx = (minX + maxX) / 2;
    const cy = (minY + maxY) / 2;
    let minDist = Infinity;
    let i0, i1, i2;
    for (let i = 0; i < n; i++) {
      const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);
      if (d < minDist) {
        i0 = i;
        minDist = d;
      }
    }
    const i0x = coords[2 * i0];
    const i0y = coords[2 * i0 + 1];
    minDist = Infinity;
    for (let i = 0; i < n; i++) {
      if (i === i0)
        continue;
      const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);
      if (d < minDist && d > 0) {
        i1 = i;
        minDist = d;
      }
    }
    let i1x = coords[2 * i1];
    let i1y = coords[2 * i1 + 1];
    let minRadius = Infinity;
    for (let i = 0; i < n; i++) {
      if (i === i0 || i === i1)
        continue;
      const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);
      if (r < minRadius) {
        i2 = i;
        minRadius = r;
      }
    }
    let i2x = coords[2 * i2];
    let i2y = coords[2 * i2 + 1];
    if (minRadius === Infinity) {
      for (let i = 0; i < n; i++) {
        this._dists[i] = coords[2 * i] - coords[0] || coords[2 * i + 1] - coords[1];
      }
      quicksort(this._ids, this._dists, 0, n - 1);
      const hull = new Uint32Array(n);
      let j = 0;
      for (let i = 0, d0 = -Infinity; i < n; i++) {
        const id = this._ids[i];
        if (this._dists[id] > d0) {
          hull[j++] = id;
          d0 = this._dists[id];
        }
      }
      this.hull = hull.subarray(0, j);
      this.triangles = new Uint32Array(0);
      this.halfedges = new Uint32Array(0);
      return;
    }
    if (orient2d(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {
      const i = i1;
      const x = i1x;
      const y = i1y;
      i1 = i2;
      i1x = i2x;
      i1y = i2y;
      i2 = i;
      i2x = x;
      i2y = y;
    }
    const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
    this._cx = center.x;
    this._cy = center.y;
    for (let i = 0; i < n; i++) {
      this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);
    }
    quicksort(this._ids, this._dists, 0, n - 1);
    this._hullStart = i0;
    let hullSize = 3;
    hullNext[i0] = hullPrev[i2] = i1;
    hullNext[i1] = hullPrev[i0] = i2;
    hullNext[i2] = hullPrev[i1] = i0;
    hullTri[i0] = 0;
    hullTri[i1] = 1;
    hullTri[i2] = 2;
    hullHash.fill(-1);
    hullHash[this._hashKey(i0x, i0y)] = i0;
    hullHash[this._hashKey(i1x, i1y)] = i1;
    hullHash[this._hashKey(i2x, i2y)] = i2;
    this.trianglesLen = 0;
    this._addTriangle(i0, i1, i2, -1, -1, -1);
    for (let k = 0, xp, yp; k < this._ids.length; k++) {
      const i = this._ids[k];
      const x = coords[2 * i];
      const y = coords[2 * i + 1];
      if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON)
        continue;
      xp = x;
      yp = y;
      if (i === i0 || i === i1 || i === i2)
        continue;
      let start = 0;
      for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {
        start = hullHash[(key + j) % this._hashSize];
        if (start !== -1 && start !== hullNext[start])
          break;
      }
      start = hullPrev[start];
      let e = start, q;
      while (q = hullNext[e], orient2d(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1]) >= 0) {
        e = q;
        if (e === start) {
          e = -1;
          break;
        }
      }
      if (e === -1)
        continue;
      let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);
      hullTri[i] = this._legalize(t + 2);
      hullTri[e] = t;
      hullSize++;
      let n2 = hullNext[e];
      while (q = hullNext[n2], orient2d(x, y, coords[2 * n2], coords[2 * n2 + 1], coords[2 * q], coords[2 * q + 1]) < 0) {
        t = this._addTriangle(n2, i, q, hullTri[i], -1, hullTri[n2]);
        hullTri[i] = this._legalize(t + 2);
        hullNext[n2] = n2;
        hullSize--;
        n2 = q;
      }
      if (e === start) {
        while (q = hullPrev[e], orient2d(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1]) < 0) {
          t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);
          this._legalize(t + 2);
          hullTri[q] = t;
          hullNext[e] = e;
          hullSize--;
          e = q;
        }
      }
      this._hullStart = hullPrev[i] = e;
      hullNext[e] = hullPrev[n2] = i;
      hullNext[i] = n2;
      hullHash[this._hashKey(x, y)] = i;
      hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;
    }
    this.hull = new Uint32Array(hullSize);
    for (let i = 0, e = this._hullStart; i < hullSize; i++) {
      this.hull[i] = e;
      e = hullNext[e];
    }
    this.triangles = this._triangles.subarray(0, this.trianglesLen);
    this.halfedges = this._halfedges.subarray(0, this.trianglesLen);
  }
  _hashKey(x, y) {
    return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;
  }
  _legalize(a) {
    const { _triangles: triangles, _halfedges: halfedges, coords } = this;
    let i = 0;
    let ar = 0;
    while (true) {
      const b = halfedges[a];
      const a0 = a - a % 3;
      ar = a0 + (a + 2) % 3;
      if (b === -1) {
        if (i === 0)
          break;
        a = EDGE_STACK[--i];
        continue;
      }
      const b0 = b - b % 3;
      const al = a0 + (a + 1) % 3;
      const bl = b0 + (b + 2) % 3;
      const p02 = triangles[ar];
      const pr = triangles[a];
      const pl = triangles[al];
      const p1 = triangles[bl];
      const illegal = inCircle(coords[2 * p02], coords[2 * p02 + 1], coords[2 * pr], coords[2 * pr + 1], coords[2 * pl], coords[2 * pl + 1], coords[2 * p1], coords[2 * p1 + 1]);
      if (illegal) {
        triangles[a] = p1;
        triangles[b] = p02;
        const hbl = halfedges[bl];
        if (hbl === -1) {
          let e = this._hullStart;
          do {
            if (this._hullTri[e] === bl) {
              this._hullTri[e] = a;
              break;
            }
            e = this._hullPrev[e];
          } while (e !== this._hullStart);
        }
        this._link(a, hbl);
        this._link(b, halfedges[ar]);
        this._link(ar, bl);
        const br = b0 + (b + 1) % 3;
        if (i < EDGE_STACK.length) {
          EDGE_STACK[i++] = br;
        }
      } else {
        if (i === 0)
          break;
        a = EDGE_STACK[--i];
      }
    }
    return ar;
  }
  _link(a, b) {
    this._halfedges[a] = b;
    if (b !== -1)
      this._halfedges[b] = a;
  }
  _addTriangle(i0, i1, i2, a, b, c) {
    const t = this.trianglesLen;
    this._triangles[t] = i0;
    this._triangles[t + 1] = i1;
    this._triangles[t + 2] = i2;
    this._link(t, a);
    this._link(t + 1, b);
    this._link(t + 2, c);
    this.trianglesLen += 3;
    return t;
  }
};
function pseudoAngle(dx, dy) {
  const p = dx / (Math.abs(dx) + Math.abs(dy));
  return (dy > 0 ? 3 - p : 1 + p) / 4;
}
function dist(ax, ay, bx, by) {
  const dx = ax - bx;
  const dy = ay - by;
  return dx * dx + dy * dy;
}
function inCircle(ax, ay, bx, by, cx, cy, px, py) {
  const dx = ax - px;
  const dy = ay - py;
  const ex = bx - px;
  const ey = by - py;
  const fx = cx - px;
  const fy = cy - py;
  const ap = dx * dx + dy * dy;
  const bp = ex * ex + ey * ey;
  const cp = fx * fx + fy * fy;
  return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;
}
function circumradius(ax, ay, bx, by, cx, cy) {
  const dx = bx - ax;
  const dy = by - ay;
  const ex = cx - ax;
  const ey = cy - ay;
  const bl = dx * dx + dy * dy;
  const cl = ex * ex + ey * ey;
  const d = 0.5 / (dx * ey - dy * ex);
  const x = (ey * bl - dy * cl) * d;
  const y = (dx * cl - ex * bl) * d;
  return x * x + y * y;
}
function circumcenter(ax, ay, bx, by, cx, cy) {
  const dx = bx - ax;
  const dy = by - ay;
  const ex = cx - ax;
  const ey = cy - ay;
  const bl = dx * dx + dy * dy;
  const cl = ex * ex + ey * ey;
  const d = 0.5 / (dx * ey - dy * ex);
  const x = ax + (ey * bl - dy * cl) * d;
  const y = ay + (dx * cl - ex * bl) * d;
  return { x, y };
}
function quicksort(ids, dists, left, right) {
  if (right - left <= 20) {
    for (let i = left + 1; i <= right; i++) {
      const temp2 = ids[i];
      const tempDist = dists[temp2];
      let j = i - 1;
      while (j >= left && dists[ids[j]] > tempDist)
        ids[j + 1] = ids[j--];
      ids[j + 1] = temp2;
    }
  } else {
    const median = left + right >> 1;
    let i = left + 1;
    let j = right;
    swap(ids, median, i);
    if (dists[ids[left]] > dists[ids[right]])
      swap(ids, left, right);
    if (dists[ids[i]] > dists[ids[right]])
      swap(ids, i, right);
    if (dists[ids[left]] > dists[ids[i]])
      swap(ids, left, i);
    const temp2 = ids[i];
    const tempDist = dists[temp2];
    while (true) {
      do
        i++;
      while (dists[ids[i]] < tempDist);
      do
        j--;
      while (dists[ids[j]] > tempDist);
      if (j < i)
        break;
      swap(ids, i, j);
    }
    ids[left + 1] = ids[j];
    ids[j] = temp2;
    if (right - i + 1 >= j - left) {
      quicksort(ids, dists, i, right);
      quicksort(ids, dists, left, j - 1);
    } else {
      quicksort(ids, dists, left, j - 1);
      quicksort(ids, dists, i, right);
    }
  }
}
function swap(arr, i, j) {
  const tmp = arr[i];
  arr[i] = arr[j];
  arr[j] = tmp;
}
function defaultGetX(p) {
  return p[0];
}
function defaultGetY(p) {
  return p[1];
}

// node_modules/@turf/helpers/dist/es/index.js
var earthRadius = 63710088e-1;
var factors = {
  centimeters: earthRadius * 100,
  centimetres: earthRadius * 100,
  degrees: earthRadius / 111325,
  feet: earthRadius * 3.28084,
  inches: earthRadius * 39.37,
  kilometers: earthRadius / 1e3,
  kilometres: earthRadius / 1e3,
  meters: earthRadius,
  metres: earthRadius,
  miles: earthRadius / 1609.344,
  millimeters: earthRadius * 1e3,
  millimetres: earthRadius * 1e3,
  nauticalmiles: earthRadius / 1852,
  radians: 1,
  yards: earthRadius * 1.0936
};
var unitsFactors = {
  centimeters: 100,
  centimetres: 100,
  degrees: 1 / 111325,
  feet: 3.28084,
  inches: 39.37,
  kilometers: 1 / 1e3,
  kilometres: 1 / 1e3,
  meters: 1,
  metres: 1,
  miles: 1 / 1609.344,
  millimeters: 1e3,
  millimetres: 1e3,
  nauticalmiles: 1 / 1852,
  radians: 1 / earthRadius,
  yards: 1.0936133
};

// node_modules/@turf/invariant/dist/es/index.js
function getCoord(coord) {
  if (!coord) {
    throw new Error("coord is required");
  }
  if (!Array.isArray(coord)) {
    if (coord.type === "Feature" && coord.geometry !== null && coord.geometry.type === "Point") {
      return coord.geometry.coordinates;
    }
    if (coord.type === "Point") {
      return coord.coordinates;
    }
  }
  if (Array.isArray(coord) && coord.length >= 2 && !Array.isArray(coord[0]) && !Array.isArray(coord[1])) {
    return coord;
  }
  throw new Error("coord must be GeoJSON Point or an Array of numbers");
}
function getGeom(geojson) {
  if (geojson.type === "Feature") {
    return geojson.geometry;
  }
  return geojson;
}

// node_modules/@turf/boolean-point-in-polygon/dist/es/index.js
function booleanPointInPolygon(point3, polygon, options) {
  if (options === void 0) {
    options = {};
  }
  if (!point3) {
    throw new Error("point is required");
  }
  if (!polygon) {
    throw new Error("polygon is required");
  }
  var pt = getCoord(point3);
  var geom = getGeom(polygon);
  var type = geom.type;
  var bbox = polygon.bbox;
  var polys = geom.coordinates;
  if (bbox && inBBox(pt, bbox) === false) {
    return false;
  }
  if (type === "Polygon") {
    polys = [polys];
  }
  var insidePoly = false;
  for (var i = 0; i < polys.length && !insidePoly; i++) {
    if (inRing(pt, polys[i][0], options.ignoreBoundary)) {
      var inHole = false;
      var k = 1;
      while (k < polys[i].length && !inHole) {
        if (inRing(pt, polys[i][k], !options.ignoreBoundary)) {
          inHole = true;
        }
        k++;
      }
      if (!inHole) {
        insidePoly = true;
      }
    }
  }
  return insidePoly;
}
function inRing(pt, ring, ignoreBoundary) {
  var isInside = false;
  if (ring[0][0] === ring[ring.length - 1][0] && ring[0][1] === ring[ring.length - 1][1]) {
    ring = ring.slice(0, ring.length - 1);
  }
  for (var i = 0, j = ring.length - 1; i < ring.length; j = i++) {
    var xi = ring[i][0];
    var yi = ring[i][1];
    var xj = ring[j][0];
    var yj = ring[j][1];
    var onBoundary = pt[1] * (xi - xj) + yi * (xj - pt[0]) + yj * (pt[0] - xi) === 0 && (xi - pt[0]) * (xj - pt[0]) <= 0 && (yi - pt[1]) * (yj - pt[1]) <= 0;
    if (onBoundary) {
      return !ignoreBoundary;
    }
    var intersect = yi > pt[1] !== yj > pt[1] && pt[0] < (xj - xi) * (pt[1] - yi) / (yj - yi) + xi;
    if (intersect) {
      isInside = !isInside;
    }
  }
  return isInside;
}
function inBBox(pt, bbox) {
  return bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1];
}

// node_modules/d3-delaunay/node_modules/delaunator/index.js
var EPSILON2 = Math.pow(2, -52);
var EDGE_STACK2 = new Uint32Array(512);
var Delaunator2 = class {
  static from(points, getX = defaultGetX2, getY = defaultGetY2) {
    const n = points.length;
    const coords = new Float64Array(n * 2);
    for (let i = 0; i < n; i++) {
      const p = points[i];
      coords[2 * i] = getX(p);
      coords[2 * i + 1] = getY(p);
    }
    return new Delaunator2(coords);
  }
  constructor(coords) {
    const n = coords.length >> 1;
    if (n > 0 && typeof coords[0] !== "number")
      throw new Error("Expected coords to contain numbers.");
    this.coords = coords;
    const maxTriangles = Math.max(2 * n - 5, 0);
    this._triangles = new Uint32Array(maxTriangles * 3);
    this._halfedges = new Int32Array(maxTriangles * 3);
    this._hashSize = Math.ceil(Math.sqrt(n));
    this._hullPrev = new Uint32Array(n);
    this._hullNext = new Uint32Array(n);
    this._hullTri = new Uint32Array(n);
    this._hullHash = new Int32Array(this._hashSize).fill(-1);
    this._ids = new Uint32Array(n);
    this._dists = new Float64Array(n);
    this.update();
  }
  update() {
    const { coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash } = this;
    const n = coords.length >> 1;
    let minX = Infinity;
    let minY = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;
    for (let i = 0; i < n; i++) {
      const x = coords[2 * i];
      const y = coords[2 * i + 1];
      if (x < minX)
        minX = x;
      if (y < minY)
        minY = y;
      if (x > maxX)
        maxX = x;
      if (y > maxY)
        maxY = y;
      this._ids[i] = i;
    }
    const cx = (minX + maxX) / 2;
    const cy = (minY + maxY) / 2;
    let minDist = Infinity;
    let i0, i1, i2;
    for (let i = 0; i < n; i++) {
      const d = dist2(cx, cy, coords[2 * i], coords[2 * i + 1]);
      if (d < minDist) {
        i0 = i;
        minDist = d;
      }
    }
    const i0x = coords[2 * i0];
    const i0y = coords[2 * i0 + 1];
    minDist = Infinity;
    for (let i = 0; i < n; i++) {
      if (i === i0)
        continue;
      const d = dist2(i0x, i0y, coords[2 * i], coords[2 * i + 1]);
      if (d < minDist && d > 0) {
        i1 = i;
        minDist = d;
      }
    }
    let i1x = coords[2 * i1];
    let i1y = coords[2 * i1 + 1];
    let minRadius = Infinity;
    for (let i = 0; i < n; i++) {
      if (i === i0 || i === i1)
        continue;
      const r = circumradius2(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);
      if (r < minRadius) {
        i2 = i;
        minRadius = r;
      }
    }
    let i2x = coords[2 * i2];
    let i2y = coords[2 * i2 + 1];
    if (minRadius === Infinity) {
      for (let i = 0; i < n; i++) {
        this._dists[i] = coords[2 * i] - coords[0] || coords[2 * i + 1] - coords[1];
      }
      quicksort2(this._ids, this._dists, 0, n - 1);
      const hull = new Uint32Array(n);
      let j = 0;
      for (let i = 0, d0 = -Infinity; i < n; i++) {
        const id = this._ids[i];
        if (this._dists[id] > d0) {
          hull[j++] = id;
          d0 = this._dists[id];
        }
      }
      this.hull = hull.subarray(0, j);
      this.triangles = new Uint32Array(0);
      this.halfedges = new Uint32Array(0);
      return;
    }
    if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {
      const i = i1;
      const x = i1x;
      const y = i1y;
      i1 = i2;
      i1x = i2x;
      i1y = i2y;
      i2 = i;
      i2x = x;
      i2y = y;
    }
    const center = circumcenter2(i0x, i0y, i1x, i1y, i2x, i2y);
    this._cx = center.x;
    this._cy = center.y;
    for (let i = 0; i < n; i++) {
      this._dists[i] = dist2(coords[2 * i], coords[2 * i + 1], center.x, center.y);
    }
    quicksort2(this._ids, this._dists, 0, n - 1);
    this._hullStart = i0;
    let hullSize = 3;
    hullNext[i0] = hullPrev[i2] = i1;
    hullNext[i1] = hullPrev[i0] = i2;
    hullNext[i2] = hullPrev[i1] = i0;
    hullTri[i0] = 0;
    hullTri[i1] = 1;
    hullTri[i2] = 2;
    hullHash.fill(-1);
    hullHash[this._hashKey(i0x, i0y)] = i0;
    hullHash[this._hashKey(i1x, i1y)] = i1;
    hullHash[this._hashKey(i2x, i2y)] = i2;
    this.trianglesLen = 0;
    this._addTriangle(i0, i1, i2, -1, -1, -1);
    for (let k = 0, xp, yp; k < this._ids.length; k++) {
      const i = this._ids[k];
      const x = coords[2 * i];
      const y = coords[2 * i + 1];
      if (k > 0 && Math.abs(x - xp) <= EPSILON2 && Math.abs(y - yp) <= EPSILON2)
        continue;
      xp = x;
      yp = y;
      if (i === i0 || i === i1 || i === i2)
        continue;
      let start = 0;
      for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {
        start = hullHash[(key + j) % this._hashSize];
        if (start !== -1 && start !== hullNext[start])
          break;
      }
      start = hullPrev[start];
      let e = start, q;
      while (q = hullNext[e], !orient(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1])) {
        e = q;
        if (e === start) {
          e = -1;
          break;
        }
      }
      if (e === -1)
        continue;
      let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);
      hullTri[i] = this._legalize(t + 2);
      hullTri[e] = t;
      hullSize++;
      let n2 = hullNext[e];
      while (q = hullNext[n2], orient(x, y, coords[2 * n2], coords[2 * n2 + 1], coords[2 * q], coords[2 * q + 1])) {
        t = this._addTriangle(n2, i, q, hullTri[i], -1, hullTri[n2]);
        hullTri[i] = this._legalize(t + 2);
        hullNext[n2] = n2;
        hullSize--;
        n2 = q;
      }
      if (e === start) {
        while (q = hullPrev[e], orient(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1])) {
          t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);
          this._legalize(t + 2);
          hullTri[q] = t;
          hullNext[e] = e;
          hullSize--;
          e = q;
        }
      }
      this._hullStart = hullPrev[i] = e;
      hullNext[e] = hullPrev[n2] = i;
      hullNext[i] = n2;
      hullHash[this._hashKey(x, y)] = i;
      hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;
    }
    this.hull = new Uint32Array(hullSize);
    for (let i = 0, e = this._hullStart; i < hullSize; i++) {
      this.hull[i] = e;
      e = hullNext[e];
    }
    this.triangles = this._triangles.subarray(0, this.trianglesLen);
    this.halfedges = this._halfedges.subarray(0, this.trianglesLen);
  }
  _hashKey(x, y) {
    return Math.floor(pseudoAngle2(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;
  }
  _legalize(a) {
    const { _triangles: triangles, _halfedges: halfedges, coords } = this;
    let i = 0;
    let ar = 0;
    while (true) {
      const b = halfedges[a];
      const a0 = a - a % 3;
      ar = a0 + (a + 2) % 3;
      if (b === -1) {
        if (i === 0)
          break;
        a = EDGE_STACK2[--i];
        continue;
      }
      const b0 = b - b % 3;
      const al = a0 + (a + 1) % 3;
      const bl = b0 + (b + 2) % 3;
      const p02 = triangles[ar];
      const pr = triangles[a];
      const pl = triangles[al];
      const p1 = triangles[bl];
      const illegal = inCircle2(coords[2 * p02], coords[2 * p02 + 1], coords[2 * pr], coords[2 * pr + 1], coords[2 * pl], coords[2 * pl + 1], coords[2 * p1], coords[2 * p1 + 1]);
      if (illegal) {
        triangles[a] = p1;
        triangles[b] = p02;
        const hbl = halfedges[bl];
        if (hbl === -1) {
          let e = this._hullStart;
          do {
            if (this._hullTri[e] === bl) {
              this._hullTri[e] = a;
              break;
            }
            e = this._hullPrev[e];
          } while (e !== this._hullStart);
        }
        this._link(a, hbl);
        this._link(b, halfedges[ar]);
        this._link(ar, bl);
        const br = b0 + (b + 1) % 3;
        if (i < EDGE_STACK2.length) {
          EDGE_STACK2[i++] = br;
        }
      } else {
        if (i === 0)
          break;
        a = EDGE_STACK2[--i];
      }
    }
    return ar;
  }
  _link(a, b) {
    this._halfedges[a] = b;
    if (b !== -1)
      this._halfedges[b] = a;
  }
  _addTriangle(i0, i1, i2, a, b, c) {
    const t = this.trianglesLen;
    this._triangles[t] = i0;
    this._triangles[t + 1] = i1;
    this._triangles[t + 2] = i2;
    this._link(t, a);
    this._link(t + 1, b);
    this._link(t + 2, c);
    this.trianglesLen += 3;
    return t;
  }
};
function pseudoAngle2(dx, dy) {
  const p = dx / (Math.abs(dx) + Math.abs(dy));
  return (dy > 0 ? 3 - p : 1 + p) / 4;
}
function dist2(ax, ay, bx, by) {
  const dx = ax - bx;
  const dy = ay - by;
  return dx * dx + dy * dy;
}
function orientIfSure(px, py, rx, ry, qx, qy) {
  const l = (ry - py) * (qx - px);
  const r = (rx - px) * (qy - py);
  return Math.abs(l - r) >= 33306690738754716e-32 * Math.abs(l + r) ? l - r : 0;
}
function orient(rx, ry, qx, qy, px, py) {
  const sign4 = orientIfSure(px, py, rx, ry, qx, qy) || orientIfSure(rx, ry, qx, qy, px, py) || orientIfSure(qx, qy, px, py, rx, ry);
  return sign4 < 0;
}
function inCircle2(ax, ay, bx, by, cx, cy, px, py) {
  const dx = ax - px;
  const dy = ay - py;
  const ex = bx - px;
  const ey = by - py;
  const fx = cx - px;
  const fy = cy - py;
  const ap = dx * dx + dy * dy;
  const bp = ex * ex + ey * ey;
  const cp = fx * fx + fy * fy;
  return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;
}
function circumradius2(ax, ay, bx, by, cx, cy) {
  const dx = bx - ax;
  const dy = by - ay;
  const ex = cx - ax;
  const ey = cy - ay;
  const bl = dx * dx + dy * dy;
  const cl = ex * ex + ey * ey;
  const d = 0.5 / (dx * ey - dy * ex);
  const x = (ey * bl - dy * cl) * d;
  const y = (dx * cl - ex * bl) * d;
  return x * x + y * y;
}
function circumcenter2(ax, ay, bx, by, cx, cy) {
  const dx = bx - ax;
  const dy = by - ay;
  const ex = cx - ax;
  const ey = cy - ay;
  const bl = dx * dx + dy * dy;
  const cl = ex * ex + ey * ey;
  const d = 0.5 / (dx * ey - dy * ex);
  const x = ax + (ey * bl - dy * cl) * d;
  const y = ay + (dx * cl - ex * bl) * d;
  return { x, y };
}
function quicksort2(ids, dists, left, right) {
  if (right - left <= 20) {
    for (let i = left + 1; i <= right; i++) {
      const temp2 = ids[i];
      const tempDist = dists[temp2];
      let j = i - 1;
      while (j >= left && dists[ids[j]] > tempDist)
        ids[j + 1] = ids[j--];
      ids[j + 1] = temp2;
    }
  } else {
    const median = left + right >> 1;
    let i = left + 1;
    let j = right;
    swap2(ids, median, i);
    if (dists[ids[left]] > dists[ids[right]])
      swap2(ids, left, right);
    if (dists[ids[i]] > dists[ids[right]])
      swap2(ids, i, right);
    if (dists[ids[left]] > dists[ids[i]])
      swap2(ids, left, i);
    const temp2 = ids[i];
    const tempDist = dists[temp2];
    while (true) {
      do
        i++;
      while (dists[ids[i]] < tempDist);
      do
        j--;
      while (dists[ids[j]] > tempDist);
      if (j < i)
        break;
      swap2(ids, i, j);
    }
    ids[left + 1] = ids[j];
    ids[j] = temp2;
    if (right - i + 1 >= j - left) {
      quicksort2(ids, dists, i, right);
      quicksort2(ids, dists, left, j - 1);
    } else {
      quicksort2(ids, dists, left, j - 1);
      quicksort2(ids, dists, i, right);
    }
  }
}
function swap2(arr, i, j) {
  const tmp = arr[i];
  arr[i] = arr[j];
  arr[j] = tmp;
}
function defaultGetX2(p) {
  return p[0];
}
function defaultGetY2(p) {
  return p[1];
}

// node_modules/d3-delaunay/src/path.js
var epsilon4 = 1e-6;
var Path = class {
  constructor() {
    this._x0 = this._y0 = this._x1 = this._y1 = null;
    this._ = "";
  }
  moveTo(x, y) {
    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;
  }
  closePath() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  }
  lineTo(x, y) {
    this._ += `L${this._x1 = +x},${this._y1 = +y}`;
  }
  arc(x, y, r) {
    x = +x, y = +y, r = +r;
    const x04 = x + r;
    const y03 = y;
    if (r < 0)
      throw new Error("negative radius");
    if (this._x1 === null)
      this._ += `M${x04},${y03}`;
    else if (Math.abs(this._x1 - x04) > epsilon4 || Math.abs(this._y1 - y03) > epsilon4)
      this._ += "L" + x04 + "," + y03;
    if (!r)
      return;
    this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x04},${this._y1 = y03}`;
  }
  rect(x, y, w, h) {
    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;
  }
  value() {
    return this._ || null;
  }
};

// node_modules/d3-delaunay/src/polygon.js
var Polygon = class {
  constructor() {
    this._ = [];
  }
  moveTo(x, y) {
    this._.push([x, y]);
  }
  closePath() {
    this._.push(this._[0].slice());
  }
  lineTo(x, y) {
    this._.push([x, y]);
  }
  value() {
    return this._.length ? this._ : null;
  }
};

// node_modules/d3-delaunay/src/voronoi.js
var Voronoi = class {
  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {
    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin)))
      throw new Error("invalid bounds");
    this.delaunay = delaunay;
    this._circumcenters = new Float64Array(delaunay.points.length * 2);
    this.vectors = new Float64Array(delaunay.points.length * 2);
    this.xmax = xmax, this.xmin = xmin;
    this.ymax = ymax, this.ymin = ymin;
    this._init();
  }
  update() {
    this.delaunay.update();
    this._init();
    return this;
  }
  _init() {
    const { delaunay: { points, hull, triangles }, vectors } = this;
    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);
    for (let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {
      const t15 = triangles[i] * 2;
      const t23 = triangles[i + 1] * 2;
      const t33 = triangles[i + 2] * 2;
      const x14 = points[t15];
      const y13 = points[t15 + 1];
      const x2 = points[t23];
      const y2 = points[t23 + 1];
      const x3 = points[t33];
      const y3 = points[t33 + 1];
      const dx = x2 - x14;
      const dy = y2 - y13;
      const ex = x3 - x14;
      const ey = y3 - y13;
      const bl = dx * dx + dy * dy;
      const cl = ex * ex + ey * ey;
      const ab4 = (dx * ey - dy * ex) * 2;
      if (!ab4) {
        x = (x14 + x3) / 2 - 1e8 * ey;
        y = (y13 + y3) / 2 + 1e8 * ex;
      } else if (Math.abs(ab4) < 1e-8) {
        x = (x14 + x3) / 2;
        y = (y13 + y3) / 2;
      } else {
        const d = 1 / ab4;
        x = x14 + (ey * bl - dy * cl) * d;
        y = y13 + (dx * cl - ex * bl) * d;
      }
      circumcenters[j] = x;
      circumcenters[j + 1] = y;
    }
    let h = hull[hull.length - 1];
    let p02, p1 = h * 4;
    let x04, x13 = points[2 * h];
    let y03, y12 = points[2 * h + 1];
    vectors.fill(0);
    for (let i = 0; i < hull.length; ++i) {
      h = hull[i];
      p02 = p1, x04 = x13, y03 = y12;
      p1 = h * 4, x13 = points[2 * h], y12 = points[2 * h + 1];
      vectors[p02 + 2] = vectors[p1] = y03 - y12;
      vectors[p02 + 3] = vectors[p1 + 1] = x13 - x04;
    }
  }
  render(context) {
    const buffer = context == null ? context = new Path() : void 0;
    const { delaunay: { halfedges, inedges, hull }, circumcenters, vectors } = this;
    if (hull.length <= 1)
      return null;
    for (let i = 0, n = halfedges.length; i < n; ++i) {
      const j = halfedges[i];
      if (j < i)
        continue;
      const ti = Math.floor(i / 3) * 2;
      const tj = Math.floor(j / 3) * 2;
      const xi = circumcenters[ti];
      const yi = circumcenters[ti + 1];
      const xj = circumcenters[tj];
      const yj = circumcenters[tj + 1];
      this._renderSegment(xi, yi, xj, yj, context);
    }
    let h0, h1 = hull[hull.length - 1];
    for (let i = 0; i < hull.length; ++i) {
      h0 = h1, h1 = hull[i];
      const t = Math.floor(inedges[h1] / 3) * 2;
      const x = circumcenters[t];
      const y = circumcenters[t + 1];
      const v2 = h0 * 4;
      const p = this._project(x, y, vectors[v2 + 2], vectors[v2 + 3]);
      if (p)
        this._renderSegment(x, y, p[0], p[1], context);
    }
    return buffer && buffer.value();
  }
  renderBounds(context) {
    const buffer = context == null ? context = new Path() : void 0;
    context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);
    return buffer && buffer.value();
  }
  renderCell(i, context) {
    const buffer = context == null ? context = new Path() : void 0;
    const points = this._clip(i);
    if (points === null || !points.length)
      return;
    context.moveTo(points[0], points[1]);
    let n = points.length;
    while (points[0] === points[n - 2] && points[1] === points[n - 1] && n > 1)
      n -= 2;
    for (let i2 = 2; i2 < n; i2 += 2) {
      if (points[i2] !== points[i2 - 2] || points[i2 + 1] !== points[i2 - 1])
        context.lineTo(points[i2], points[i2 + 1]);
    }
    context.closePath();
    return buffer && buffer.value();
  }
  *cellPolygons() {
    const { delaunay: { points } } = this;
    for (let i = 0, n = points.length / 2; i < n; ++i) {
      const cell = this.cellPolygon(i);
      if (cell)
        cell.index = i, yield cell;
    }
  }
  cellPolygon(i) {
    const polygon = new Polygon();
    this.renderCell(i, polygon);
    return polygon.value();
  }
  _renderSegment(x04, y03, x13, y12, context) {
    let S;
    const c0 = this._regioncode(x04, y03);
    const c1 = this._regioncode(x13, y12);
    if (c0 === 0 && c1 === 0) {
      context.moveTo(x04, y03);
      context.lineTo(x13, y12);
    } else if (S = this._clipSegment(x04, y03, x13, y12, c0, c1)) {
      context.moveTo(S[0], S[1]);
      context.lineTo(S[2], S[3]);
    }
  }
  contains(i, x, y) {
    if ((x = +x, x !== x) || (y = +y, y !== y))
      return false;
    return this.delaunay._step(i, x, y) === i;
  }
  *neighbors(i) {
    const ci = this._clip(i);
    if (ci)
      for (const j of this.delaunay.neighbors(i)) {
        const cj = this._clip(j);
        if (cj)
          loop:
            for (let ai = 0, li = ci.length; ai < li; ai += 2) {
              for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {
                if (ci[ai] == cj[aj] && ci[ai + 1] == cj[aj + 1] && ci[(ai + 2) % li] == cj[(aj + lj - 2) % lj] && ci[(ai + 3) % li] == cj[(aj + lj - 1) % lj]) {
                  yield j;
                  break loop;
                }
              }
            }
      }
  }
  _cell(i) {
    const { circumcenters, delaunay: { inedges, halfedges, triangles } } = this;
    const e0 = inedges[i];
    if (e0 === -1)
      return null;
    const points = [];
    let e = e0;
    do {
      const t = Math.floor(e / 3);
      points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);
      e = e % 3 === 2 ? e - 2 : e + 1;
      if (triangles[e] !== i)
        break;
      e = halfedges[e];
    } while (e !== e0 && e !== -1);
    return points;
  }
  _clip(i) {
    if (i === 0 && this.delaunay.hull.length === 1) {
      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
    }
    const points = this._cell(i);
    if (points === null)
      return null;
    const { vectors: V } = this;
    const v2 = i * 4;
    return V[v2] || V[v2 + 1] ? this._clipInfinite(i, points, V[v2], V[v2 + 1], V[v2 + 2], V[v2 + 3]) : this._clipFinite(i, points);
  }
  _clipFinite(i, points) {
    const n = points.length;
    let P = null;
    let x04, y03, x13 = points[n - 2], y12 = points[n - 1];
    let c0, c1 = this._regioncode(x13, y12);
    let e0, e1;
    for (let j = 0; j < n; j += 2) {
      x04 = x13, y03 = y12, x13 = points[j], y12 = points[j + 1];
      c0 = c1, c1 = this._regioncode(x13, y12);
      if (c0 === 0 && c1 === 0) {
        e0 = e1, e1 = 0;
        if (P)
          P.push(x13, y12);
        else
          P = [x13, y12];
      } else {
        let S, sx0, sy0, sx1, sy1;
        if (c0 === 0) {
          if ((S = this._clipSegment(x04, y03, x13, y12, c0, c1)) === null)
            continue;
          [sx0, sy0, sx1, sy1] = S;
        } else {
          if ((S = this._clipSegment(x13, y12, x04, y03, c1, c0)) === null)
            continue;
          [sx1, sy1, sx0, sy0] = S;
          e0 = e1, e1 = this._edgecode(sx0, sy0);
          if (e0 && e1)
            this._edge(i, e0, e1, P, P.length);
          if (P)
            P.push(sx0, sy0);
          else
            P = [sx0, sy0];
        }
        e0 = e1, e1 = this._edgecode(sx1, sy1);
        if (e0 && e1)
          this._edge(i, e0, e1, P, P.length);
        if (P)
          P.push(sx1, sy1);
        else
          P = [sx1, sy1];
      }
    }
    if (P) {
      e0 = e1, e1 = this._edgecode(P[0], P[1]);
      if (e0 && e1)
        this._edge(i, e0, e1, P, P.length);
    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
    }
    return P;
  }
  _clipSegment(x04, y03, x13, y12, c0, c1) {
    while (true) {
      if (c0 === 0 && c1 === 0)
        return [x04, y03, x13, y12];
      if (c0 & c1)
        return null;
      let x, y, c = c0 || c1;
      if (c & 8)
        x = x04 + (x13 - x04) * (this.ymax - y03) / (y12 - y03), y = this.ymax;
      else if (c & 4)
        x = x04 + (x13 - x04) * (this.ymin - y03) / (y12 - y03), y = this.ymin;
      else if (c & 2)
        y = y03 + (y12 - y03) * (this.xmax - x04) / (x13 - x04), x = this.xmax;
      else
        y = y03 + (y12 - y03) * (this.xmin - x04) / (x13 - x04), x = this.xmin;
      if (c0)
        x04 = x, y03 = y, c0 = this._regioncode(x04, y03);
      else
        x13 = x, y12 = y, c1 = this._regioncode(x13, y12);
    }
  }
  _clipInfinite(i, points, vx0, vy0, vxn, vyn) {
    let P = Array.from(points), p;
    if (p = this._project(P[0], P[1], vx0, vy0))
      P.unshift(p[0], p[1]);
    if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn))
      P.push(p[0], p[1]);
    if (P = this._clipFinite(i, P)) {
      for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {
        c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);
        if (c0 && c1)
          j = this._edge(i, c0, c1, P, j), n = P.length;
      }
    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
      P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];
    }
    return P;
  }
  _edge(i, e0, e1, P, j) {
    while (e0 !== e1) {
      let x, y;
      switch (e0) {
        case 5:
          e0 = 4;
          continue;
        case 4:
          e0 = 6, x = this.xmax, y = this.ymin;
          break;
        case 6:
          e0 = 2;
          continue;
        case 2:
          e0 = 10, x = this.xmax, y = this.ymax;
          break;
        case 10:
          e0 = 8;
          continue;
        case 8:
          e0 = 9, x = this.xmin, y = this.ymax;
          break;
        case 9:
          e0 = 1;
          continue;
        case 1:
          e0 = 5, x = this.xmin, y = this.ymin;
          break;
      }
      if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {
        P.splice(j, 0, x, y), j += 2;
      }
    }
    if (P.length > 4) {
      for (let i2 = 0; i2 < P.length; i2 += 2) {
        const j2 = (i2 + 2) % P.length, k = (i2 + 4) % P.length;
        if (P[i2] === P[j2] && P[j2] === P[k] || P[i2 + 1] === P[j2 + 1] && P[j2 + 1] === P[k + 1])
          P.splice(j2, 2), i2 -= 2;
      }
    }
    return j;
  }
  _project(x04, y03, vx, vy) {
    let t = Infinity, c, x, y;
    if (vy < 0) {
      if (y03 <= this.ymin)
        return null;
      if ((c = (this.ymin - y03) / vy) < t)
        y = this.ymin, x = x04 + (t = c) * vx;
    } else if (vy > 0) {
      if (y03 >= this.ymax)
        return null;
      if ((c = (this.ymax - y03) / vy) < t)
        y = this.ymax, x = x04 + (t = c) * vx;
    }
    if (vx > 0) {
      if (x04 >= this.xmax)
        return null;
      if ((c = (this.xmax - x04) / vx) < t)
        x = this.xmax, y = y03 + (t = c) * vy;
    } else if (vx < 0) {
      if (x04 <= this.xmin)
        return null;
      if ((c = (this.xmin - x04) / vx) < t)
        x = this.xmin, y = y03 + (t = c) * vy;
    }
    return [x, y];
  }
  _edgecode(x, y) {
    return (x === this.xmin ? 1 : x === this.xmax ? 2 : 0) | (y === this.ymin ? 4 : y === this.ymax ? 8 : 0);
  }
  _regioncode(x, y) {
    return (x < this.xmin ? 1 : x > this.xmax ? 2 : 0) | (y < this.ymin ? 4 : y > this.ymax ? 8 : 0);
  }
};

// node_modules/d3-delaunay/src/delaunay.js
var tau2 = 2 * Math.PI;
var pow3 = Math.pow;
function pointX(p) {
  return p[0];
}
function pointY(p) {
  return p[1];
}
function collinear(d) {
  const { triangles, coords } = d;
  for (let i = 0; i < triangles.length; i += 3) {
    const a = 2 * triangles[i], b = 2 * triangles[i + 1], c = 2 * triangles[i + 2], cross3 = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1]) - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);
    if (cross3 > 1e-10)
      return false;
  }
  return true;
}
function jitter(x, y, r) {
  return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];
}
var Delaunay = class {
  static from(points, fx = pointX, fy = pointY, that) {
    return new Delaunay("length" in points ? flatArray(points, fx, fy, that) : Float64Array.from(flatIterable(points, fx, fy, that)));
  }
  constructor(points) {
    this._delaunator = new Delaunator2(points);
    this.inedges = new Int32Array(points.length / 2);
    this._hullIndex = new Int32Array(points.length / 2);
    this.points = this._delaunator.coords;
    this._init();
  }
  update() {
    this._delaunator.update();
    this._init();
    return this;
  }
  _init() {
    const d = this._delaunator, points = this.points;
    if (d.hull && d.hull.length > 2 && collinear(d)) {
      this.collinear = Int32Array.from({ length: points.length / 2 }, (_, i) => i).sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]);
      const e = this.collinear[0], f = this.collinear[this.collinear.length - 1], bounds = [points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1]], r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);
      for (let i = 0, n = points.length / 2; i < n; ++i) {
        const p = jitter(points[2 * i], points[2 * i + 1], r);
        points[2 * i] = p[0];
        points[2 * i + 1] = p[1];
      }
      this._delaunator = new Delaunator2(points);
    } else {
      delete this.collinear;
    }
    const halfedges = this.halfedges = this._delaunator.halfedges;
    const hull = this.hull = this._delaunator.hull;
    const triangles = this.triangles = this._delaunator.triangles;
    const inedges = this.inedges.fill(-1);
    const hullIndex = this._hullIndex.fill(-1);
    for (let e = 0, n = halfedges.length; e < n; ++e) {
      const p = triangles[e % 3 === 2 ? e - 2 : e + 1];
      if (halfedges[e] === -1 || inedges[p] === -1)
        inedges[p] = e;
    }
    for (let i = 0, n = hull.length; i < n; ++i) {
      hullIndex[hull[i]] = i;
    }
    if (hull.length <= 2 && hull.length > 0) {
      this.triangles = new Int32Array(3).fill(-1);
      this.halfedges = new Int32Array(3).fill(-1);
      this.triangles[0] = hull[0];
      this.triangles[1] = hull[1];
      this.triangles[2] = hull[1];
      inedges[hull[0]] = 1;
      if (hull.length === 2)
        inedges[hull[1]] = 0;
    }
  }
  voronoi(bounds) {
    return new Voronoi(this, bounds);
  }
  *neighbors(i) {
    const { inedges, hull, _hullIndex, halfedges, triangles, collinear: collinear2 } = this;
    if (collinear2) {
      const l = collinear2.indexOf(i);
      if (l > 0)
        yield collinear2[l - 1];
      if (l < collinear2.length - 1)
        yield collinear2[l + 1];
      return;
    }
    const e0 = inedges[i];
    if (e0 === -1)
      return;
    let e = e0, p02 = -1;
    do {
      yield p02 = triangles[e];
      e = e % 3 === 2 ? e - 2 : e + 1;
      if (triangles[e] !== i)
        return;
      e = halfedges[e];
      if (e === -1) {
        const p = hull[(_hullIndex[i] + 1) % hull.length];
        if (p !== p02)
          yield p;
        return;
      }
    } while (e !== e0);
  }
  find(x, y, i = 0) {
    if ((x = +x, x !== x) || (y = +y, y !== y))
      return -1;
    const i0 = i;
    let c;
    while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0)
      i = c;
    return c;
  }
  _step(i, x, y) {
    const { inedges, hull, _hullIndex, halfedges, triangles, points } = this;
    if (inedges[i] === -1 || !points.length)
      return (i + 1) % (points.length >> 1);
    let c = i;
    let dc = pow3(x - points[i * 2], 2) + pow3(y - points[i * 2 + 1], 2);
    const e0 = inedges[i];
    let e = e0;
    do {
      let t = triangles[e];
      const dt = pow3(x - points[t * 2], 2) + pow3(y - points[t * 2 + 1], 2);
      if (dt < dc)
        dc = dt, c = t;
      e = e % 3 === 2 ? e - 2 : e + 1;
      if (triangles[e] !== i)
        break;
      e = halfedges[e];
      if (e === -1) {
        e = hull[(_hullIndex[i] + 1) % hull.length];
        if (e !== t) {
          if (pow3(x - points[e * 2], 2) + pow3(y - points[e * 2 + 1], 2) < dc)
            return e;
        }
        break;
      }
    } while (e !== e0);
    return c;
  }
  render(context) {
    const buffer = context == null ? context = new Path() : void 0;
    const { points, halfedges, triangles } = this;
    for (let i = 0, n = halfedges.length; i < n; ++i) {
      const j = halfedges[i];
      if (j < i)
        continue;
      const ti = triangles[i] * 2;
      const tj = triangles[j] * 2;
      context.moveTo(points[ti], points[ti + 1]);
      context.lineTo(points[tj], points[tj + 1]);
    }
    this.renderHull(context);
    return buffer && buffer.value();
  }
  renderPoints(context, r = 2) {
    const buffer = context == null ? context = new Path() : void 0;
    const { points } = this;
    for (let i = 0, n = points.length; i < n; i += 2) {
      const x = points[i], y = points[i + 1];
      context.moveTo(x + r, y);
      context.arc(x, y, r, 0, tau2);
    }
    return buffer && buffer.value();
  }
  renderHull(context) {
    const buffer = context == null ? context = new Path() : void 0;
    const { hull, points } = this;
    const h = hull[0] * 2, n = hull.length;
    context.moveTo(points[h], points[h + 1]);
    for (let i = 1; i < n; ++i) {
      const h2 = 2 * hull[i];
      context.lineTo(points[h2], points[h2 + 1]);
    }
    context.closePath();
    return buffer && buffer.value();
  }
  hullPolygon() {
    const polygon = new Polygon();
    this.renderHull(polygon);
    return polygon.value();
  }
  renderTriangle(i, context) {
    const buffer = context == null ? context = new Path() : void 0;
    const { points, triangles } = this;
    const t05 = triangles[i *= 3] * 2;
    const t15 = triangles[i + 1] * 2;
    const t23 = triangles[i + 2] * 2;
    context.moveTo(points[t05], points[t05 + 1]);
    context.lineTo(points[t15], points[t15 + 1]);
    context.lineTo(points[t23], points[t23 + 1]);
    context.closePath();
    return buffer && buffer.value();
  }
  *trianglePolygons() {
    const { triangles } = this;
    for (let i = 0, n = triangles.length / 3; i < n; ++i) {
      yield this.trianglePolygon(i);
    }
  }
  trianglePolygon(i) {
    const polygon = new Polygon();
    this.renderTriangle(i, polygon);
    return polygon.value();
  }
};
function flatArray(points, fx, fy, that) {
  const n = points.length;
  const array6 = new Float64Array(n * 2);
  for (let i = 0; i < n; ++i) {
    const p = points[i];
    array6[i * 2] = fx.call(that, p, i, points);
    array6[i * 2 + 1] = fy.call(that, p, i, points);
  }
  return array6;
}
function* flatIterable(points, fx, fy, that) {
  let i = 0;
  for (const p of points) {
    yield fx.call(that, p, i, points);
    yield fy.call(that, p, i, points);
    ++i;
  }
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/adder.js
function adder_default() {
  return new Adder2();
}
function Adder2() {
  this.reset();
}
Adder2.prototype = {
  constructor: Adder2,
  reset: function() {
    this.s = this.t = 0;
  },
  add: function(y) {
    add2(temp, y, this.t);
    add2(this, temp.s, this.s);
    if (this.s)
      this.t += temp.t;
    else
      this.s = temp.t;
  },
  valueOf: function() {
    return this.s;
  }
};
var temp = new Adder2();
function add2(adder, a, b) {
  var x = adder.s = a + b, bv = x - a, av = x - bv;
  adder.t = a - av + (b - bv);
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/math.js
var epsilon5 = 1e-6;
var epsilon23 = 1e-12;
var pi2 = Math.PI;
var halfPi2 = pi2 / 2;
var quarterPi2 = pi2 / 4;
var tau3 = pi2 * 2;
var degrees4 = 180 / pi2;
var radians3 = pi2 / 180;
var abs2 = Math.abs;
var atan3 = Math.atan;
var atan22 = Math.atan2;
var cos2 = Math.cos;
var exp2 = Math.exp;
var log3 = Math.log;
var sin2 = Math.sin;
var sign2 = Math.sign || function(x) {
  return x > 0 ? 1 : x < 0 ? -1 : 0;
};
var sqrt3 = Math.sqrt;
var tan2 = Math.tan;
function acos2(x) {
  return x > 1 ? 0 : x < -1 ? pi2 : Math.acos(x);
}
function asin2(x) {
  return x > 1 ? halfPi2 : x < -1 ? -halfPi2 : Math.asin(x);
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/noop.js
function noop2() {
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/stream.js
function streamGeometry2(geometry, stream) {
  if (geometry && streamGeometryType2.hasOwnProperty(geometry.type)) {
    streamGeometryType2[geometry.type](geometry, stream);
  }
}
var streamObjectType2 = {
  Feature: function(object3, stream) {
    streamGeometry2(object3.geometry, stream);
  },
  FeatureCollection: function(object3, stream) {
    var features = object3.features, i = -1, n = features.length;
    while (++i < n)
      streamGeometry2(features[i].geometry, stream);
  }
};
var streamGeometryType2 = {
  Sphere: function(object3, stream) {
    stream.sphere();
  },
  Point: function(object3, stream) {
    object3 = object3.coordinates;
    stream.point(object3[0], object3[1], object3[2]);
  },
  MultiPoint: function(object3, stream) {
    var coordinates3 = object3.coordinates, i = -1, n = coordinates3.length;
    while (++i < n)
      object3 = coordinates3[i], stream.point(object3[0], object3[1], object3[2]);
  },
  LineString: function(object3, stream) {
    streamLine2(object3.coordinates, stream, 0);
  },
  MultiLineString: function(object3, stream) {
    var coordinates3 = object3.coordinates, i = -1, n = coordinates3.length;
    while (++i < n)
      streamLine2(coordinates3[i], stream, 0);
  },
  Polygon: function(object3, stream) {
    streamPolygon2(object3.coordinates, stream);
  },
  MultiPolygon: function(object3, stream) {
    var coordinates3 = object3.coordinates, i = -1, n = coordinates3.length;
    while (++i < n)
      streamPolygon2(coordinates3[i], stream);
  },
  GeometryCollection: function(object3, stream) {
    var geometries = object3.geometries, i = -1, n = geometries.length;
    while (++i < n)
      streamGeometry2(geometries[i], stream);
  }
};
function streamLine2(coordinates3, stream, closed) {
  var i = -1, n = coordinates3.length - closed, coordinate;
  stream.lineStart();
  while (++i < n)
    coordinate = coordinates3[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
  stream.lineEnd();
}
function streamPolygon2(coordinates3, stream) {
  var i = -1, n = coordinates3.length;
  stream.polygonStart();
  while (++i < n)
    streamLine2(coordinates3[i], stream, 1);
  stream.polygonEnd();
}
function stream_default2(object3, stream) {
  if (object3 && streamObjectType2.hasOwnProperty(object3.type)) {
    streamObjectType2[object3.type](object3, stream);
  } else {
    streamGeometry2(object3, stream);
  }
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/area.js
var areaRingSum3 = adder_default();
var areaSum3 = adder_default();

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/cartesian.js
function spherical2(cartesian4) {
  return [atan22(cartesian4[1], cartesian4[0]), asin2(cartesian4[2])];
}
function cartesian2(spherical4) {
  var lambda = spherical4[0], phi = spherical4[1], cosPhi = cos2(phi);
  return [cosPhi * cos2(lambda), cosPhi * sin2(lambda), sin2(phi)];
}
function cartesianDot2(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
function cartesianCross2(a, b) {
  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
}
function cartesianAddInPlace2(a, b) {
  a[0] += b[0], a[1] += b[1], a[2] += b[2];
}
function cartesianScale2(vector, k) {
  return [vector[0] * k, vector[1] * k, vector[2] * k];
}
function cartesianNormalizeInPlace2(d) {
  var l = sqrt3(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
  d[0] /= l, d[1] /= l, d[2] /= l;
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/bounds.js
var deltaSum2 = adder_default();

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/centroid.js
var W0;
var W1;
var X0;
var Y0;
var Z0;
var X1;
var Y1;
var Z1;
var X2;
var Y2;
var Z2;
var lambda003;
var phi003;
var x02;
var y0;
var z0;
var centroidStream = {
  sphere: noop2,
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function() {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function() {
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  }
};
function centroidPoint(lambda, phi) {
  lambda *= radians3, phi *= radians3;
  var cosPhi = cos2(phi);
  centroidPointCartesian(cosPhi * cos2(lambda), cosPhi * sin2(lambda), sin2(phi));
}
function centroidPointCartesian(x, y, z) {
  ++W0;
  X0 += (x - X0) / W0;
  Y0 += (y - Y0) / W0;
  Z0 += (z - Z0) / W0;
}
function centroidLineStart() {
  centroidStream.point = centroidLinePointFirst;
}
function centroidLinePointFirst(lambda, phi) {
  lambda *= radians3, phi *= radians3;
  var cosPhi = cos2(phi);
  x02 = cosPhi * cos2(lambda);
  y0 = cosPhi * sin2(lambda);
  z0 = sin2(phi);
  centroidStream.point = centroidLinePoint;
  centroidPointCartesian(x02, y0, z0);
}
function centroidLinePoint(lambda, phi) {
  lambda *= radians3, phi *= radians3;
  var cosPhi = cos2(phi), x = cosPhi * cos2(lambda), y = cosPhi * sin2(lambda), z = sin2(phi), w = atan22(sqrt3((w = y0 * z - z0 * y) * w + (w = z0 * x - x02 * z) * w + (w = x02 * y - y0 * x) * w), x02 * x + y0 * y + z0 * z);
  W1 += w;
  X1 += w * (x02 + (x02 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x02, y0, z0);
}
function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}
function centroidRingStart() {
  centroidStream.point = centroidRingPointFirst;
}
function centroidRingEnd() {
  centroidRingPoint(lambda003, phi003);
  centroidStream.point = centroidPoint;
}
function centroidRingPointFirst(lambda, phi) {
  lambda003 = lambda, phi003 = phi;
  lambda *= radians3, phi *= radians3;
  centroidStream.point = centroidRingPoint;
  var cosPhi = cos2(phi);
  x02 = cosPhi * cos2(lambda);
  y0 = cosPhi * sin2(lambda);
  z0 = sin2(phi);
  centroidPointCartesian(x02, y0, z0);
}
function centroidRingPoint(lambda, phi) {
  lambda *= radians3, phi *= radians3;
  var cosPhi = cos2(phi), x = cosPhi * cos2(lambda), y = cosPhi * sin2(lambda), z = sin2(phi), cx = y0 * z - z0 * y, cy = z0 * x - x02 * z, cz = x02 * y - y0 * x, m = sqrt3(cx * cx + cy * cy + cz * cz), w = asin2(m), v2 = m && -w / m;
  X2 += v2 * cx;
  Y2 += v2 * cy;
  Z2 += v2 * cz;
  W1 += w;
  X1 += w * (x02 + (x02 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x02, y0, z0);
}
function centroid_default3(object3) {
  W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
  stream_default2(object3, centroidStream);
  var x = X2, y = Y2, z = Z2, m = x * x + y * y + z * z;
  if (m < epsilon23) {
    x = X1, y = Y1, z = Z1;
    if (W1 < epsilon5)
      x = X0, y = Y0, z = Z0;
    m = x * x + y * y + z * z;
    if (m < epsilon23)
      return [NaN, NaN];
  }
  return [atan22(y, x) * degrees4, asin2(z / sqrt3(m)) * degrees4];
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/compose.js
function compose_default2(a, b) {
  function compose(x, y) {
    return x = a(x, y), b(x[0], x[1]);
  }
  if (a.invert && b.invert)
    compose.invert = function(x, y) {
      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
    };
  return compose;
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/rotation.js
function rotationIdentity2(lambda, phi) {
  return [abs2(lambda) > pi2 ? lambda + Math.round(-lambda / tau3) * tau3 : lambda, phi];
}
rotationIdentity2.invert = rotationIdentity2;
function rotateRadians2(deltaLambda, deltaPhi, deltaGamma) {
  return (deltaLambda %= tau3) ? deltaPhi || deltaGamma ? compose_default2(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity2;
}
function forwardRotationLambda(deltaLambda) {
  return function(lambda, phi) {
    return lambda += deltaLambda, [lambda > pi2 ? lambda - tau3 : lambda < -pi2 ? lambda + tau3 : lambda, phi];
  };
}
function rotationLambda(deltaLambda) {
  var rotation = forwardRotationLambda(deltaLambda);
  rotation.invert = forwardRotationLambda(-deltaLambda);
  return rotation;
}
function rotationPhiGamma(deltaPhi, deltaGamma) {
  var cosDeltaPhi = cos2(deltaPhi), sinDeltaPhi = sin2(deltaPhi), cosDeltaGamma = cos2(deltaGamma), sinDeltaGamma = sin2(deltaGamma);
  function rotation(lambda, phi) {
    var cosPhi = cos2(phi), x = cos2(lambda) * cosPhi, y = sin2(lambda) * cosPhi, z = sin2(phi), k = z * cosDeltaPhi + x * sinDeltaPhi;
    return [
      atan22(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
      asin2(k * cosDeltaGamma + y * sinDeltaGamma)
    ];
  }
  rotation.invert = function(lambda, phi) {
    var cosPhi = cos2(phi), x = cos2(lambda) * cosPhi, y = sin2(lambda) * cosPhi, z = sin2(phi), k = z * cosDeltaGamma - y * sinDeltaGamma;
    return [
      atan22(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
      asin2(k * cosDeltaPhi - x * sinDeltaPhi)
    ];
  };
  return rotation;
}
function rotation_default2(rotate) {
  rotate = rotateRadians2(rotate[0] * radians3, rotate[1] * radians3, rotate.length > 2 ? rotate[2] * radians3 : 0);
  function forward(coordinates3) {
    coordinates3 = rotate(coordinates3[0] * radians3, coordinates3[1] * radians3);
    return coordinates3[0] *= degrees4, coordinates3[1] *= degrees4, coordinates3;
  }
  forward.invert = function(coordinates3) {
    coordinates3 = rotate.invert(coordinates3[0] * radians3, coordinates3[1] * radians3);
    return coordinates3[0] *= degrees4, coordinates3[1] *= degrees4, coordinates3;
  };
  return forward;
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/circle.js
function circleStream2(stream, radius, delta, direction, t05, t15) {
  if (!delta)
    return;
  var cosRadius = cos2(radius), sinRadius = sin2(radius), step = direction * delta;
  if (t05 == null) {
    t05 = radius + direction * tau3;
    t15 = radius - step / 2;
  } else {
    t05 = circleRadius(cosRadius, t05);
    t15 = circleRadius(cosRadius, t15);
    if (direction > 0 ? t05 < t15 : t05 > t15)
      t05 += direction * tau3;
  }
  for (var point3, t = t05; direction > 0 ? t > t15 : t < t15; t -= step) {
    point3 = spherical2([cosRadius, -sinRadius * cos2(t), -sinRadius * sin2(t)]);
    stream.point(point3[0], point3[1]);
  }
}
function circleRadius(cosRadius, point3) {
  point3 = cartesian2(point3), point3[0] -= cosRadius;
  cartesianNormalizeInPlace2(point3);
  var radius = acos2(-point3[1]);
  return ((-point3[2] < 0 ? -radius : radius) + tau3 - epsilon5) % tau3;
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/clip/buffer.js
function buffer_default2() {
  var lines = [], line;
  return {
    point: function(x, y, m) {
      line.push([x, y, m]);
    },
    lineStart: function() {
      lines.push(line = []);
    },
    lineEnd: noop2,
    rejoin: function() {
      if (lines.length > 1)
        lines.push(lines.pop().concat(lines.shift()));
    },
    result: function() {
      var result = lines;
      lines = [];
      line = null;
      return result;
    }
  };
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/pointEqual.js
function pointEqual_default2(a, b) {
  return abs2(a[0] - b[0]) < epsilon5 && abs2(a[1] - b[1]) < epsilon5;
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/clip/rejoin.js
function Intersection2(point3, points, other, entry) {
  this.x = point3;
  this.z = points;
  this.o = other;
  this.e = entry;
  this.v = false;
  this.n = this.p = null;
}
function rejoin_default2(segments, compareIntersection3, startInside, interpolate, stream) {
  var subject = [], clip = [], i, n;
  segments.forEach(function(segment) {
    if ((n2 = segment.length - 1) <= 0)
      return;
    var n2, p02 = segment[0], p1 = segment[n2], x;
    if (pointEqual_default2(p02, p1)) {
      if (!p02[2] && !p1[2]) {
        stream.lineStart();
        for (i = 0; i < n2; ++i)
          stream.point((p02 = segment[i])[0], p02[1]);
        stream.lineEnd();
        return;
      }
      p1[0] += 2 * epsilon5;
    }
    subject.push(x = new Intersection2(p02, segment, null, true));
    clip.push(x.o = new Intersection2(p02, null, x, false));
    subject.push(x = new Intersection2(p1, segment, null, false));
    clip.push(x.o = new Intersection2(p1, null, x, true));
  });
  if (!subject.length)
    return;
  clip.sort(compareIntersection3);
  link2(subject);
  link2(clip);
  for (i = 0, n = clip.length; i < n; ++i) {
    clip[i].e = startInside = !startInside;
  }
  var start = subject[0], points, point3;
  while (1) {
    var current = start, isSubject = true;
    while (current.v)
      if ((current = current.n) === start)
        return;
    points = current.z;
    stream.lineStart();
    do {
      current.v = current.o.v = true;
      if (current.e) {
        if (isSubject) {
          for (i = 0, n = points.length; i < n; ++i)
            stream.point((point3 = points[i])[0], point3[1]);
        } else {
          interpolate(current.x, current.n.x, 1, stream);
        }
        current = current.n;
      } else {
        if (isSubject) {
          points = current.p.z;
          for (i = points.length - 1; i >= 0; --i)
            stream.point((point3 = points[i])[0], point3[1]);
        } else {
          interpolate(current.x, current.p.x, -1, stream);
        }
        current = current.p;
      }
      current = current.o;
      points = current.z;
      isSubject = !isSubject;
    } while (!current.v);
    stream.lineEnd();
  }
}
function link2(array6) {
  if (!(n = array6.length))
    return;
  var n, i = 0, a = array6[0], b;
  while (++i < n) {
    a.n = b = array6[i];
    b.p = a;
    a = b;
  }
  a.n = b = array6[0];
  b.p = a;
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/polygonContains.js
var sum3 = adder_default();
function longitude2(point3) {
  if (abs2(point3[0]) <= pi2)
    return point3[0];
  else
    return sign2(point3[0]) * ((abs2(point3[0]) + pi2) % tau3 - pi2);
}
function polygonContains_default2(polygon, point3) {
  var lambda = longitude2(point3), phi = point3[1], sinPhi = sin2(phi), normal = [sin2(lambda), -cos2(lambda), 0], angle2 = 0, winding = 0;
  sum3.reset();
  if (sinPhi === 1)
    phi = halfPi2 + epsilon5;
  else if (sinPhi === -1)
    phi = -halfPi2 - epsilon5;
  for (var i = 0, n = polygon.length; i < n; ++i) {
    if (!(m = (ring = polygon[i]).length))
      continue;
    var ring, m, point0 = ring[m - 1], lambda05 = longitude2(point0), phi02 = point0[1] / 2 + quarterPi2, sinPhi04 = sin2(phi02), cosPhi04 = cos2(phi02);
    for (var j = 0; j < m; ++j, lambda05 = lambda12, sinPhi04 = sinPhi1, cosPhi04 = cosPhi1, point0 = point1) {
      var point1 = ring[j], lambda12 = longitude2(point1), phi12 = point1[1] / 2 + quarterPi2, sinPhi1 = sin2(phi12), cosPhi1 = cos2(phi12), delta = lambda12 - lambda05, sign4 = delta >= 0 ? 1 : -1, absDelta = sign4 * delta, antimeridian = absDelta > pi2, k = sinPhi04 * sinPhi1;
      sum3.add(atan22(k * sign4 * sin2(absDelta), cosPhi04 * cosPhi1 + k * cos2(absDelta)));
      angle2 += antimeridian ? delta + sign4 * tau3 : delta;
      if (antimeridian ^ lambda05 >= lambda ^ lambda12 >= lambda) {
        var arc = cartesianCross2(cartesian2(point0), cartesian2(point1));
        cartesianNormalizeInPlace2(arc);
        var intersection3 = cartesianCross2(normal, arc);
        cartesianNormalizeInPlace2(intersection3);
        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin2(intersection3[2]);
        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
          winding += antimeridian ^ delta >= 0 ? 1 : -1;
        }
      }
    }
  }
  return (angle2 < -epsilon5 || angle2 < epsilon5 && sum3 < -epsilon5) ^ winding & 1;
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/node_modules/d3-array/src/ascending.js
function ascending_default2(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/node_modules/d3-array/src/bisector.js
function bisector_default2(compare) {
  if (compare.length === 1)
    compare = ascendingComparator2(compare);
  return {
    left: function(a, x, lo, hi) {
      if (lo == null)
        lo = 0;
      if (hi == null)
        hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) < 0)
          lo = mid + 1;
        else
          hi = mid;
      }
      return lo;
    },
    right: function(a, x, lo, hi) {
      if (lo == null)
        lo = 0;
      if (hi == null)
        hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) > 0)
          hi = mid;
        else
          lo = mid + 1;
      }
      return lo;
    }
  };
}
function ascendingComparator2(f) {
  return function(d, x) {
    return ascending_default2(f(d), x);
  };
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/node_modules/d3-array/src/bisect.js
var ascendingBisect2 = bisector_default2(ascending_default2);
var bisectRight2 = ascendingBisect2.right;
var bisectLeft2 = ascendingBisect2.left;

// node_modules/d3-geo-voronoi/node_modules/d3-geo/node_modules/d3-array/src/array.js
var array2 = Array.prototype;
var slice2 = array2.slice;
var map4 = array2.map;

// node_modules/d3-geo-voronoi/node_modules/d3-geo/node_modules/d3-array/src/ticks.js
var e102 = Math.sqrt(50);
var e52 = Math.sqrt(10);
var e22 = Math.sqrt(2);

// node_modules/d3-geo-voronoi/node_modules/d3-geo/node_modules/d3-array/src/merge.js
function merge_default(arrays) {
  var n = arrays.length, m, i = -1, j = 0, merged, array6;
  while (++i < n)
    j += arrays[i].length;
  merged = new Array(j);
  while (--n >= 0) {
    array6 = arrays[n];
    m = array6.length;
    while (--m >= 0) {
      merged[--j] = array6[m];
    }
  }
  return merged;
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/clip/index.js
function clip_default2(pointVisible, clipLine, interpolate, start) {
  return function(sink) {
    var line = clipLine(sink), ringBuffer = buffer_default2(), ringSink = clipLine(ringBuffer), polygonStarted = false, polygon, segments, ring;
    var clip = {
      point: point3,
      lineStart,
      lineEnd,
      polygonStart: function() {
        clip.point = pointRing;
        clip.lineStart = ringStart;
        clip.lineEnd = ringEnd;
        segments = [];
        polygon = [];
      },
      polygonEnd: function() {
        clip.point = point3;
        clip.lineStart = lineStart;
        clip.lineEnd = lineEnd;
        segments = merge_default(segments);
        var startInside = polygonContains_default2(polygon, start);
        if (segments.length) {
          if (!polygonStarted)
            sink.polygonStart(), polygonStarted = true;
          rejoin_default2(segments, compareIntersection2, startInside, interpolate, sink);
        } else if (startInside) {
          if (!polygonStarted)
            sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
        }
        if (polygonStarted)
          sink.polygonEnd(), polygonStarted = false;
        segments = polygon = null;
      },
      sphere: function() {
        sink.polygonStart();
        sink.lineStart();
        interpolate(null, null, 1, sink);
        sink.lineEnd();
        sink.polygonEnd();
      }
    };
    function point3(lambda, phi) {
      if (pointVisible(lambda, phi))
        sink.point(lambda, phi);
    }
    function pointLine(lambda, phi) {
      line.point(lambda, phi);
    }
    function lineStart() {
      clip.point = pointLine;
      line.lineStart();
    }
    function lineEnd() {
      clip.point = point3;
      line.lineEnd();
    }
    function pointRing(lambda, phi) {
      ring.push([lambda, phi]);
      ringSink.point(lambda, phi);
    }
    function ringStart() {
      ringSink.lineStart();
      ring = [];
    }
    function ringEnd() {
      pointRing(ring[0][0], ring[0][1]);
      ringSink.lineEnd();
      var clean = ringSink.clean(), ringSegments = ringBuffer.result(), i, n = ringSegments.length, m, segment, point4;
      ring.pop();
      polygon.push(ring);
      ring = null;
      if (!n)
        return;
      if (clean & 1) {
        segment = ringSegments[0];
        if ((m = segment.length - 1) > 0) {
          if (!polygonStarted)
            sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          for (i = 0; i < m; ++i)
            sink.point((point4 = segment[i])[0], point4[1]);
          sink.lineEnd();
        }
        return;
      }
      if (n > 1 && clean & 2)
        ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
      segments.push(ringSegments.filter(validSegment2));
    }
    return clip;
  };
}
function validSegment2(segment) {
  return segment.length > 1;
}
function compareIntersection2(a, b) {
  return ((a = a.x)[0] < 0 ? a[1] - halfPi2 - epsilon5 : halfPi2 - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfPi2 - epsilon5 : halfPi2 - b[1]);
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/clip/antimeridian.js
var antimeridian_default2 = clip_default2(function() {
  return true;
}, clipAntimeridianLine2, clipAntimeridianInterpolate2, [-pi2, -halfPi2]);
function clipAntimeridianLine2(stream) {
  var lambda05 = NaN, phi02 = NaN, sign0 = NaN, clean;
  return {
    lineStart: function() {
      stream.lineStart();
      clean = 1;
    },
    point: function(lambda12, phi12) {
      var sign1 = lambda12 > 0 ? pi2 : -pi2, delta = abs2(lambda12 - lambda05);
      if (abs2(delta - pi2) < epsilon5) {
        stream.point(lambda05, phi02 = (phi02 + phi12) / 2 > 0 ? halfPi2 : -halfPi2);
        stream.point(sign0, phi02);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi02);
        stream.point(lambda12, phi02);
        clean = 0;
      } else if (sign0 !== sign1 && delta >= pi2) {
        if (abs2(lambda05 - sign0) < epsilon5)
          lambda05 -= sign0 * epsilon5;
        if (abs2(lambda12 - sign1) < epsilon5)
          lambda12 -= sign1 * epsilon5;
        phi02 = clipAntimeridianIntersect2(lambda05, phi02, lambda12, phi12);
        stream.point(sign0, phi02);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi02);
        clean = 0;
      }
      stream.point(lambda05 = lambda12, phi02 = phi12);
      sign0 = sign1;
    },
    lineEnd: function() {
      stream.lineEnd();
      lambda05 = phi02 = NaN;
    },
    clean: function() {
      return 2 - clean;
    }
  };
}
function clipAntimeridianIntersect2(lambda05, phi02, lambda12, phi12) {
  var cosPhi04, cosPhi1, sinLambda0Lambda1 = sin2(lambda05 - lambda12);
  return abs2(sinLambda0Lambda1) > epsilon5 ? atan3((sin2(phi02) * (cosPhi1 = cos2(phi12)) * sin2(lambda12) - sin2(phi12) * (cosPhi04 = cos2(phi02)) * sin2(lambda05)) / (cosPhi04 * cosPhi1 * sinLambda0Lambda1)) : (phi02 + phi12) / 2;
}
function clipAntimeridianInterpolate2(from, to, direction, stream) {
  var phi;
  if (from == null) {
    phi = direction * halfPi2;
    stream.point(-pi2, phi);
    stream.point(0, phi);
    stream.point(pi2, phi);
    stream.point(pi2, 0);
    stream.point(pi2, -phi);
    stream.point(0, -phi);
    stream.point(-pi2, -phi);
    stream.point(-pi2, 0);
    stream.point(-pi2, phi);
  } else if (abs2(from[0] - to[0]) > epsilon5) {
    var lambda = from[0] < to[0] ? pi2 : -pi2;
    phi = direction * lambda / 2;
    stream.point(-lambda, phi);
    stream.point(0, phi);
    stream.point(lambda, phi);
  } else {
    stream.point(to[0], to[1]);
  }
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/clip/circle.js
function circle_default3(radius) {
  var cr = cos2(radius), delta = 6 * radians3, smallRadius = cr > 0, notHemisphere = abs2(cr) > epsilon5;
  function interpolate(from, to, direction, stream) {
    circleStream2(stream, radius, delta, direction, from, to);
  }
  function visible(lambda, phi) {
    return cos2(lambda) * cos2(phi) > cr;
  }
  function clipLine(stream) {
    var point0, c0, v0, v00, clean;
    return {
      lineStart: function() {
        v00 = v0 = false;
        clean = 1;
      },
      point: function(lambda, phi) {
        var point1 = [lambda, phi], point22, v2 = visible(lambda, phi), c = smallRadius ? v2 ? 0 : code(lambda, phi) : v2 ? code(lambda + (lambda < 0 ? pi2 : -pi2), phi) : 0;
        if (!point0 && (v00 = v0 = v2))
          stream.lineStart();
        if (v2 !== v0) {
          point22 = intersect(point0, point1);
          if (!point22 || pointEqual_default2(point0, point22) || pointEqual_default2(point1, point22))
            point1[2] = 1;
        }
        if (v2 !== v0) {
          clean = 0;
          if (v2) {
            stream.lineStart();
            point22 = intersect(point1, point0);
            stream.point(point22[0], point22[1]);
          } else {
            point22 = intersect(point0, point1);
            stream.point(point22[0], point22[1], 2);
            stream.lineEnd();
          }
          point0 = point22;
        } else if (notHemisphere && point0 && smallRadius ^ v2) {
          var t;
          if (!(c & c0) && (t = intersect(point1, point0, true))) {
            clean = 0;
            if (smallRadius) {
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
            } else {
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
              stream.lineStart();
              stream.point(t[0][0], t[0][1], 3);
            }
          }
        }
        if (v2 && (!point0 || !pointEqual_default2(point0, point1))) {
          stream.point(point1[0], point1[1]);
        }
        point0 = point1, v0 = v2, c0 = c;
      },
      lineEnd: function() {
        if (v0)
          stream.lineEnd();
        point0 = null;
      },
      clean: function() {
        return clean | (v00 && v0) << 1;
      }
    };
  }
  function intersect(a, b, two) {
    var pa = cartesian2(a), pb = cartesian2(b);
    var n1 = [1, 0, 0], n2 = cartesianCross2(pa, pb), n2n2 = cartesianDot2(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
    if (!determinant)
      return !two && a;
    var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = cartesianCross2(n1, n2), A6 = cartesianScale2(n1, c1), B4 = cartesianScale2(n2, c2);
    cartesianAddInPlace2(A6, B4);
    var u4 = n1xn2, w = cartesianDot2(A6, u4), uu = cartesianDot2(u4, u4), t23 = w * w - uu * (cartesianDot2(A6, A6) - 1);
    if (t23 < 0)
      return;
    var t = sqrt3(t23), q = cartesianScale2(u4, (-w - t) / uu);
    cartesianAddInPlace2(q, A6);
    q = spherical2(q);
    if (!two)
      return q;
    var lambda05 = a[0], lambda12 = b[0], phi02 = a[1], phi12 = b[1], z;
    if (lambda12 < lambda05)
      z = lambda05, lambda05 = lambda12, lambda12 = z;
    var delta2 = lambda12 - lambda05, polar = abs2(delta2 - pi2) < epsilon5, meridian = polar || delta2 < epsilon5;
    if (!polar && phi12 < phi02)
      z = phi02, phi02 = phi12, phi12 = z;
    if (meridian ? polar ? phi02 + phi12 > 0 ^ q[1] < (abs2(q[0] - lambda05) < epsilon5 ? phi02 : phi12) : phi02 <= q[1] && q[1] <= phi12 : delta2 > pi2 ^ (lambda05 <= q[0] && q[0] <= lambda12)) {
      var q1 = cartesianScale2(u4, (-w + t) / uu);
      cartesianAddInPlace2(q1, A6);
      return [q, spherical2(q1)];
    }
  }
  function code(lambda, phi) {
    var r = smallRadius ? radius : pi2 - radius, code2 = 0;
    if (lambda < -r)
      code2 |= 1;
    else if (lambda > r)
      code2 |= 2;
    if (phi < -r)
      code2 |= 4;
    else if (phi > r)
      code2 |= 8;
    return code2;
  }
  return clip_default2(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi2, radius - pi2]);
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/clip/line.js
function line_default2(a, b, x04, y03, x13, y12) {
  var ax = a[0], ay = a[1], bx = b[0], by = b[1], t05 = 0, t15 = 1, dx = bx - ax, dy = by - ay, r;
  r = x04 - ax;
  if (!dx && r > 0)
    return;
  r /= dx;
  if (dx < 0) {
    if (r < t05)
      return;
    if (r < t15)
      t15 = r;
  } else if (dx > 0) {
    if (r > t15)
      return;
    if (r > t05)
      t05 = r;
  }
  r = x13 - ax;
  if (!dx && r < 0)
    return;
  r /= dx;
  if (dx < 0) {
    if (r > t15)
      return;
    if (r > t05)
      t05 = r;
  } else if (dx > 0) {
    if (r < t05)
      return;
    if (r < t15)
      t15 = r;
  }
  r = y03 - ay;
  if (!dy && r > 0)
    return;
  r /= dy;
  if (dy < 0) {
    if (r < t05)
      return;
    if (r < t15)
      t15 = r;
  } else if (dy > 0) {
    if (r > t15)
      return;
    if (r > t05)
      t05 = r;
  }
  r = y12 - ay;
  if (!dy && r < 0)
    return;
  r /= dy;
  if (dy < 0) {
    if (r > t15)
      return;
    if (r > t05)
      t05 = r;
  } else if (dy > 0) {
    if (r < t05)
      return;
    if (r < t15)
      t15 = r;
  }
  if (t05 > 0)
    a[0] = ax + t05 * dx, a[1] = ay + t05 * dy;
  if (t15 < 1)
    b[0] = ax + t15 * dx, b[1] = ay + t15 * dy;
  return true;
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/clip/rectangle.js
var clipMax2 = 1e9;
var clipMin2 = -clipMax2;
function clipRectangle2(x04, y03, x13, y12) {
  function visible(x, y) {
    return x04 <= x && x <= x13 && y03 <= y && y <= y12;
  }
  function interpolate(from, to, direction, stream) {
    var a = 0, a1 = 0;
    if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
      do
        stream.point(a === 0 || a === 3 ? x04 : x13, a > 1 ? y12 : y03);
      while ((a = (a + direction + 4) % 4) !== a1);
    } else {
      stream.point(to[0], to[1]);
    }
  }
  function corner(p, direction) {
    return abs2(p[0] - x04) < epsilon5 ? direction > 0 ? 0 : 3 : abs2(p[0] - x13) < epsilon5 ? direction > 0 ? 2 : 1 : abs2(p[1] - y03) < epsilon5 ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
  }
  function compareIntersection3(a, b) {
    return comparePoint(a.x, b.x);
  }
  function comparePoint(a, b) {
    var ca3 = corner(a, 1), cb = corner(b, 1);
    return ca3 !== cb ? ca3 - cb : ca3 === 0 ? b[1] - a[1] : ca3 === 1 ? a[0] - b[0] : ca3 === 2 ? a[1] - b[1] : b[0] - a[0];
  }
  return function(stream) {
    var activeStream = stream, bufferStream = buffer_default2(), segments, polygon, ring, x__, y__, v__, x_, y_, v_, first, clean;
    var clipStream = {
      point: point3,
      lineStart,
      lineEnd,
      polygonStart,
      polygonEnd
    };
    function point3(x, y) {
      if (visible(x, y))
        activeStream.point(x, y);
    }
    function polygonInside() {
      var winding = 0;
      for (var i = 0, n = polygon.length; i < n; ++i) {
        for (var ring2 = polygon[i], j = 1, m = ring2.length, point4 = ring2[0], a0, a1, b0 = point4[0], b1 = point4[1]; j < m; ++j) {
          a0 = b0, a1 = b1, point4 = ring2[j], b0 = point4[0], b1 = point4[1];
          if (a1 <= y12) {
            if (b1 > y12 && (b0 - a0) * (y12 - a1) > (b1 - a1) * (x04 - a0))
              ++winding;
          } else {
            if (b1 <= y12 && (b0 - a0) * (y12 - a1) < (b1 - a1) * (x04 - a0))
              --winding;
          }
        }
      }
      return winding;
    }
    function polygonStart() {
      activeStream = bufferStream, segments = [], polygon = [], clean = true;
    }
    function polygonEnd() {
      var startInside = polygonInside(), cleanInside = clean && startInside, visible2 = (segments = merge_default(segments)).length;
      if (cleanInside || visible2) {
        stream.polygonStart();
        if (cleanInside) {
          stream.lineStart();
          interpolate(null, null, 1, stream);
          stream.lineEnd();
        }
        if (visible2) {
          rejoin_default2(segments, compareIntersection3, startInside, interpolate, stream);
        }
        stream.polygonEnd();
      }
      activeStream = stream, segments = polygon = ring = null;
    }
    function lineStart() {
      clipStream.point = linePoint2;
      if (polygon)
        polygon.push(ring = []);
      first = true;
      v_ = false;
      x_ = y_ = NaN;
    }
    function lineEnd() {
      if (segments) {
        linePoint2(x__, y__);
        if (v__ && v_)
          bufferStream.rejoin();
        segments.push(bufferStream.result());
      }
      clipStream.point = point3;
      if (v_)
        activeStream.lineEnd();
    }
    function linePoint2(x, y) {
      var v2 = visible(x, y);
      if (polygon)
        ring.push([x, y]);
      if (first) {
        x__ = x, y__ = y, v__ = v2;
        first = false;
        if (v2) {
          activeStream.lineStart();
          activeStream.point(x, y);
        }
      } else {
        if (v2 && v_)
          activeStream.point(x, y);
        else {
          var a = [x_ = Math.max(clipMin2, Math.min(clipMax2, x_)), y_ = Math.max(clipMin2, Math.min(clipMax2, y_))], b = [x = Math.max(clipMin2, Math.min(clipMax2, x)), y = Math.max(clipMin2, Math.min(clipMax2, y))];
          if (line_default2(a, b, x04, y03, x13, y12)) {
            if (!v_) {
              activeStream.lineStart();
              activeStream.point(a[0], a[1]);
            }
            activeStream.point(b[0], b[1]);
            if (!v2)
              activeStream.lineEnd();
            clean = false;
          } else if (v2) {
            activeStream.lineStart();
            activeStream.point(x, y);
            clean = false;
          }
        }
      }
      x_ = x, y_ = y, v_ = v2;
    }
    return clipStream;
  };
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/length.js
var lengthSum3 = adder_default();
var lambda04;
var sinPhi03;
var cosPhi03;
var lengthStream2 = {
  sphere: noop2,
  point: noop2,
  lineStart: lengthLineStart2,
  lineEnd: noop2,
  polygonStart: noop2,
  polygonEnd: noop2
};
function lengthLineStart2() {
  lengthStream2.point = lengthPointFirst2;
  lengthStream2.lineEnd = lengthLineEnd2;
}
function lengthLineEnd2() {
  lengthStream2.point = lengthStream2.lineEnd = noop2;
}
function lengthPointFirst2(lambda, phi) {
  lambda *= radians3, phi *= radians3;
  lambda04 = lambda, sinPhi03 = sin2(phi), cosPhi03 = cos2(phi);
  lengthStream2.point = lengthPoint2;
}
function lengthPoint2(lambda, phi) {
  lambda *= radians3, phi *= radians3;
  var sinPhi = sin2(phi), cosPhi = cos2(phi), delta = abs2(lambda - lambda04), cosDelta = cos2(delta), sinDelta = sin2(delta), x = cosPhi * sinDelta, y = cosPhi03 * sinPhi - sinPhi03 * cosPhi * cosDelta, z = sinPhi03 * sinPhi + cosPhi03 * cosPhi * cosDelta;
  lengthSum3.add(atan22(sqrt3(x * x + y * y), z));
  lambda04 = lambda, sinPhi03 = sinPhi, cosPhi03 = cosPhi;
}
function length_default2(object3) {
  lengthSum3.reset();
  stream_default2(object3, lengthStream2);
  return +lengthSum3;
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/distance.js
var coordinates2 = [null, null];
var object2 = { type: "LineString", coordinates: coordinates2 };
function distance_default2(a, b) {
  coordinates2[0] = a;
  coordinates2[1] = b;
  return length_default2(object2);
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/identity.js
function identity_default6(x) {
  return x;
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/path/area.js
var areaSum4 = adder_default();
var areaRingSum4 = adder_default();

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/path/bounds.js
var x03 = Infinity;
var y02 = x03;
var x12 = -x03;
var y1 = x12;
var boundsStream2 = {
  point: boundsPoint2,
  lineStart: noop2,
  lineEnd: noop2,
  polygonStart: noop2,
  polygonEnd: noop2,
  result: function() {
    var bounds = [[x03, y02], [x12, y1]];
    x12 = y1 = -(y02 = x03 = Infinity);
    return bounds;
  }
};
function boundsPoint2(x, y) {
  if (x < x03)
    x03 = x;
  if (x > x12)
    x12 = x;
  if (y < y02)
    y02 = y;
  if (y > y1)
    y1 = y;
}
var bounds_default3 = boundsStream2;

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/path/context.js
function PathContext2(context) {
  this._context = context;
}
PathContext2.prototype = {
  _radius: 4.5,
  pointRadius: function(_) {
    return this._radius = _, this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0)
      this._context.closePath();
    this._point = NaN;
  },
  point: function(x, y) {
    switch (this._point) {
      case 0: {
        this._context.moveTo(x, y);
        this._point = 1;
        break;
      }
      case 1: {
        this._context.lineTo(x, y);
        break;
      }
      default: {
        this._context.moveTo(x + this._radius, y);
        this._context.arc(x, y, this._radius, 0, tau3);
        break;
      }
    }
  },
  result: noop2
};

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/path/measure.js
var lengthSum4 = adder_default();

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/path/string.js
function PathString2() {
  this._string = [];
}
PathString2.prototype = {
  _radius: 4.5,
  _circle: circle2(4.5),
  pointRadius: function(_) {
    if ((_ = +_) !== this._radius)
      this._radius = _, this._circle = null;
    return this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0)
      this._string.push("Z");
    this._point = NaN;
  },
  point: function(x, y) {
    switch (this._point) {
      case 0: {
        this._string.push("M", x, ",", y);
        this._point = 1;
        break;
      }
      case 1: {
        this._string.push("L", x, ",", y);
        break;
      }
      default: {
        if (this._circle == null)
          this._circle = circle2(this._radius);
        this._string.push("M", x, ",", y, this._circle);
        break;
      }
    }
  },
  result: function() {
    if (this._string.length) {
      var result = this._string.join("");
      this._string = [];
      return result;
    } else {
      return null;
    }
  }
};
function circle2(radius) {
  return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/transform.js
function transformer3(methods) {
  return function(stream) {
    var s = new TransformStream2();
    for (var key in methods)
      s[key] = methods[key];
    s.stream = stream;
    return s;
  };
}
function TransformStream2() {
}
TransformStream2.prototype = {
  constructor: TransformStream2,
  point: function(x, y) {
    this.stream.point(x, y);
  },
  sphere: function() {
    this.stream.sphere();
  },
  lineStart: function() {
    this.stream.lineStart();
  },
  lineEnd: function() {
    this.stream.lineEnd();
  },
  polygonStart: function() {
    this.stream.polygonStart();
  },
  polygonEnd: function() {
    this.stream.polygonEnd();
  }
};

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/projection/fit.js
function fit(projection3, fitBounds, object3) {
  var clip = projection3.clipExtent && projection3.clipExtent();
  projection3.scale(150).translate([0, 0]);
  if (clip != null)
    projection3.clipExtent(null);
  stream_default2(object3, projection3.stream(bounds_default3));
  fitBounds(bounds_default3.result());
  if (clip != null)
    projection3.clipExtent(clip);
  return projection3;
}
function fitExtent2(projection3, extent, object3) {
  return fit(projection3, function(b) {
    var w = extent[1][0] - extent[0][0], h = extent[1][1] - extent[0][1], k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])), x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2, y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
    projection3.scale(150 * k).translate([x, y]);
  }, object3);
}
function fitSize2(projection3, size, object3) {
  return fitExtent2(projection3, [[0, 0], size], object3);
}
function fitWidth2(projection3, width, object3) {
  return fit(projection3, function(b) {
    var w = +width, k = w / (b[1][0] - b[0][0]), x = (w - k * (b[1][0] + b[0][0])) / 2, y = -k * b[0][1];
    projection3.scale(150 * k).translate([x, y]);
  }, object3);
}
function fitHeight2(projection3, height, object3) {
  return fit(projection3, function(b) {
    var h = +height, k = h / (b[1][1] - b[0][1]), x = -k * b[0][0], y = (h - k * (b[1][1] + b[0][1])) / 2;
    projection3.scale(150 * k).translate([x, y]);
  }, object3);
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/projection/resample.js
var maxDepth = 16;
var cosMinDistance2 = cos2(30 * radians3);
function resample_default2(project, delta2) {
  return +delta2 ? resample(project, delta2) : resampleNone(project);
}
function resampleNone(project) {
  return transformer3({
    point: function(x, y) {
      x = project(x, y);
      this.stream.point(x[0], x[1]);
    }
  });
}
function resample(project, delta2) {
  function resampleLineTo(x04, y03, lambda05, a0, b0, c0, x13, y12, lambda12, a1, b1, c1, depth, stream) {
    var dx = x13 - x04, dy = y12 - y03, d2 = dx * dx + dy * dy;
    if (d2 > 4 * delta2 && depth--) {
      var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = sqrt3(a * a + b * b + c * c), phi2 = asin2(c /= m), lambda22 = abs2(abs2(c) - 1) < epsilon5 || abs2(lambda05 - lambda12) < epsilon5 ? (lambda05 + lambda12) / 2 : atan22(b, a), p = project(lambda22, phi2), x2 = p[0], y2 = p[1], dx2 = x2 - x04, dy2 = y2 - y03, dz = dy * dx2 - dx * dy2;
      if (dz * dz / d2 > delta2 || abs2((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance2) {
        resampleLineTo(x04, y03, lambda05, a0, b0, c0, x2, y2, lambda22, a /= m, b /= m, c, depth, stream);
        stream.point(x2, y2);
        resampleLineTo(x2, y2, lambda22, a, b, c, x13, y12, lambda12, a1, b1, c1, depth, stream);
      }
    }
  }
  return function(stream) {
    var lambda004, x00, y00, a00, b00, c00, lambda05, x04, y03, a0, b0, c0;
    var resampleStream = {
      point: point3,
      lineStart,
      lineEnd,
      polygonStart: function() {
        stream.polygonStart();
        resampleStream.lineStart = ringStart;
      },
      polygonEnd: function() {
        stream.polygonEnd();
        resampleStream.lineStart = lineStart;
      }
    };
    function point3(x, y) {
      x = project(x, y);
      stream.point(x[0], x[1]);
    }
    function lineStart() {
      x04 = NaN;
      resampleStream.point = linePoint2;
      stream.lineStart();
    }
    function linePoint2(lambda, phi) {
      var c = cartesian2([lambda, phi]), p = project(lambda, phi);
      resampleLineTo(x04, y03, lambda05, a0, b0, c0, x04 = p[0], y03 = p[1], lambda05 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
      stream.point(x04, y03);
    }
    function lineEnd() {
      resampleStream.point = point3;
      stream.lineEnd();
    }
    function ringStart() {
      lineStart();
      resampleStream.point = ringPoint;
      resampleStream.lineEnd = ringEnd;
    }
    function ringPoint(lambda, phi) {
      linePoint2(lambda004 = lambda, phi), x00 = x04, y00 = y03, a00 = a0, b00 = b0, c00 = c0;
      resampleStream.point = linePoint2;
    }
    function ringEnd() {
      resampleLineTo(x04, y03, lambda05, a0, b0, c0, x00, y00, lambda004, a00, b00, c00, maxDepth, stream);
      resampleStream.lineEnd = lineEnd;
      lineEnd();
    }
    return resampleStream;
  };
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/projection/index.js
var transformRadians2 = transformer3({
  point: function(x, y) {
    this.stream.point(x * radians3, y * radians3);
  }
});
function transformRotate(rotate) {
  return transformer3({
    point: function(x, y) {
      var r = rotate(x, y);
      return this.stream.point(r[0], r[1]);
    }
  });
}
function scaleTranslate(k, dx, dy, sx, sy) {
  function transform(x, y) {
    x *= sx;
    y *= sy;
    return [dx + k * x, dy - k * y];
  }
  transform.invert = function(x, y) {
    return [(x - dx) / k * sx, (dy - y) / k * sy];
  };
  return transform;
}
function scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {
  var cosAlpha = cos2(alpha), sinAlpha = sin2(alpha), a = cosAlpha * k, b = sinAlpha * k, ai = cosAlpha / k, bi = sinAlpha / k, ci = (sinAlpha * dy - cosAlpha * dx) / k, fi = (sinAlpha * dx + cosAlpha * dy) / k;
  function transform(x, y) {
    x *= sx;
    y *= sy;
    return [a * x - b * y + dx, dy - b * x - a * y];
  }
  transform.invert = function(x, y) {
    return [sx * (ai * x - bi * y + ci), sy * (fi - bi * x - ai * y)];
  };
  return transform;
}
function projection2(project) {
  return projectionMutator2(function() {
    return project;
  })();
}
function projectionMutator2(projectAt) {
  var project, k = 150, x = 480, y = 250, lambda = 0, phi = 0, deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, alpha = 0, sx = 1, sy = 1, theta = null, preclip = antimeridian_default2, x04 = null, y03, x13, y12, postclip = identity_default6, delta2 = 0.5, projectResample, projectTransform, projectRotateTransform, cache, cacheStream;
  function projection3(point3) {
    return projectRotateTransform(point3[0] * radians3, point3[1] * radians3);
  }
  function invert(point3) {
    point3 = projectRotateTransform.invert(point3[0], point3[1]);
    return point3 && [point3[0] * degrees4, point3[1] * degrees4];
  }
  projection3.stream = function(stream) {
    return cache && cacheStream === stream ? cache : cache = transformRadians2(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
  };
  projection3.preclip = function(_) {
    return arguments.length ? (preclip = _, theta = void 0, reset()) : preclip;
  };
  projection3.postclip = function(_) {
    return arguments.length ? (postclip = _, x04 = y03 = x13 = y12 = null, reset()) : postclip;
  };
  projection3.clipAngle = function(_) {
    return arguments.length ? (preclip = +_ ? circle_default3(theta = _ * radians3) : (theta = null, antimeridian_default2), reset()) : theta * degrees4;
  };
  projection3.clipExtent = function(_) {
    return arguments.length ? (postclip = _ == null ? (x04 = y03 = x13 = y12 = null, identity_default6) : clipRectangle2(x04 = +_[0][0], y03 = +_[0][1], x13 = +_[1][0], y12 = +_[1][1]), reset()) : x04 == null ? null : [[x04, y03], [x13, y12]];
  };
  projection3.scale = function(_) {
    return arguments.length ? (k = +_, recenter()) : k;
  };
  projection3.translate = function(_) {
    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
  };
  projection3.center = function(_) {
    return arguments.length ? (lambda = _[0] % 360 * radians3, phi = _[1] % 360 * radians3, recenter()) : [lambda * degrees4, phi * degrees4];
  };
  projection3.rotate = function(_) {
    return arguments.length ? (deltaLambda = _[0] % 360 * radians3, deltaPhi = _[1] % 360 * radians3, deltaGamma = _.length > 2 ? _[2] % 360 * radians3 : 0, recenter()) : [deltaLambda * degrees4, deltaPhi * degrees4, deltaGamma * degrees4];
  };
  projection3.angle = function(_) {
    return arguments.length ? (alpha = _ % 360 * radians3, recenter()) : alpha * degrees4;
  };
  projection3.reflectX = function(_) {
    return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;
  };
  projection3.reflectY = function(_) {
    return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;
  };
  projection3.precision = function(_) {
    return arguments.length ? (projectResample = resample_default2(projectTransform, delta2 = _ * _), reset()) : sqrt3(delta2);
  };
  projection3.fitExtent = function(extent, object3) {
    return fitExtent2(projection3, extent, object3);
  };
  projection3.fitSize = function(size, object3) {
    return fitSize2(projection3, size, object3);
  };
  projection3.fitWidth = function(width, object3) {
    return fitWidth2(projection3, width, object3);
  };
  projection3.fitHeight = function(height, object3) {
    return fitHeight2(projection3, height, object3);
  };
  function recenter() {
    var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)), transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], sx, sy, alpha);
    rotate = rotateRadians2(deltaLambda, deltaPhi, deltaGamma);
    projectTransform = compose_default2(project, transform);
    projectRotateTransform = compose_default2(rotate, projectTransform);
    projectResample = resample_default2(projectTransform, delta2);
    return reset();
  }
  function reset() {
    cache = cacheStream = null;
    return projection3;
  }
  return function() {
    project = projectAt.apply(this, arguments);
    projection3.invert = project.invert && invert;
    return recenter();
  };
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/projection/azimuthal.js
function azimuthalRaw2(scale2) {
  return function(x, y) {
    var cx = cos2(x), cy = cos2(y), k = scale2(cx * cy);
    return [
      k * cy * sin2(x),
      k * sin2(y)
    ];
  };
}
function azimuthalInvert2(angle2) {
  return function(x, y) {
    var z = sqrt3(x * x + y * y), c = angle2(z), sc = sin2(c), cc2 = cos2(c);
    return [
      atan22(x * sc, z * cc2),
      asin2(z && y * sc / z)
    ];
  };
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/projection/azimuthalEqualArea.js
var azimuthalEqualAreaRaw2 = azimuthalRaw2(function(cxcy) {
  return sqrt3(2 / (1 + cxcy));
});
azimuthalEqualAreaRaw2.invert = azimuthalInvert2(function(z) {
  return 2 * asin2(z / 2);
});

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/projection/azimuthalEquidistant.js
var azimuthalEquidistantRaw2 = azimuthalRaw2(function(c) {
  return (c = acos2(c)) && c / sin2(c);
});
azimuthalEquidistantRaw2.invert = azimuthalInvert2(function(z) {
  return z;
});

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/projection/mercator.js
function mercatorRaw2(lambda, phi) {
  return [lambda, log3(tan2((halfPi2 + phi) / 2))];
}
mercatorRaw2.invert = function(x, y) {
  return [x, 2 * atan3(exp2(y)) - halfPi2];
};

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/projection/equirectangular.js
function equirectangularRaw2(lambda, phi) {
  return [lambda, phi];
}
equirectangularRaw2.invert = equirectangularRaw2;

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/projection/equalEarth.js
var A12 = 1.340264;
var A22 = -0.081106;
var A32 = 893e-6;
var A42 = 3796e-6;
var M2 = sqrt3(3) / 2;
var iterations2 = 12;
function equalEarthRaw2(lambda, phi) {
  var l = asin2(M2 * sin2(phi)), l2 = l * l, l6 = l2 * l2 * l2;
  return [
    lambda * cos2(l) / (M2 * (A12 + 3 * A22 * l2 + l6 * (7 * A32 + 9 * A42 * l2))),
    l * (A12 + A22 * l2 + l6 * (A32 + A42 * l2))
  ];
}
equalEarthRaw2.invert = function(x, y) {
  var l = y, l2 = l * l, l6 = l2 * l2 * l2;
  for (var i = 0, delta, fy, fpy; i < iterations2; ++i) {
    fy = l * (A12 + A22 * l2 + l6 * (A32 + A42 * l2)) - y;
    fpy = A12 + 3 * A22 * l2 + l6 * (7 * A32 + 9 * A42 * l2);
    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;
    if (abs2(delta) < epsilon23)
      break;
  }
  return [
    M2 * x * (A12 + 3 * A22 * l2 + l6 * (7 * A32 + 9 * A42 * l2)) / cos2(l),
    asin2(sin2(l) / M2)
  ];
};

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/projection/gnomonic.js
function gnomonicRaw2(x, y) {
  var cy = cos2(y), k = cos2(x) * cy;
  return [cy * sin2(x) / k, sin2(y) / k];
}
gnomonicRaw2.invert = azimuthalInvert2(atan3);

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/projection/naturalEarth1.js
function naturalEarth1Raw2(lambda, phi) {
  var phi2 = phi * phi, phi4 = phi2 * phi2;
  return [
    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (3971e-6 * phi2 - 1529e-6 * phi4))),
    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 5916e-6 * phi4)))
  ];
}
naturalEarth1Raw2.invert = function(x, y) {
  var phi = y, i = 25, delta;
  do {
    var phi2 = phi * phi, phi4 = phi2 * phi2;
    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 5916e-6 * phi4))) - y) / (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 5916e-6 * 11 * phi4)));
  } while (abs2(delta) > epsilon5 && --i > 0);
  return [
    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (3971e-6 - 1529e-6 * phi2)))),
    phi
  ];
};

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/projection/orthographic.js
function orthographicRaw2(x, y) {
  return [cos2(y) * sin2(x), sin2(y)];
}
orthographicRaw2.invert = azimuthalInvert2(asin2);

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/projection/stereographic.js
function stereographicRaw2(x, y) {
  var cy = cos2(y), k = 1 + cos2(x) * cy;
  return [cy * sin2(x) / k, sin2(y) / k];
}
stereographicRaw2.invert = azimuthalInvert2(function(z) {
  return 2 * atan3(z);
});
function stereographic_default2() {
  return projection2(stereographicRaw2).scale(250).clipAngle(142);
}

// node_modules/d3-geo-voronoi/node_modules/d3-geo/src/projection/transverseMercator.js
function transverseMercatorRaw2(lambda, phi) {
  return [log3(tan2((halfPi2 + phi) / 2)), -lambda];
}
transverseMercatorRaw2.invert = function(x, y) {
  return [-y, 2 * atan3(exp2(x)) - halfPi2];
};

// node_modules/d3-geo-voronoi/node_modules/d3-array/src/ascending.js
function ascending_default3(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

// node_modules/d3-geo-voronoi/node_modules/d3-array/src/bisector.js
function bisector_default3(f) {
  let delta = f;
  let compare = f;
  if (f.length === 1) {
    delta = (d, x) => f(d) - x;
    compare = ascendingComparator3(f);
  }
  function left(a, x, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a.length;
    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (compare(a[mid], x) < 0)
        lo = mid + 1;
      else
        hi = mid;
    }
    return lo;
  }
  function right(a, x, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a.length;
    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (compare(a[mid], x) > 0)
        hi = mid;
      else
        lo = mid + 1;
    }
    return lo;
  }
  function center(a, x, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a.length;
    const i = left(a, x, lo, hi - 1);
    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
  }
  return { left, center, right };
}
function ascendingComparator3(f) {
  return (d, x) => ascending_default3(f(d), x);
}

// node_modules/d3-geo-voronoi/node_modules/d3-array/src/number.js
function number_default4(x) {
  return x === null ? NaN : +x;
}

// node_modules/d3-geo-voronoi/node_modules/d3-array/src/bisect.js
var ascendingBisect3 = bisector_default3(ascending_default3);
var bisectRight3 = ascendingBisect3.right;
var bisectLeft3 = ascendingBisect3.left;
var bisectCenter2 = bisector_default3(number_default4).center;

// node_modules/d3-geo-voronoi/node_modules/d3-array/src/extent.js
function extent_default5(values, valueof) {
  let min4;
  let max4;
  if (valueof === void 0) {
    for (const value of values) {
      if (value != null) {
        if (min4 === void 0) {
          if (value >= value)
            min4 = max4 = value;
        } else {
          if (min4 > value)
            min4 = value;
          if (max4 < value)
            max4 = value;
        }
      }
    }
  } else {
    let index6 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index6, values)) != null) {
        if (min4 === void 0) {
          if (value >= value)
            min4 = max4 = value;
        } else {
          if (min4 > value)
            min4 = value;
          if (max4 < value)
            max4 = value;
        }
      }
    }
  }
  return [min4, max4];
}

// node_modules/d3-geo-voronoi/node_modules/d3-array/src/array.js
var array3 = Array.prototype;
var slice3 = array3.slice;
var map5 = array3.map;

// node_modules/d3-geo-voronoi/node_modules/d3-array/src/ticks.js
var e103 = Math.sqrt(50);
var e53 = Math.sqrt(10);
var e23 = Math.sqrt(2);

// node_modules/d3-geo-voronoi/node_modules/d3-array/src/shuffle.js
var shuffle_default3 = shuffler2(Math.random);
function shuffler2(random) {
  return function shuffle(array6, i0 = 0, i1 = array6.length) {
    let m = i1 - (i0 = +i0);
    while (m) {
      const i = random() * m-- | 0, t = array6[m + i0];
      array6[m + i0] = array6[i + i0];
      array6[i + i0] = t;
    }
    return array6;
  };
}

// node_modules/d3-geo-voronoi/src/math.js
var pi3 = Math.PI;
var halfPi3 = pi3 / 2;
var quarterPi3 = pi3 / 4;
var tau4 = pi3 * 2;
var degrees5 = 180 / pi3;
var radians4 = pi3 / 180;
var atan23 = Math.atan2;
var cos3 = Math.cos;
var max3 = Math.max;
var min3 = Math.min;
var sin3 = Math.sin;
var sign3 = Math.sign || function(x) {
  return x > 0 ? 1 : x < 0 ? -1 : 0;
};
var sqrt4 = Math.sqrt;
function asin3(x) {
  return x > 1 ? halfPi3 : x < -1 ? -halfPi3 : Math.asin(x);
}

// node_modules/d3-geo-voronoi/src/cartesian.js
function cartesianDot3(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
function cartesianCross3(a, b) {
  return [
    a[1] * b[2] - a[2] * b[1],
    a[2] * b[0] - a[0] * b[2],
    a[0] * b[1] - a[1] * b[0]
  ];
}
function cartesianAdd(a, b) {
  return [a[0] + b[0], a[1] + b[1], a[2] + b[2]];
}
function cartesianNormalize(d) {
  var l = sqrt4(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
  return [d[0] / l, d[1] / l, d[2] / l];
}

// node_modules/d3-geo-voronoi/src/delaunay.js
function spherical3(cartesian4) {
  return [
    atan23(cartesian4[1], cartesian4[0]) * degrees5,
    asin3(max3(-1, min3(1, cartesian4[2]))) * degrees5
  ];
}
function cartesian3(coordinates3) {
  var lambda = coordinates3[0] * radians4, phi = coordinates3[1] * radians4, cosphi = cos3(phi);
  return [cosphi * cos3(lambda), cosphi * sin3(lambda), sin3(phi)];
}
function excess(triangle) {
  triangle = triangle.map((p) => cartesian3(p));
  return cartesianDot3(triangle[0], cartesianCross3(triangle[2], triangle[1]));
}
function geoDelaunay(points) {
  const delaunay = geo_delaunay_from(points), triangles = geo_triangles(delaunay), edges = geo_edges(triangles, points), neighbors = geo_neighbors(triangles, points.length), find = geo_find(neighbors, points), circumcenters = geo_circumcenters(triangles, points), { polygons, centers } = geo_polygons(circumcenters, triangles, points), mesh = geo_mesh(polygons), hull = geo_hull(triangles, points), urquhart = geo_urquhart(edges, triangles);
  return {
    delaunay,
    edges,
    triangles,
    centers,
    neighbors,
    polygons,
    mesh,
    hull,
    urquhart,
    find
  };
}
function geo_find(neighbors, points) {
  function distance2(a, b) {
    let x = a[0] - b[0], y = a[1] - b[1], z = a[2] - b[2];
    return x * x + y * y + z * z;
  }
  return function find(x, y, next) {
    if (next === void 0)
      next = 0;
    let cell, dist3, found = next;
    const xyz = cartesian3([x, y]);
    do {
      cell = next;
      next = null;
      dist3 = distance2(xyz, cartesian3(points[cell]));
      neighbors[cell].forEach((i) => {
        let ndist = distance2(xyz, cartesian3(points[i]));
        if (ndist < dist3) {
          dist3 = ndist;
          next = i;
          found = i;
          return;
        }
      });
    } while (next !== null);
    return found;
  };
}
function geo_delaunay_from(points) {
  if (points.length < 2)
    return {};
  let pivot = 0;
  while (isNaN(points[pivot][0] + points[pivot][1]) && pivot++ < points.length) {
  }
  const r = rotation_default2(points[pivot]), projection3 = stereographic_default2().translate([0, 0]).scale(1).rotate(r.invert([180, 0]));
  points = points.map(projection3);
  const zeros = [];
  let max22 = 1;
  for (let i = 0, n = points.length; i < n; i++) {
    let m = points[i][0] ** 2 + points[i][1] ** 2;
    if (!isFinite(m) || m > 1e32)
      zeros.push(i);
    else if (m > max22)
      max22 = m;
  }
  const FAR = 1e6 * sqrt4(max22);
  zeros.forEach((i) => points[i] = [FAR, 0]);
  points.push([0, FAR]);
  points.push([-FAR, 0]);
  points.push([0, -FAR]);
  const delaunay = Delaunay.from(points);
  delaunay.projection = projection3;
  const { triangles, halfedges, inedges } = delaunay;
  const degenerate = [];
  for (let i = 0, l = halfedges.length; i < l; i++) {
    if (halfedges[i] < 0) {
      const j = i % 3 == 2 ? i - 2 : i + 1;
      const k = i % 3 == 0 ? i + 2 : i - 1;
      const a = halfedges[j];
      const b = halfedges[k];
      halfedges[a] = b;
      halfedges[b] = a;
      halfedges[j] = halfedges[k] = -1;
      triangles[i] = triangles[j] = triangles[k] = pivot;
      inedges[triangles[a]] = a % 3 == 0 ? a + 2 : a - 1;
      inedges[triangles[b]] = b % 3 == 0 ? b + 2 : b - 1;
      degenerate.push(Math.min(i, j, k));
      i += 2 - i % 3;
    } else if (triangles[i] > points.length - 3 - 1) {
      triangles[i] = pivot;
    }
  }
  return delaunay;
}
function geo_edges(triangles, points) {
  const _index = {};
  if (points.length === 2)
    return [[0, 1]];
  triangles.forEach((tri) => {
    if (tri[0] === tri[1])
      return;
    if (excess(tri.map((i) => points[i])) < 0)
      return;
    for (let i = 0, j; i < 3; i++) {
      j = (i + 1) % 3;
      _index[extent_default5([tri[i], tri[j]]).join("-")] = true;
    }
  });
  return Object.keys(_index).map((d) => d.split("-").map(Number));
}
function geo_triangles(delaunay) {
  const { triangles } = delaunay;
  if (!triangles)
    return [];
  const geo_triangles2 = [];
  for (let i = 0, n = triangles.length / 3; i < n; i++) {
    const a = triangles[3 * i], b = triangles[3 * i + 1], c = triangles[3 * i + 2];
    if (a !== b && b !== c) {
      geo_triangles2.push([a, c, b]);
    }
  }
  return geo_triangles2;
}
function geo_circumcenters(triangles, points) {
  return triangles.map((tri) => {
    const c = tri.map((i) => points[i]).map(cartesian3), V = cartesianAdd(cartesianAdd(cartesianCross3(c[1], c[0]), cartesianCross3(c[2], c[1])), cartesianCross3(c[0], c[2]));
    return spherical3(cartesianNormalize(V));
  });
}
function geo_neighbors(triangles, npoints) {
  const neighbors = [];
  triangles.forEach((tri, i) => {
    for (let j = 0; j < 3; j++) {
      const a = tri[j], b = tri[(j + 1) % 3], c = tri[(j + 2) % 3];
      neighbors[a] = neighbors[a] || [];
      neighbors[a].push(b);
    }
  });
  if (triangles.length === 0) {
    if (npoints === 2)
      neighbors[0] = [1], neighbors[1] = [0];
    else if (npoints === 1)
      neighbors[0] = [];
  }
  return neighbors;
}
function geo_polygons(circumcenters, triangles, points) {
  const polygons = [];
  const centers = circumcenters.slice();
  const supplements = [];
  if (triangles.length === 0) {
    if (points.length < 2)
      return { polygons, centers };
    if (points.length === 2) {
      const a = cartesian3(points[0]), b = cartesian3(points[1]), m = cartesianNormalize(cartesianAdd(a, b)), d = cartesianNormalize(cartesianCross3(a, b)), c = cartesianCross3(m, d);
      const poly = [
        m,
        cartesianCross3(m, c),
        cartesianCross3(cartesianCross3(m, c), c),
        cartesianCross3(cartesianCross3(cartesianCross3(m, c), c), c)
      ].map(spherical3).map(supplement);
      return polygons.push(poly), polygons.push(poly.slice().reverse()), { polygons, centers };
    }
  }
  triangles.forEach((tri, t) => {
    for (let j = 0; j < 3; j++) {
      const a = tri[j], b = tri[(j + 1) % 3], c = tri[(j + 2) % 3];
      polygons[a] = polygons[a] || [];
      polygons[a].push([b, c, t, [a, b, c]]);
    }
  });
  const reordered = polygons.map((poly) => {
    const p = [poly[0][2]];
    let k = poly[0][1];
    for (let i = 1; i < poly.length; i++) {
      for (let j = 0; j < poly.length; j++) {
        if (poly[j][0] == k) {
          k = poly[j][1];
          p.push(poly[j][2]);
          break;
        }
      }
    }
    if (p.length > 2) {
      return p;
    } else if (p.length == 2) {
      const R0 = o_midpoint(points[poly[0][3][0]], points[poly[0][3][1]], centers[p[0]]), R1 = o_midpoint(points[poly[0][3][2]], points[poly[0][3][0]], centers[p[0]]);
      const i0 = supplement(R0), i1 = supplement(R1);
      return [p[0], i1, p[1], i0];
    }
  });
  function supplement(point3) {
    let f = -1;
    centers.slice(triangles.length, Infinity).forEach((p, i) => {
      if (p[0] === point3[0] && p[1] === point3[1])
        f = i + triangles.length;
    });
    if (f < 0)
      f = centers.length, centers.push(point3);
    return f;
  }
  return { polygons: reordered, centers };
}
function o_midpoint(a, b, c) {
  a = cartesian3(a);
  b = cartesian3(b);
  c = cartesian3(c);
  const s = sign3(cartesianDot3(cartesianCross3(b, a), c));
  return spherical3(cartesianNormalize(cartesianAdd(a, b)).map((d) => s * d));
}
function geo_mesh(polygons) {
  const mesh = [];
  polygons.forEach((poly) => {
    if (!poly)
      return;
    let p = poly[poly.length - 1];
    for (let q of poly) {
      if (q > p)
        mesh.push([p, q]);
      p = q;
    }
  });
  return mesh;
}
function geo_urquhart(edges, triangles) {
  return function(distances) {
    const _lengths = {}, _urquhart = {};
    edges.forEach((edge, i) => {
      const u4 = edge.join("-");
      _lengths[u4] = distances[i];
      _urquhart[u4] = true;
    });
    triangles.forEach((tri) => {
      let l = 0, remove2 = -1;
      for (var j = 0; j < 3; j++) {
        let u4 = extent_default5([tri[j], tri[(j + 1) % 3]]).join("-");
        if (_lengths[u4] > l) {
          l = _lengths[u4];
          remove2 = u4;
        }
      }
      _urquhart[remove2] = false;
    });
    return edges.map((edge) => _urquhart[edge.join("-")]);
  };
}
function geo_hull(triangles, points) {
  const _hull = {}, hull = [];
  triangles.map((tri) => {
    if (excess(tri.map((i) => points[i > points.length ? 0 : i])) < 0)
      return;
    for (let i = 0; i < 3; i++) {
      let e = [tri[i], tri[(i + 1) % 3]], code = `${e[1]}-${e[0]}`;
      if (_hull[code])
        delete _hull[code];
      else
        _hull[e.join("-")] = true;
    }
  });
  const _index = {};
  let start;
  Object.keys(_hull).forEach((e) => {
    e = e.split("-").map(Number);
    _index[e[0]] = e[1];
    start = e[0];
  });
  if (start === void 0)
    return hull;
  let next = start;
  do {
    hull.push(next);
    let n = _index[next];
    _index[next] = -1;
    next = n;
  } while (next > -1 && next !== start);
  return hull;
}

// node_modules/d3-geo-voronoi/src/voronoi.js
function geoVoronoi(data) {
  const v2 = function(data2) {
    v2.delaunay = null;
    v2._data = data2;
    if (typeof v2._data === "object" && v2._data.type === "FeatureCollection") {
      v2._data = v2._data.features;
    }
    if (typeof v2._data === "object") {
      const temp2 = v2._data.map((d) => [v2._vx(d), v2._vy(d), d]).filter((d) => isFinite(d[0] + d[1]));
      v2.points = temp2.map((d) => [d[0], d[1]]);
      v2.valid = temp2.map((d) => d[2]);
      v2.delaunay = geoDelaunay(v2.points);
    }
    return v2;
  };
  v2._vx = function(d) {
    if (typeof d == "object" && "type" in d) {
      return centroid_default3(d)[0];
    }
    if (0 in d)
      return d[0];
  };
  v2._vy = function(d) {
    if (typeof d == "object" && "type" in d) {
      return centroid_default3(d)[1];
    }
    if (1 in d)
      return d[1];
  };
  v2.x = function(f) {
    if (!f)
      return v2._vx;
    v2._vx = f;
    return v2;
  };
  v2.y = function(f) {
    if (!f)
      return v2._vy;
    v2._vy = f;
    return v2;
  };
  v2.polygons = function(data2) {
    if (data2 !== void 0) {
      v2(data2);
    }
    if (!v2.delaunay)
      return false;
    const coll = {
      type: "FeatureCollection",
      features: []
    };
    if (v2.valid.length === 0)
      return coll;
    v2.delaunay.polygons.forEach((poly, i) => coll.features.push({
      type: "Feature",
      geometry: !poly ? null : {
        type: "Polygon",
        coordinates: [[...poly, poly[0]].map((i2) => v2.delaunay.centers[i2])]
      },
      properties: {
        site: v2.valid[i],
        sitecoordinates: v2.points[i],
        neighbours: v2.delaunay.neighbors[i]
      }
    }));
    if (v2.valid.length === 1)
      coll.features.push({
        type: "Feature",
        geometry: { type: "Sphere" },
        properties: {
          site: v2.valid[0],
          sitecoordinates: v2.points[0],
          neighbours: []
        }
      });
    return coll;
  };
  v2.triangles = function(data2) {
    if (data2 !== void 0) {
      v2(data2);
    }
    if (!v2.delaunay)
      return false;
    return {
      type: "FeatureCollection",
      features: v2.delaunay.triangles.map((tri, index6) => {
        tri = tri.map((i) => v2.points[i]);
        tri.center = v2.delaunay.centers[index6];
        return tri;
      }).filter((tri) => excess(tri) > 0).map((tri) => ({
        type: "Feature",
        properties: {
          circumcenter: tri.center
        },
        geometry: {
          type: "Polygon",
          coordinates: [[...tri, tri[0]]]
        }
      }))
    };
  };
  v2.links = function(data2) {
    if (data2 !== void 0) {
      v2(data2);
    }
    if (!v2.delaunay)
      return false;
    const _distances = v2.delaunay.edges.map((e) => distance_default2(v2.points[e[0]], v2.points[e[1]])), _urquart = v2.delaunay.urquhart(_distances);
    return {
      type: "FeatureCollection",
      features: v2.delaunay.edges.map((e, i) => ({
        type: "Feature",
        properties: {
          source: v2.valid[e[0]],
          target: v2.valid[e[1]],
          length: _distances[i],
          urquhart: !!_urquart[i]
        },
        geometry: {
          type: "LineString",
          coordinates: [v2.points[e[0]], v2.points[e[1]]]
        }
      }))
    };
  };
  v2.mesh = function(data2) {
    if (data2 !== void 0) {
      v2(data2);
    }
    if (!v2.delaunay)
      return false;
    return {
      type: "MultiLineString",
      coordinates: v2.delaunay.edges.map((e) => [v2.points[e[0]], v2.points[e[1]]])
    };
  };
  v2.cellMesh = function(data2) {
    if (data2 !== void 0) {
      v2(data2);
    }
    if (!v2.delaunay)
      return false;
    const { centers, polygons } = v2.delaunay;
    const coordinates3 = [];
    for (const p of polygons) {
      if (!p)
        continue;
      for (let n = p.length, p02 = p[n - 1], p1 = p[0], i = 0; i < n; p02 = p1, p1 = p[++i]) {
        if (p1 > p02) {
          coordinates3.push([centers[p02], centers[p1]]);
        }
      }
    }
    return {
      type: "MultiLineString",
      coordinates: coordinates3
    };
  };
  v2._found = void 0;
  v2.find = function(x, y, radius) {
    v2._found = v2.delaunay.find(x, y, v2._found);
    if (!radius || distance_default2([x, y], v2.points[v2._found]) < radius)
      return v2._found;
  };
  v2.hull = function(data2) {
    if (data2 !== void 0) {
      v2(data2);
    }
    const hull = v2.delaunay.hull, points = v2.points;
    return hull.length === 0 ? null : {
      type: "Polygon",
      coordinates: [[...hull.map((i) => points[i]), points[hull[0]]]]
    };
  };
  return data ? v2(data) : v2;
}

// node_modules/d3-tricontour/node_modules/d3-array/src/ascending.js
function ascending_default4(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

// node_modules/d3-tricontour/node_modules/d3-array/src/bisector.js
function bisector_default4(compare) {
  if (compare.length === 1)
    compare = ascendingComparator4(compare);
  return {
    left: function(a, x, lo, hi) {
      if (lo == null)
        lo = 0;
      if (hi == null)
        hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) < 0)
          lo = mid + 1;
        else
          hi = mid;
      }
      return lo;
    },
    right: function(a, x, lo, hi) {
      if (lo == null)
        lo = 0;
      if (hi == null)
        hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) > 0)
          hi = mid;
        else
          lo = mid + 1;
      }
      return lo;
    }
  };
}
function ascendingComparator4(f) {
  return function(d, x) {
    return ascending_default4(f(d), x);
  };
}

// node_modules/d3-tricontour/node_modules/d3-array/src/bisect.js
var ascendingBisect4 = bisector_default4(ascending_default4);
var bisectRight4 = ascendingBisect4.right;
var bisectLeft4 = ascendingBisect4.left;

// node_modules/d3-tricontour/node_modules/d3-array/src/array.js
var array4 = Array.prototype;
var slice4 = array4.slice;
var map7 = array4.map;

// node_modules/d3-tricontour/node_modules/d3-array/src/ticks.js
var e104 = Math.sqrt(50);
var e54 = Math.sqrt(10);
var e24 = Math.sqrt(2);

// node_modules/d3-collection/src/map.js
var prefix = "$";
function Map2() {
}
Map2.prototype = map8.prototype = {
  constructor: Map2,
  has: function(key) {
    return prefix + key in this;
  },
  get: function(key) {
    return this[prefix + key];
  },
  set: function(key, value) {
    this[prefix + key] = value;
    return this;
  },
  remove: function(key) {
    var property = prefix + key;
    return property in this && delete this[property];
  },
  clear: function() {
    for (var property in this)
      if (property[0] === prefix)
        delete this[property];
  },
  keys: function() {
    var keys = [];
    for (var property in this)
      if (property[0] === prefix)
        keys.push(property.slice(1));
    return keys;
  },
  values: function() {
    var values = [];
    for (var property in this)
      if (property[0] === prefix)
        values.push(this[property]);
    return values;
  },
  entries: function() {
    var entries = [];
    for (var property in this)
      if (property[0] === prefix)
        entries.push({ key: property.slice(1), value: this[property] });
    return entries;
  },
  size: function() {
    var size = 0;
    for (var property in this)
      if (property[0] === prefix)
        ++size;
    return size;
  },
  empty: function() {
    for (var property in this)
      if (property[0] === prefix)
        return false;
    return true;
  },
  each: function(f) {
    for (var property in this)
      if (property[0] === prefix)
        f(this[property], property.slice(1), this);
  }
};
function map8(object3, f) {
  var map11 = new Map2();
  if (object3 instanceof Map2)
    object3.each(function(value, key2) {
      map11.set(key2, value);
    });
  else if (Array.isArray(object3)) {
    var i = -1, n = object3.length, o;
    if (f == null)
      while (++i < n)
        map11.set(i, object3[i]);
    else
      while (++i < n)
        map11.set(f(o = object3[i], i, object3), o);
  } else if (object3)
    for (var key in object3)
      map11.set(key, object3[key]);
  return map11;
}
var map_default = map8;

// node_modules/d3-collection/src/set.js
function Set2() {
}
var proto = map_default.prototype;
Set2.prototype = set3.prototype = {
  constructor: Set2,
  has: proto.has,
  add: function(value) {
    value += "";
    this[prefix + value] = value;
    return this;
  },
  remove: proto.remove,
  clear: proto.clear,
  values: proto.keys,
  size: proto.size,
  empty: proto.empty,
  each: proto.each
};
function set3(object3, f) {
  var set4 = new Set2();
  if (object3 instanceof Set2)
    object3.each(function(value) {
      set4.add(value);
    });
  else if (object3) {
    var i = -1, n = object3.length;
    if (f == null)
      while (++i < n)
        set4.add(object3[i]);
    else
      while (++i < n)
        set4.add(f(object3[i], i, object3));
  }
  return set4;
}

// node_modules/d3-tricontour/node_modules/d3-scale/src/array.js
var array5 = Array.prototype;
var map9 = array5.map;
var slice5 = array5.slice;

// node_modules/d3-tricontour/node_modules/d3-color/src/define.js
function define_default2(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend2(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}

// node_modules/d3-tricontour/node_modules/d3-color/src/color.js
function Color3() {
}
var darker2 = 0.7;
var brighter2 = 1 / darker2;
var reI2 = "\\s*([+-]?\\d+)\\s*";
var reN2 = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP2 = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex2 = /^#([0-9a-f]{3,8})$/;
var reRgbInteger2 = new RegExp("^rgb\\(" + [reI2, reI2, reI2] + "\\)$");
var reRgbPercent2 = new RegExp("^rgb\\(" + [reP2, reP2, reP2] + "\\)$");
var reRgbaInteger2 = new RegExp("^rgba\\(" + [reI2, reI2, reI2, reN2] + "\\)$");
var reRgbaPercent2 = new RegExp("^rgba\\(" + [reP2, reP2, reP2, reN2] + "\\)$");
var reHslPercent2 = new RegExp("^hsl\\(" + [reN2, reP2, reP2] + "\\)$");
var reHslaPercent2 = new RegExp("^hsla\\(" + [reN2, reP2, reP2, reN2] + "\\)$");
var named2 = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default2(Color3, color2, {
  copy: function(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable: function() {
    return this.rgb().displayable();
  },
  hex: color_formatHex2,
  formatHex: color_formatHex2,
  formatHsl: color_formatHsl2,
  formatRgb: color_formatRgb2,
  toString: color_formatRgb2
});
function color_formatHex2() {
  return this.rgb().formatHex();
}
function color_formatHsl2() {
  return hslConvert2(this).formatHsl();
}
function color_formatRgb2() {
  return this.rgb().formatRgb();
}
function color2(format3) {
  var m, l;
  format3 = (format3 + "").trim().toLowerCase();
  return (m = reHex2.exec(format3)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn2(m) : l === 3 ? new Rgb2(m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, (m & 15) << 4 | m & 15, 1) : l === 8 ? rgba2(m >> 24 & 255, m >> 16 & 255, m >> 8 & 255, (m & 255) / 255) : l === 4 ? rgba2(m >> 12 & 15 | m >> 8 & 240, m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, ((m & 15) << 4 | m & 15) / 255) : null) : (m = reRgbInteger2.exec(format3)) ? new Rgb2(m[1], m[2], m[3], 1) : (m = reRgbPercent2.exec(format3)) ? new Rgb2(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) : (m = reRgbaInteger2.exec(format3)) ? rgba2(m[1], m[2], m[3], m[4]) : (m = reRgbaPercent2.exec(format3)) ? rgba2(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) : (m = reHslPercent2.exec(format3)) ? hsla2(m[1], m[2] / 100, m[3] / 100, 1) : (m = reHslaPercent2.exec(format3)) ? hsla2(m[1], m[2] / 100, m[3] / 100, m[4]) : named2.hasOwnProperty(format3) ? rgbn2(named2[format3]) : format3 === "transparent" ? new Rgb2(NaN, NaN, NaN, 0) : null;
}
function rgbn2(n) {
  return new Rgb2(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
}
function rgba2(r, g, b, a) {
  if (a <= 0)
    r = g = b = NaN;
  return new Rgb2(r, g, b, a);
}
function rgbConvert2(o) {
  if (!(o instanceof Color3))
    o = color2(o);
  if (!o)
    return new Rgb2();
  o = o.rgb();
  return new Rgb2(o.r, o.g, o.b, o.opacity);
}
function rgb2(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert2(r) : new Rgb2(r, g, b, opacity == null ? 1 : opacity);
}
function Rgb2(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}
define_default2(Rgb2, rgb2, extend2(Color3, {
  brighter: function(k) {
    k = k == null ? brighter2 : Math.pow(brighter2, k);
    return new Rgb2(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker2 : Math.pow(darker2, k);
    return new Rgb2(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb: function() {
    return this;
  },
  displayable: function() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex2,
  formatHex: rgb_formatHex2,
  formatRgb: rgb_formatRgb2,
  toString: rgb_formatRgb2
}));
function rgb_formatHex2() {
  return "#" + hex2(this.r) + hex2(this.g) + hex2(this.b);
}
function rgb_formatRgb2() {
  var a = this.opacity;
  a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
  return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
}
function hex2(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla2(h, s, l, a) {
  if (a <= 0)
    h = s = l = NaN;
  else if (l <= 0 || l >= 1)
    h = s = NaN;
  else if (s <= 0)
    h = NaN;
  return new Hsl2(h, s, l, a);
}
function hslConvert2(o) {
  if (o instanceof Hsl2)
    return new Hsl2(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color3))
    o = color2(o);
  if (!o)
    return new Hsl2();
  if (o instanceof Hsl2)
    return o;
  o = o.rgb();
  var r = o.r / 255, g = o.g / 255, b = o.b / 255, min4 = Math.min(r, g, b), max4 = Math.max(r, g, b), h = NaN, s = max4 - min4, l = (max4 + min4) / 2;
  if (s) {
    if (r === max4)
      h = (g - b) / s + (g < b) * 6;
    else if (g === max4)
      h = (b - r) / s + 2;
    else
      h = (r - g) / s + 4;
    s /= l < 0.5 ? max4 + min4 : 2 - max4 - min4;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl2(h, s, l, o.opacity);
}
function hsl3(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert2(h) : new Hsl2(h, s, l, opacity == null ? 1 : opacity);
}
function Hsl2(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}
define_default2(Hsl2, hsl3, extend2(Color3, {
  brighter: function(k) {
    k = k == null ? brighter2 : Math.pow(brighter2, k);
    return new Hsl2(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker2 : Math.pow(darker2, k);
    return new Hsl2(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function() {
    var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
    return new Rgb2(hsl2rgb2(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb2(h, m1, m2), hsl2rgb2(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
  },
  displayable: function() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl: function() {
    var a = this.opacity;
    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a === 1 ? ")" : ", " + a + ")");
  }
}));
function hsl2rgb2(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}

// node_modules/d3-tricontour/node_modules/d3-color/src/math.js
var deg2rad = Math.PI / 180;
var rad2deg = 180 / Math.PI;

// node_modules/d3-tricontour/node_modules/d3-color/src/lab.js
var K2 = 18;
var Xn2 = 0.96422;
var Yn2 = 1;
var Zn2 = 0.82521;
var t03 = 4 / 29;
var t13 = 6 / 29;
var t22 = 3 * t13 * t13;
var t32 = t13 * t13 * t13;
function labConvert2(o) {
  if (o instanceof Lab2)
    return new Lab2(o.l, o.a, o.b, o.opacity);
  if (o instanceof Hcl2)
    return hcl2lab2(o);
  if (!(o instanceof Rgb2))
    o = rgbConvert2(o);
  var r = rgb2lrgb2(o.r), g = rgb2lrgb2(o.g), b = rgb2lrgb2(o.b), y = xyz2lab2((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn2), x, z;
  if (r === g && g === b)
    x = z = y;
  else {
    x = xyz2lab2((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn2);
    z = xyz2lab2((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn2);
  }
  return new Lab2(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
}
function lab3(l, a, b, opacity) {
  return arguments.length === 1 ? labConvert2(l) : new Lab2(l, a, b, opacity == null ? 1 : opacity);
}
function Lab2(l, a, b, opacity) {
  this.l = +l;
  this.a = +a;
  this.b = +b;
  this.opacity = +opacity;
}
define_default2(Lab2, lab3, extend2(Color3, {
  brighter: function(k) {
    return new Lab2(this.l + K2 * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  darker: function(k) {
    return new Lab2(this.l - K2 * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  rgb: function() {
    var y = (this.l + 16) / 116, x = isNaN(this.a) ? y : y + this.a / 500, z = isNaN(this.b) ? y : y - this.b / 200;
    x = Xn2 * lab2xyz2(x);
    y = Yn2 * lab2xyz2(y);
    z = Zn2 * lab2xyz2(z);
    return new Rgb2(lrgb2rgb2(3.1338561 * x - 1.6168667 * y - 0.4906146 * z), lrgb2rgb2(-0.9787684 * x + 1.9161415 * y + 0.033454 * z), lrgb2rgb2(0.0719453 * x - 0.2289914 * y + 1.4052427 * z), this.opacity);
  }
}));
function xyz2lab2(t) {
  return t > t32 ? Math.pow(t, 1 / 3) : t / t22 + t03;
}
function lab2xyz2(t) {
  return t > t13 ? t * t * t : t22 * (t - t03);
}
function lrgb2rgb2(x) {
  return 255 * (x <= 31308e-7 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
}
function rgb2lrgb2(x) {
  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
}
function hclConvert2(o) {
  if (o instanceof Hcl2)
    return new Hcl2(o.h, o.c, o.l, o.opacity);
  if (!(o instanceof Lab2))
    o = labConvert2(o);
  if (o.a === 0 && o.b === 0)
    return new Hcl2(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
  var h = Math.atan2(o.b, o.a) * rad2deg;
  return new Hcl2(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}
function hcl3(h, c, l, opacity) {
  return arguments.length === 1 ? hclConvert2(h) : new Hcl2(h, c, l, opacity == null ? 1 : opacity);
}
function Hcl2(h, c, l, opacity) {
  this.h = +h;
  this.c = +c;
  this.l = +l;
  this.opacity = +opacity;
}
function hcl2lab2(o) {
  if (isNaN(o.h))
    return new Lab2(o.l, 0, 0, o.opacity);
  var h = o.h * deg2rad;
  return new Lab2(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
}
define_default2(Hcl2, hcl3, extend2(Color3, {
  brighter: function(k) {
    return new Hcl2(this.h, this.c, this.l + K2 * (k == null ? 1 : k), this.opacity);
  },
  darker: function(k) {
    return new Hcl2(this.h, this.c, this.l - K2 * (k == null ? 1 : k), this.opacity);
  },
  rgb: function() {
    return hcl2lab2(this).rgb();
  }
}));

// node_modules/d3-tricontour/node_modules/d3-color/src/cubehelix.js
var A5 = -0.14861;
var B3 = 1.78277;
var C3 = -0.29227;
var D3 = -0.90649;
var E2 = 1.97294;
var ED2 = E2 * D3;
var EB2 = E2 * B3;
var BC_DA2 = B3 * C3 - D3 * A5;
function cubehelixConvert2(o) {
  if (o instanceof Cubehelix2)
    return new Cubehelix2(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Rgb2))
    o = rgbConvert2(o);
  var r = o.r / 255, g = o.g / 255, b = o.b / 255, l = (BC_DA2 * b + ED2 * r - EB2 * g) / (BC_DA2 + ED2 - EB2), bl = b - l, k = (E2 * (g - l) - C3 * bl) / D3, s = Math.sqrt(k * k + bl * bl) / (E2 * l * (1 - l)), h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
  return new Cubehelix2(h < 0 ? h + 360 : h, s, l, o.opacity);
}
function cubehelix3(h, s, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert2(h) : new Cubehelix2(h, s, l, opacity == null ? 1 : opacity);
}
function Cubehelix2(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}
define_default2(Cubehelix2, cubehelix3, extend2(Color3, {
  brighter: function(k) {
    k = k == null ? brighter2 : Math.pow(brighter2, k);
    return new Cubehelix2(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker2 : Math.pow(darker2, k);
    return new Cubehelix2(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function() {
    var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad, l = +this.l, a = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh2 = Math.cos(h), sinh2 = Math.sin(h);
    return new Rgb2(255 * (l + a * (A5 * cosh2 + B3 * sinh2)), 255 * (l + a * (C3 * cosh2 + D3 * sinh2)), 255 * (l + a * (E2 * cosh2)), this.opacity);
  }
}));

// node_modules/d3-tricontour/node_modules/d3-interpolate/src/basis.js
function basis2(t15, v0, v1, v2, v3) {
  var t23 = t15 * t15, t33 = t23 * t15;
  return ((1 - 3 * t15 + 3 * t23 - t33) * v0 + (4 - 6 * t23 + 3 * t33) * v1 + (1 + 3 * t15 + 3 * t23 - 3 * t33) * v2 + t33 * v3) / 6;
}
function basis_default2(values) {
  var n = values.length - 1;
  return function(t) {
    var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis2((t - i / n) * n, v0, v1, v2, v3);
  };
}

// node_modules/d3-tricontour/node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default2(values) {
  var n = values.length;
  return function(t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
    return basis2((t - i / n) * n, v0, v1, v2, v3);
  };
}

// node_modules/d3-tricontour/node_modules/d3-interpolate/src/constant.js
function constant_default8(x) {
  return function() {
    return x;
  };
}

// node_modules/d3-tricontour/node_modules/d3-interpolate/src/color.js
function linear3(a, d) {
  return function(t) {
    return a + t * d;
  };
}
function exponential2(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
    return Math.pow(a + t * b, y);
  };
}
function hue2(a, b) {
  var d = b - a;
  return d ? linear3(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant_default8(isNaN(a) ? b : a);
}
function gamma2(y) {
  return (y = +y) === 1 ? nogamma2 : function(a, b) {
    return b - a ? exponential2(a, b, y) : constant_default8(isNaN(a) ? b : a);
  };
}
function nogamma2(a, b) {
  var d = b - a;
  return d ? linear3(a, d) : constant_default8(isNaN(a) ? b : a);
}

// node_modules/d3-tricontour/node_modules/d3-interpolate/src/rgb.js
var rgb_default2 = function rgbGamma2(y) {
  var color3 = gamma2(y);
  function rgb3(start, end) {
    var r = color3((start = rgb2(start)).r, (end = rgb2(end)).r), g = color3(start.g, end.g), b = color3(start.b, end.b), opacity = nogamma2(start.opacity, end.opacity);
    return function(t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }
  rgb3.gamma = rgbGamma2;
  return rgb3;
}(1);
function rgbSpline2(spline) {
  return function(colors) {
    var n = colors.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color3;
    for (i = 0; i < n; ++i) {
      color3 = rgb2(colors[i]);
      r[i] = color3.r || 0;
      g[i] = color3.g || 0;
      b[i] = color3.b || 0;
    }
    r = spline(r);
    g = spline(g);
    b = spline(b);
    color3.opacity = 1;
    return function(t) {
      color3.r = r(t);
      color3.g = g(t);
      color3.b = b(t);
      return color3 + "";
    };
  };
}
var rgbBasis2 = rgbSpline2(basis_default2);
var rgbBasisClosed2 = rgbSpline2(basisClosed_default2);

// node_modules/d3-tricontour/node_modules/d3-interpolate/src/number.js
function number_default6(a, b) {
  return a = +a, b = +b, function(t) {
    return a * (1 - t) + b * t;
  };
}

// node_modules/d3-tricontour/node_modules/d3-interpolate/src/string.js
var reA2 = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB2 = new RegExp(reA2.source, "g");

// node_modules/d3-tricontour/node_modules/d3-interpolate/src/transform/decompose.js
var degrees6 = 180 / Math.PI;
var identity4 = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose_default2(a, b, c, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b))
    a /= scaleX, b /= scaleX;
  if (skewX = a * c + b * d)
    c -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c * c + d * d))
    c /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c)
    a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees6,
    skewX: Math.atan(skewX) * degrees6,
    scaleX,
    scaleY
  };
}

// node_modules/d3-tricontour/node_modules/d3-interpolate/src/transform/parse.js
var cssNode;
var cssRoot;
var cssView;
var svgNode2;
function parseCss2(value) {
  if (value === "none")
    return identity4;
  if (!cssNode)
    cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
  cssNode.style.transform = value;
  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
  cssRoot.removeChild(cssNode);
  value = value.slice(7, -1).split(",");
  return decompose_default2(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
}
function parseSvg2(value) {
  if (value == null)
    return identity4;
  if (!svgNode2)
    svgNode2 = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode2.setAttribute("transform", value);
  if (!(value = svgNode2.transform.baseVal.consolidate()))
    return identity4;
  value = value.matrix;
  return decompose_default2(value.a, value.b, value.c, value.d, value.e, value.f);
}

// node_modules/d3-tricontour/node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform2(parse, pxComma, pxParen, degParen) {
  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({ i: i - 4, x: number_default6(xa, xb) }, { i: i - 2, x: number_default6(ya, yb) });
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180)
        b += 360;
      else if (b - a > 180)
        a += 360;
      q.push({ i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: number_default6(a, b) });
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }
  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({ i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: number_default6(a, b) });
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }
  function scale2(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({ i: i - 4, x: number_default6(xa, xb) }, { i: i - 2, x: number_default6(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a, b) {
    var s = [], q = [];
    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale2(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null;
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n)
        s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  };
}
var interpolateTransformCss2 = interpolateTransform2(parseCss2, "px, ", "px)", "deg)");
var interpolateTransformSvg2 = interpolateTransform2(parseSvg2, ", ", ")", ")");

// node_modules/d3-tricontour/node_modules/d3-interpolate/src/hsl.js
function hsl4(hue3) {
  return function(start, end) {
    var h = hue3((start = hsl3(start)).h, (end = hsl3(end)).h), s = nogamma2(start.s, end.s), l = nogamma2(start.l, end.l), opacity = nogamma2(start.opacity, end.opacity);
    return function(t) {
      start.h = h(t);
      start.s = s(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  };
}
var hsl_default2 = hsl4(hue2);
var hslLong2 = hsl4(nogamma2);

// node_modules/d3-tricontour/node_modules/d3-interpolate/src/hcl.js
function hcl4(hue3) {
  return function(start, end) {
    var h = hue3((start = hcl3(start)).h, (end = hcl3(end)).h), c = nogamma2(start.c, end.c), l = nogamma2(start.l, end.l), opacity = nogamma2(start.opacity, end.opacity);
    return function(t) {
      start.h = h(t);
      start.c = c(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  };
}
var hcl_default2 = hcl4(hue2);
var hclLong2 = hcl4(nogamma2);

// node_modules/d3-tricontour/node_modules/d3-interpolate/src/cubehelix.js
function cubehelix4(hue3) {
  return function cubehelixGamma(y) {
    y = +y;
    function cubehelix5(start, end) {
      var h = hue3((start = cubehelix3(start)).h, (end = cubehelix3(end)).h), s = nogamma2(start.s, end.s), l = nogamma2(start.l, end.l), opacity = nogamma2(start.opacity, end.opacity);
      return function(t) {
        start.h = h(t);
        start.s = s(t);
        start.l = l(Math.pow(t, y));
        start.opacity = opacity(t);
        return start + "";
      };
    }
    cubehelix5.gamma = cubehelixGamma;
    return cubehelix5;
  }(1);
}
var cubehelix_default2 = cubehelix4(hue2);
var cubehelixLong2 = cubehelix4(nogamma2);

// node_modules/d3-tricontour/node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default2(x) {
  return Math.abs(x = Math.round(x)) >= 1e21 ? x.toLocaleString("en").replace(/,/g, "") : x.toString(10);
}
function formatDecimalParts2(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0)
    return null;
  var i, coefficient = x.slice(0, i);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x.slice(i + 1)
  ];
}

// node_modules/d3-tricontour/node_modules/d3-format/src/exponent.js
function exponent_default2(x) {
  return x = formatDecimalParts2(Math.abs(x)), x ? x[1] : NaN;
}

// node_modules/d3-tricontour/node_modules/d3-format/src/formatGroup.js
function formatGroup_default2(grouping, thousands) {
  return function(value, width) {
    var i = value.length, t = [], j = 0, g = grouping[0], length = 0;
    while (i > 0 && g > 0) {
      if (length + g + 1 > width)
        g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width)
        break;
      g = grouping[j = (j + 1) % grouping.length];
    }
    return t.reverse().join(thousands);
  };
}

// node_modules/d3-tricontour/node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default2(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
}

// node_modules/d3-tricontour/node_modules/d3-format/src/formatSpecifier.js
var re2 = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier2(specifier) {
  if (!(match = re2.exec(specifier)))
    throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier2({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier2.prototype = FormatSpecifier2.prototype;
function FormatSpecifier2(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier2.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

// node_modules/d3-tricontour/node_modules/d3-format/src/formatTrim.js
function formatTrim_default2(s) {
  out:
    for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
      switch (s[i]) {
        case ".":
          i0 = i1 = i;
          break;
        case "0":
          if (i0 === 0)
            i0 = i;
          i1 = i;
          break;
        default:
          if (!+s[i])
            break out;
          if (i0 > 0)
            i0 = 0;
          break;
      }
    }
  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}

// node_modules/d3-tricontour/node_modules/d3-format/src/formatPrefixAuto.js
var prefixExponent2;
function formatPrefixAuto_default2(x, p) {
  var d = formatDecimalParts2(x, p);
  if (!d)
    return x + "";
  var coefficient = d[0], exponent = d[1], i = exponent - (prefixExponent2 = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts2(x, Math.max(0, p + i - 1))[0];
}

// node_modules/d3-tricontour/node_modules/d3-format/src/formatRounded.js
function formatRounded_default2(x, p) {
  var d = formatDecimalParts2(x, p);
  if (!d)
    return x + "";
  var coefficient = d[0], exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

// node_modules/d3-tricontour/node_modules/d3-format/src/formatTypes.js
var formatTypes_default2 = {
  "%": function(x, p) {
    return (x * 100).toFixed(p);
  },
  "b": function(x) {
    return Math.round(x).toString(2);
  },
  "c": function(x) {
    return x + "";
  },
  "d": formatDecimal_default2,
  "e": function(x, p) {
    return x.toExponential(p);
  },
  "f": function(x, p) {
    return x.toFixed(p);
  },
  "g": function(x, p) {
    return x.toPrecision(p);
  },
  "o": function(x) {
    return Math.round(x).toString(8);
  },
  "p": function(x, p) {
    return formatRounded_default2(x * 100, p);
  },
  "r": formatRounded_default2,
  "s": formatPrefixAuto_default2,
  "X": function(x) {
    return Math.round(x).toString(16).toUpperCase();
  },
  "x": function(x) {
    return Math.round(x).toString(16);
  }
};

// node_modules/d3-tricontour/node_modules/d3-format/src/identity.js
function identity_default10(x) {
  return x;
}

// node_modules/d3-tricontour/node_modules/d3-format/src/locale.js
var map10 = Array.prototype.map;
var prefixes2 = ["y", "z", "a", "f", "p", "n", "\xB5", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function locale_default2(locale5) {
  var group3 = locale5.grouping === void 0 || locale5.thousands === void 0 ? identity_default10 : formatGroup_default2(map10.call(locale5.grouping, Number), locale5.thousands + ""), currencyPrefix = locale5.currency === void 0 ? "" : locale5.currency[0] + "", currencySuffix = locale5.currency === void 0 ? "" : locale5.currency[1] + "", decimal = locale5.decimal === void 0 ? "." : locale5.decimal + "", numerals = locale5.numerals === void 0 ? identity_default10 : formatNumerals_default2(map10.call(locale5.numerals, String)), percent = locale5.percent === void 0 ? "%" : locale5.percent + "", minus = locale5.minus === void 0 ? "-" : locale5.minus + "", nan = locale5.nan === void 0 ? "NaN" : locale5.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier2(specifier);
    var fill = specifier.fill, align = specifier.align, sign4 = specifier.sign, symbol = specifier.symbol, zero2 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
    if (type === "n")
      comma = true, type = "g";
    else if (!formatTypes_default2[type])
      precision === void 0 && (precision = 12), trim = true, type = "g";
    if (zero2 || fill === "0" && align === "=")
      zero2 = true, fill = "0", align = "=";
    var prefix2 = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
    var formatType = formatTypes_default2[type], maybeSuffix = /[defgprs%]/.test(type);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format3(value) {
      var valuePrefix = prefix2, valueSuffix = suffix, i, n, c;
      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim)
          value = formatTrim_default2(value);
        if (valueNegative && +value === 0 && sign4 !== "+")
          valueNegative = false;
        valuePrefix = (valueNegative ? sign4 === "(" ? sign4 : minus : sign4 === "-" || sign4 === "(" ? "" : sign4) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes2[8 + prefixExponent2 / 3] : "") + valueSuffix + (valueNegative && sign4 === "(" ? ")" : "");
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }
      if (comma && !zero2)
        value = group3(value, Infinity);
      var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
      if (comma && zero2)
        value = group3(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format3.toString = function() {
      return specifier + "";
    };
    return format3;
  }
  function formatPrefix3(specifier, value) {
    var f = newFormat((specifier = formatSpecifier2(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent_default2(value) / 3))) * 3, k = Math.pow(10, -e), prefix2 = prefixes2[8 + e / 3];
    return function(value2) {
      return f(k * value2) + prefix2;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix3
  };
}

// node_modules/d3-tricontour/node_modules/d3-format/src/defaultLocale.js
var locale3;
var format2;
var formatPrefix2;
defaultLocale3({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""],
  minus: "-"
});
function defaultLocale3(definition) {
  locale3 = locale_default2(definition);
  format2 = locale3.format;
  formatPrefix2 = locale3.formatPrefix;
  return locale3;
}

// node_modules/d3-tricontour/node_modules/d3-time/src/interval.js
var t04 = new Date();
var t14 = new Date();
function newInterval2(floori, offseti, count3, field) {
  function interval(date) {
    return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;
  }
  interval.floor = function(date) {
    return floori(date = new Date(+date)), date;
  };
  interval.ceil = function(date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };
  interval.round = function(date) {
    var d0 = interval(date), d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };
  interval.offset = function(date, step) {
    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };
  interval.range = function(start, stop, step) {
    var range2 = [], previous;
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0))
      return range2;
    do
      range2.push(previous = new Date(+start)), offseti(start, step), floori(start);
    while (previous < start && start < stop);
    return range2;
  };
  interval.filter = function(test) {
    return newInterval2(function(date) {
      if (date >= date)
        while (floori(date), !test(date))
          date.setTime(date - 1);
    }, function(date, step) {
      if (date >= date) {
        if (step < 0)
          while (++step <= 0) {
            while (offseti(date, -1), !test(date)) {
            }
          }
        else
          while (--step >= 0) {
            while (offseti(date, 1), !test(date)) {
            }
          }
      }
    });
  };
  if (count3) {
    interval.count = function(start, end) {
      t04.setTime(+start), t14.setTime(+end);
      floori(t04), floori(t14);
      return Math.floor(count3(t04, t14));
    };
    interval.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function(d) {
        return field(d) % step === 0;
      } : function(d) {
        return interval.count(0, d) % step === 0;
      });
    };
  }
  return interval;
}

// node_modules/d3-tricontour/node_modules/d3-time/src/millisecond.js
var millisecond2 = newInterval2(function() {
}, function(date, step) {
  date.setTime(+date + step);
}, function(start, end) {
  return end - start;
});
millisecond2.every = function(k) {
  k = Math.floor(k);
  if (!isFinite(k) || !(k > 0))
    return null;
  if (!(k > 1))
    return millisecond2;
  return newInterval2(function(date) {
    date.setTime(Math.floor(date / k) * k);
  }, function(date, step) {
    date.setTime(+date + step * k);
  }, function(start, end) {
    return (end - start) / k;
  });
};
var milliseconds2 = millisecond2.range;

// node_modules/d3-tricontour/node_modules/d3-time/src/duration.js
var durationSecond2 = 1e3;
var durationMinute2 = 6e4;
var durationHour2 = 36e5;
var durationDay2 = 864e5;
var durationWeek2 = 6048e5;

// node_modules/d3-tricontour/node_modules/d3-time/src/second.js
var second2 = newInterval2(function(date) {
  date.setTime(date - date.getMilliseconds());
}, function(date, step) {
  date.setTime(+date + step * durationSecond2);
}, function(start, end) {
  return (end - start) / durationSecond2;
}, function(date) {
  return date.getUTCSeconds();
});
var seconds2 = second2.range;

// node_modules/d3-tricontour/node_modules/d3-time/src/minute.js
var minute2 = newInterval2(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond2);
}, function(date, step) {
  date.setTime(+date + step * durationMinute2);
}, function(start, end) {
  return (end - start) / durationMinute2;
}, function(date) {
  return date.getMinutes();
});
var minutes2 = minute2.range;

// node_modules/d3-tricontour/node_modules/d3-time/src/hour.js
var hour2 = newInterval2(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond2 - date.getMinutes() * durationMinute2);
}, function(date, step) {
  date.setTime(+date + step * durationHour2);
}, function(start, end) {
  return (end - start) / durationHour2;
}, function(date) {
  return date.getHours();
});
var hours2 = hour2.range;

// node_modules/d3-tricontour/node_modules/d3-time/src/day.js
var day2 = newInterval2(function(date) {
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setDate(date.getDate() + step);
}, function(start, end) {
  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute2) / durationDay2;
}, function(date) {
  return date.getDate() - 1;
});
var day_default2 = day2;
var days2 = day2.range;

// node_modules/d3-tricontour/node_modules/d3-time/src/week.js
function weekday2(i) {
  return newInterval2(function(date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function(start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute2) / durationWeek2;
  });
}
var sunday2 = weekday2(0);
var monday2 = weekday2(1);
var tuesday2 = weekday2(2);
var wednesday2 = weekday2(3);
var thursday2 = weekday2(4);
var friday2 = weekday2(5);
var saturday2 = weekday2(6);
var sundays2 = sunday2.range;
var mondays2 = monday2.range;
var tuesdays2 = tuesday2.range;
var wednesdays2 = wednesday2.range;
var thursdays2 = thursday2.range;
var fridays2 = friday2.range;
var saturdays2 = saturday2.range;

// node_modules/d3-tricontour/node_modules/d3-time/src/month.js
var month2 = newInterval2(function(date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setMonth(date.getMonth() + step);
}, function(start, end) {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function(date) {
  return date.getMonth();
});
var months2 = month2.range;

// node_modules/d3-tricontour/node_modules/d3-time/src/year.js
var year2 = newInterval2(function(date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function(start, end) {
  return end.getFullYear() - start.getFullYear();
}, function(date) {
  return date.getFullYear();
});
year2.every = function(k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval2(function(date) {
    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setFullYear(date.getFullYear() + step * k);
  });
};
var year_default2 = year2;
var years2 = year2.range;

// node_modules/d3-tricontour/node_modules/d3-time/src/utcMinute.js
var utcMinute2 = newInterval2(function(date) {
  date.setUTCSeconds(0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationMinute2);
}, function(start, end) {
  return (end - start) / durationMinute2;
}, function(date) {
  return date.getUTCMinutes();
});
var utcMinutes2 = utcMinute2.range;

// node_modules/d3-tricontour/node_modules/d3-time/src/utcHour.js
var utcHour2 = newInterval2(function(date) {
  date.setUTCMinutes(0, 0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationHour2);
}, function(start, end) {
  return (end - start) / durationHour2;
}, function(date) {
  return date.getUTCHours();
});
var utcHours2 = utcHour2.range;

// node_modules/d3-tricontour/node_modules/d3-time/src/utcDay.js
var utcDay2 = newInterval2(function(date) {
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function(start, end) {
  return (end - start) / durationDay2;
}, function(date) {
  return date.getUTCDate() - 1;
});
var utcDay_default2 = utcDay2;
var utcDays2 = utcDay2.range;

// node_modules/d3-tricontour/node_modules/d3-time/src/utcWeek.js
function utcWeekday2(i) {
  return newInterval2(function(date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function(start, end) {
    return (end - start) / durationWeek2;
  });
}
var utcSunday2 = utcWeekday2(0);
var utcMonday2 = utcWeekday2(1);
var utcTuesday2 = utcWeekday2(2);
var utcWednesday2 = utcWeekday2(3);
var utcThursday2 = utcWeekday2(4);
var utcFriday2 = utcWeekday2(5);
var utcSaturday2 = utcWeekday2(6);
var utcSundays2 = utcSunday2.range;
var utcMondays2 = utcMonday2.range;
var utcTuesdays2 = utcTuesday2.range;
var utcWednesdays2 = utcWednesday2.range;
var utcThursdays2 = utcThursday2.range;
var utcFridays2 = utcFriday2.range;
var utcSaturdays2 = utcSaturday2.range;

// node_modules/d3-tricontour/node_modules/d3-time/src/utcMonth.js
var utcMonth2 = newInterval2(function(date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function(start, end) {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, function(date) {
  return date.getUTCMonth();
});
var utcMonths2 = utcMonth2.range;

// node_modules/d3-tricontour/node_modules/d3-time/src/utcYear.js
var utcYear2 = newInterval2(function(date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function(start, end) {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, function(date) {
  return date.getUTCFullYear();
});
utcYear2.every = function(k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval2(function(date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k);
  });
};
var utcYear_default2 = utcYear2;
var utcYears2 = utcYear2.range;

// node_modules/d3-tricontour/node_modules/d3-time-format/src/locale.js
function localDate2(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }
  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}
function utcDate2(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }
  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}
function newDate2(y, m, d) {
  return { y, m, d, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale2(locale5) {
  var locale_dateTime = locale5.dateTime, locale_date = locale5.date, locale_time = locale5.time, locale_periods = locale5.periods, locale_weekdays = locale5.days, locale_shortWeekdays = locale5.shortDays, locale_months = locale5.months, locale_shortMonths = locale5.shortMonths;
  var periodRe = formatRe2(locale_periods), periodLookup = formatLookup2(locale_periods), weekdayRe = formatRe2(locale_weekdays), weekdayLookup = formatLookup2(locale_weekdays), shortWeekdayRe = formatRe2(locale_shortWeekdays), shortWeekdayLookup = formatLookup2(locale_shortWeekdays), monthRe = formatRe2(locale_months), monthLookup = formatLookup2(locale_months), shortMonthRe = formatRe2(locale_shortMonths), shortMonthLookup = formatLookup2(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth2,
    "e": formatDayOfMonth2,
    "f": formatMicroseconds2,
    "g": formatYearISO2,
    "G": formatFullYearISO2,
    "H": formatHour242,
    "I": formatHour122,
    "j": formatDayOfYear2,
    "L": formatMilliseconds2,
    "m": formatMonthNumber2,
    "M": formatMinutes2,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp2,
    "s": formatUnixTimestampSeconds2,
    "S": formatSeconds2,
    "u": formatWeekdayNumberMonday2,
    "U": formatWeekNumberSunday2,
    "V": formatWeekNumberISO2,
    "w": formatWeekdayNumberSunday2,
    "W": formatWeekNumberMonday2,
    "x": null,
    "X": null,
    "y": formatYear2,
    "Y": formatFullYear2,
    "Z": formatZone2,
    "%": formatLiteralPercent2
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth2,
    "e": formatUTCDayOfMonth2,
    "f": formatUTCMicroseconds2,
    "g": formatUTCYearISO2,
    "G": formatUTCFullYearISO2,
    "H": formatUTCHour242,
    "I": formatUTCHour122,
    "j": formatUTCDayOfYear2,
    "L": formatUTCMilliseconds2,
    "m": formatUTCMonthNumber2,
    "M": formatUTCMinutes2,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp2,
    "s": formatUnixTimestampSeconds2,
    "S": formatUTCSeconds2,
    "u": formatUTCWeekdayNumberMonday2,
    "U": formatUTCWeekNumberSunday2,
    "V": formatUTCWeekNumberISO2,
    "w": formatUTCWeekdayNumberSunday2,
    "W": formatUTCWeekNumberMonday2,
    "x": null,
    "X": null,
    "y": formatUTCYear2,
    "Y": formatUTCFullYear2,
    "Z": formatUTCZone2,
    "%": formatLiteralPercent2
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth2,
    "e": parseDayOfMonth2,
    "f": parseMicroseconds2,
    "g": parseYear2,
    "G": parseFullYear2,
    "H": parseHour242,
    "I": parseHour242,
    "j": parseDayOfYear2,
    "L": parseMilliseconds2,
    "m": parseMonthNumber2,
    "M": parseMinutes2,
    "p": parsePeriod,
    "q": parseQuarter2,
    "Q": parseUnixTimestamp2,
    "s": parseUnixTimestampSeconds2,
    "S": parseSeconds2,
    "u": parseWeekdayNumberMonday2,
    "U": parseWeekNumberSunday2,
    "V": parseWeekNumberISO2,
    "w": parseWeekdayNumberSunday2,
    "W": parseWeekNumberMonday2,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear2,
    "Y": parseFullYear2,
    "Z": parseZone2,
    "%": parseLiteralPercent2
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date) {
      var string = [], i = -1, j = 0, n = specifier.length, c, pad3, format3;
      if (!(date instanceof Date))
        date = new Date(+date);
      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j, i));
          if ((pad3 = pads2[c = specifier.charAt(++i)]) != null)
            c = specifier.charAt(++i);
          else
            pad3 = c === "e" ? " " : "0";
          if (format3 = formats2[c])
            c = format3(date, pad3);
          string.push(c);
          j = i + 1;
        }
      }
      string.push(specifier.slice(j, i));
      return string.join("");
    };
  }
  function newParse(specifier, Z) {
    return function(string) {
      var d = newDate2(1900, void 0, 1), i = parseSpecifier(d, specifier, string += "", 0), week, day3;
      if (i != string.length)
        return null;
      if ("Q" in d)
        return new Date(d.Q);
      if ("s" in d)
        return new Date(d.s * 1e3 + ("L" in d ? d.L : 0));
      if (Z && !("Z" in d))
        d.Z = 0;
      if ("p" in d)
        d.H = d.H % 12 + d.p * 12;
      if (d.m === void 0)
        d.m = "q" in d ? d.q : 0;
      if ("V" in d) {
        if (d.V < 1 || d.V > 53)
          return null;
        if (!("w" in d))
          d.w = 1;
        if ("Z" in d) {
          week = utcDate2(newDate2(d.y, 0, 1)), day3 = week.getUTCDay();
          week = day3 > 4 || day3 === 0 ? utcMonday2.ceil(week) : utcMonday2(week);
          week = utcDay_default2.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = localDate2(newDate2(d.y, 0, 1)), day3 = week.getDay();
          week = day3 > 4 || day3 === 0 ? monday2.ceil(week) : monday2(week);
          week = day_default2.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d))
          d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day3 = "Z" in d ? utcDate2(newDate2(d.y, 0, 1)).getUTCDay() : localDate2(newDate2(d.y, 0, 1)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day3 + 5) % 7 : d.w + d.U * 7 - (day3 + 6) % 7;
      }
      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate2(d);
      }
      return localDate2(d);
    };
  }
  function parseSpecifier(d, specifier, string, j) {
    var i = 0, n = specifier.length, m = string.length, c, parse;
    while (i < n) {
      if (j >= m)
        return -1;
      c = specifier.charCodeAt(i++);
      if (c === 37) {
        c = specifier.charAt(i++);
        parse = parses[c in pads2 ? specifier.charAt(i++) : c];
        if (!parse || (j = parse(d, string, j)) < 0)
          return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }
    return j;
  }
  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }
  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }
  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }
  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }
  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }
  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }
  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }
  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }
  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }
  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }
  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }
  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }
  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }
  function formatQuarter(d) {
    return 1 + ~~(d.getMonth() / 3);
  }
  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }
  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }
  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }
  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }
  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d) {
    return 1 + ~~(d.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f = newFormat(specifier += "", formats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    parse: function(specifier) {
      var p = newParse(specifier += "", false);
      p.toString = function() {
        return specifier;
      };
      return p;
    },
    utcFormat: function(specifier) {
      var f = newFormat(specifier += "", utcFormats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    utcParse: function(specifier) {
      var p = newParse(specifier += "", true);
      p.toString = function() {
        return specifier;
      };
      return p;
    }
  };
}
var pads2 = { "-": "", "_": " ", "0": "0" };
var numberRe2 = /^\s*\d+/;
var percentRe2 = /^%/;
var requoteRe2 = /[\\^$*+?|[\]().{}]/g;
function pad2(value, fill, width) {
  var sign4 = value < 0 ? "-" : "", string = (sign4 ? -value : value) + "", length = string.length;
  return sign4 + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}
function requote2(s) {
  return s.replace(requoteRe2, "\\$&");
}
function formatRe2(names) {
  return new RegExp("^(?:" + names.map(requote2).join("|") + ")", "i");
}
function formatLookup2(names) {
  var map11 = {}, i = -1, n = names.length;
  while (++i < n)
    map11[names[i].toLowerCase()] = i;
  return map11;
}
function parseWeekdayNumberSunday2(d, string, i) {
  var n = numberRe2.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}
function parseWeekdayNumberMonday2(d, string, i) {
  var n = numberRe2.exec(string.slice(i, i + 1));
  return n ? (d.u = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberSunday2(d, string, i) {
  var n = numberRe2.exec(string.slice(i, i + 2));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberISO2(d, string, i) {
  var n = numberRe2.exec(string.slice(i, i + 2));
  return n ? (d.V = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberMonday2(d, string, i) {
  var n = numberRe2.exec(string.slice(i, i + 2));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}
function parseFullYear2(d, string, i) {
  var n = numberRe2.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}
function parseYear2(d, string, i) {
  var n = numberRe2.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2e3), i + n[0].length) : -1;
}
function parseZone2(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}
function parseQuarter2(d, string, i) {
  var n = numberRe2.exec(string.slice(i, i + 1));
  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
}
function parseMonthNumber2(d, string, i) {
  var n = numberRe2.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}
function parseDayOfMonth2(d, string, i) {
  var n = numberRe2.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}
function parseDayOfYear2(d, string, i) {
  var n = numberRe2.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}
function parseHour242(d, string, i) {
  var n = numberRe2.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}
function parseMinutes2(d, string, i) {
  var n = numberRe2.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}
function parseSeconds2(d, string, i) {
  var n = numberRe2.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}
function parseMilliseconds2(d, string, i) {
  var n = numberRe2.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}
function parseMicroseconds2(d, string, i) {
  var n = numberRe2.exec(string.slice(i, i + 6));
  return n ? (d.L = Math.floor(n[0] / 1e3), i + n[0].length) : -1;
}
function parseLiteralPercent2(d, string, i) {
  var n = percentRe2.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}
function parseUnixTimestamp2(d, string, i) {
  var n = numberRe2.exec(string.slice(i));
  return n ? (d.Q = +n[0], i + n[0].length) : -1;
}
function parseUnixTimestampSeconds2(d, string, i) {
  var n = numberRe2.exec(string.slice(i));
  return n ? (d.s = +n[0], i + n[0].length) : -1;
}
function formatDayOfMonth2(d, p) {
  return pad2(d.getDate(), p, 2);
}
function formatHour242(d, p) {
  return pad2(d.getHours(), p, 2);
}
function formatHour122(d, p) {
  return pad2(d.getHours() % 12 || 12, p, 2);
}
function formatDayOfYear2(d, p) {
  return pad2(1 + day_default2.count(year_default2(d), d), p, 3);
}
function formatMilliseconds2(d, p) {
  return pad2(d.getMilliseconds(), p, 3);
}
function formatMicroseconds2(d, p) {
  return formatMilliseconds2(d, p) + "000";
}
function formatMonthNumber2(d, p) {
  return pad2(d.getMonth() + 1, p, 2);
}
function formatMinutes2(d, p) {
  return pad2(d.getMinutes(), p, 2);
}
function formatSeconds2(d, p) {
  return pad2(d.getSeconds(), p, 2);
}
function formatWeekdayNumberMonday2(d) {
  var day3 = d.getDay();
  return day3 === 0 ? 7 : day3;
}
function formatWeekNumberSunday2(d, p) {
  return pad2(sunday2.count(year_default2(d) - 1, d), p, 2);
}
function dISO2(d) {
  var day3 = d.getDay();
  return day3 >= 4 || day3 === 0 ? thursday2(d) : thursday2.ceil(d);
}
function formatWeekNumberISO2(d, p) {
  d = dISO2(d);
  return pad2(thursday2.count(year_default2(d), d) + (year_default2(d).getDay() === 4), p, 2);
}
function formatWeekdayNumberSunday2(d) {
  return d.getDay();
}
function formatWeekNumberMonday2(d, p) {
  return pad2(monday2.count(year_default2(d) - 1, d), p, 2);
}
function formatYear2(d, p) {
  return pad2(d.getFullYear() % 100, p, 2);
}
function formatYearISO2(d, p) {
  d = dISO2(d);
  return pad2(d.getFullYear() % 100, p, 2);
}
function formatFullYear2(d, p) {
  return pad2(d.getFullYear() % 1e4, p, 4);
}
function formatFullYearISO2(d, p) {
  var day3 = d.getDay();
  d = day3 >= 4 || day3 === 0 ? thursday2(d) : thursday2.ceil(d);
  return pad2(d.getFullYear() % 1e4, p, 4);
}
function formatZone2(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+")) + pad2(z / 60 | 0, "0", 2) + pad2(z % 60, "0", 2);
}
function formatUTCDayOfMonth2(d, p) {
  return pad2(d.getUTCDate(), p, 2);
}
function formatUTCHour242(d, p) {
  return pad2(d.getUTCHours(), p, 2);
}
function formatUTCHour122(d, p) {
  return pad2(d.getUTCHours() % 12 || 12, p, 2);
}
function formatUTCDayOfYear2(d, p) {
  return pad2(1 + utcDay_default2.count(utcYear_default2(d), d), p, 3);
}
function formatUTCMilliseconds2(d, p) {
  return pad2(d.getUTCMilliseconds(), p, 3);
}
function formatUTCMicroseconds2(d, p) {
  return formatUTCMilliseconds2(d, p) + "000";
}
function formatUTCMonthNumber2(d, p) {
  return pad2(d.getUTCMonth() + 1, p, 2);
}
function formatUTCMinutes2(d, p) {
  return pad2(d.getUTCMinutes(), p, 2);
}
function formatUTCSeconds2(d, p) {
  return pad2(d.getUTCSeconds(), p, 2);
}
function formatUTCWeekdayNumberMonday2(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday2(d, p) {
  return pad2(utcSunday2.count(utcYear_default2(d) - 1, d), p, 2);
}
function UTCdISO2(d) {
  var day3 = d.getUTCDay();
  return day3 >= 4 || day3 === 0 ? utcThursday2(d) : utcThursday2.ceil(d);
}
function formatUTCWeekNumberISO2(d, p) {
  d = UTCdISO2(d);
  return pad2(utcThursday2.count(utcYear_default2(d), d) + (utcYear_default2(d).getUTCDay() === 4), p, 2);
}
function formatUTCWeekdayNumberSunday2(d) {
  return d.getUTCDay();
}
function formatUTCWeekNumberMonday2(d, p) {
  return pad2(utcMonday2.count(utcYear_default2(d) - 1, d), p, 2);
}
function formatUTCYear2(d, p) {
  return pad2(d.getUTCFullYear() % 100, p, 2);
}
function formatUTCYearISO2(d, p) {
  d = UTCdISO2(d);
  return pad2(d.getUTCFullYear() % 100, p, 2);
}
function formatUTCFullYear2(d, p) {
  return pad2(d.getUTCFullYear() % 1e4, p, 4);
}
function formatUTCFullYearISO2(d, p) {
  var day3 = d.getUTCDay();
  d = day3 >= 4 || day3 === 0 ? utcThursday2(d) : utcThursday2.ceil(d);
  return pad2(d.getUTCFullYear() % 1e4, p, 4);
}
function formatUTCZone2() {
  return "+0000";
}
function formatLiteralPercent2() {
  return "%";
}
function formatUnixTimestamp2(d) {
  return +d;
}
function formatUnixTimestampSeconds2(d) {
  return Math.floor(+d / 1e3);
}

// node_modules/d3-tricontour/node_modules/d3-time-format/src/defaultLocale.js
var locale4;
var timeFormat2;
var timeParse2;
var utcFormat2;
var utcParse2;
defaultLocale4({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function defaultLocale4(definition) {
  locale4 = formatLocale2(definition);
  timeFormat2 = locale4.format;
  timeParse2 = locale4.parse;
  utcFormat2 = locale4.utcFormat;
  utcParse2 = locale4.utcParse;
  return locale4;
}

// node_modules/d3-tricontour/node_modules/d3-time-format/src/isoFormat.js
var isoSpecifier2 = "%Y-%m-%dT%H:%M:%S.%LZ";
function formatIsoNative2(date) {
  return date.toISOString();
}
var formatIso2 = Date.prototype.toISOString ? formatIsoNative2 : utcFormat2(isoSpecifier2);

// node_modules/d3-tricontour/node_modules/d3-time-format/src/isoParse.js
function parseIsoNative2(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}
var parseIso2 = +new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative2 : utcParse2(isoSpecifier2);

// node_modules/d3-tricontour/node_modules/d3-scale/src/time.js
var durationSecond3 = 1e3;
var durationMinute3 = durationSecond3 * 60;
var durationHour3 = durationMinute3 * 60;
var durationDay3 = durationHour3 * 24;
var durationWeek3 = durationDay3 * 7;
var durationMonth2 = durationDay3 * 30;
var durationYear2 = durationDay3 * 365;

// node_modules/d3-tricontour/node_modules/d3-scale/src/colors.js
function colors_default(s) {
  return s.match(/.{6}/g).map(function(x) {
    return "#" + x;
  });
}

// node_modules/d3-tricontour/node_modules/d3-scale/src/category10.js
var category10_default = colors_default("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

// node_modules/d3-tricontour/node_modules/d3-scale/src/category20b.js
var category20b_default = colors_default("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6");

// node_modules/d3-tricontour/node_modules/d3-scale/src/category20c.js
var category20c_default = colors_default("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9");

// node_modules/d3-tricontour/node_modules/d3-scale/src/category20.js
var category20_default = colors_default("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5");

// node_modules/d3-tricontour/node_modules/d3-scale/src/cubehelix.js
var cubehelix_default3 = cubehelixLong2(cubehelix3(300, 0.5, 0), cubehelix3(-240, 0.5, 1));

// node_modules/d3-tricontour/node_modules/d3-scale/src/rainbow.js
var warm = cubehelixLong2(cubehelix3(-100, 0.75, 0.35), cubehelix3(80, 1.5, 0.8));
var cool = cubehelixLong2(cubehelix3(260, 0.75, 0.35), cubehelix3(80, 1.5, 0.8));
var rainbow = cubehelix3();

// node_modules/d3-tricontour/node_modules/d3-scale/src/viridis.js
function ramp(range2) {
  var n = range2.length;
  return function(t) {
    return range2[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}
var viridis_default = ramp(colors_default("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
var magma = ramp(colors_default("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
var inferno = ramp(colors_default("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
var plasma = ramp(colors_default("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

// node_modules/three-conic-polygon-geometry/dist/three-conic-polygon-geometry.module.js
function _classCallCheck3(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _inherits2(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass)
    _setPrototypeOf2(subClass, superClass);
}
function _getPrototypeOf2(o) {
  _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf4(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf2(o);
}
function _setPrototypeOf2(o, p) {
  _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf4(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf2(o, p);
}
function _isNativeReflectConstruct2() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _assertThisInitialized2(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _possibleConstructorReturn2(self2, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized2(self2);
}
function _createSuper2(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _slicedToArray5(arr, i) {
  return _arrayWithHoles5(arr) || _iterableToArrayLimit5(arr, i) || _unsupportedIterableToArray5(arr, i) || _nonIterableRest5();
}
function _toConsumableArray3(arr) {
  return _arrayWithoutHoles3(arr) || _iterableToArray3(arr) || _unsupportedIterableToArray5(arr) || _nonIterableSpread3();
}
function _arrayWithoutHoles3(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray5(arr);
}
function _arrayWithHoles5(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArray3(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _iterableToArrayLimit5(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _unsupportedIterableToArray5(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray5(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray5(o, minLen);
}
function _arrayLikeToArray5(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread3() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableRest5() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function geoPolygonTriangulate(polygon) {
  var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$resolution = _ref.resolution, resolution2 = _ref$resolution === void 0 ? Infinity : _ref$resolution;
  var contour = interpolateContourPoints(polygon, resolution2);
  var edgePoints = merge(contour);
  var innerPoints = getInnerGeoPoints(polygon, resolution2);
  var points = [].concat(_toConsumableArray3(edgePoints), _toConsumableArray3(innerPoints));
  var boundariesGeojson = {
    type: "Polygon",
    coordinates: polygon
  };
  var _geoBounds = bounds_default(boundariesGeojson), _geoBounds2 = _slicedToArray5(_geoBounds, 2), _geoBounds2$ = _slicedToArray5(_geoBounds2[0], 2), minLng = _geoBounds2$[0], minLat = _geoBounds2$[1], _geoBounds2$2 = _slicedToArray5(_geoBounds2[1], 2), maxLng = _geoBounds2$2[0], maxLat = _geoBounds2$2[1];
  var crossesPoleOrAntimeridian = minLng > maxLng || maxLat >= 89 || minLat <= -89;
  var indices = [];
  if (crossesPoleOrAntimeridian) {
    var vt = geoVoronoi(points).triangles();
    var pntMap = new Map(points.map(function(_ref2, idx) {
      var _ref3 = _slicedToArray5(_ref2, 2), lng = _ref3[0], lat = _ref3[1];
      return ["".concat(lng, "-").concat(lat), idx];
    }));
    vt.features.forEach(function(f) {
      var _indices;
      var triangle = f.geometry.coordinates[0].slice(0, 3).reverse();
      var inds = [];
      triangle.forEach(function(_ref4) {
        var _ref5 = _slicedToArray5(_ref4, 2), lng = _ref5[0], lat = _ref5[1];
        var k = "".concat(lng, "-").concat(lat);
        pntMap.has(k) && inds.push(pntMap.get(k));
      });
      if (inds.length !== 3)
        return;
      if (inds.some(function(ind) {
        return ind < edgePoints.length;
      })) {
        var triangleCentroid = f.properties.circumcenter;
        if (!pointInside(triangleCentroid, boundariesGeojson, crossesPoleOrAntimeridian))
          return;
      }
      (_indices = indices).push.apply(_indices, inds);
    });
  } else if (!innerPoints.length) {
    var _earcut$flatten = import_earcut2.default.flatten(contour), vertices = _earcut$flatten.vertices, _earcut$flatten$holes = _earcut$flatten.holes, holes = _earcut$flatten$holes === void 0 ? [] : _earcut$flatten$holes;
    indices = (0, import_earcut2.default)(vertices, holes, 2);
  } else {
    (function() {
      var delaunay = Delaunator.from(points);
      var _loop = function _loop2(i2, len2) {
        var _indices2;
        var inds = [2, 1, 0].map(function(idx) {
          return delaunay.triangles[i2 + idx];
        });
        var triangle = inds.map(function(indice) {
          return points[indice];
        });
        if (inds.some(function(ind) {
          return ind < edgePoints.length;
        })) {
          var triangleCentroid = [0, 1].map(function(coordIdx) {
            return mean(triangle, function(p) {
              return p[coordIdx];
            });
          });
          if (!pointInside(triangleCentroid, boundariesGeojson, crossesPoleOrAntimeridian))
            return "continue";
        }
        (_indices2 = indices).push.apply(_indices2, _toConsumableArray3(inds));
      };
      for (var i = 0, len = delaunay.triangles.length; i < len; i += 3) {
        var _ret = _loop(i);
        if (_ret === "continue")
          continue;
      }
    })();
  }
  var triangles = {
    points,
    indices
  };
  return {
    contour,
    triangles
  };
}
function interpolateContourPoints(polygon, maxDistance) {
  return polygon.map(function(coords) {
    var pnts = [];
    var prevPnt;
    coords.forEach(function(pnt) {
      if (prevPnt) {
        var dist3 = distance_default(pnt, prevPnt) * 180 / Math.PI;
        if (dist3 > maxDistance) {
          var interpol = interpolate_default(prevPnt, pnt);
          var tStep = 1 / Math.ceil(dist3 / maxDistance);
          var t = tStep;
          while (t < 1) {
            pnts.push(interpol(t));
            t += tStep;
          }
        }
      }
      pnts.push(prevPnt = pnt);
    });
    return pnts;
  });
}
function getInnerGeoPoints(polygon, maxDistance) {
  var boundariesGeojson = {
    type: "Polygon",
    coordinates: polygon
  };
  var _geoBounds3 = bounds_default(boundariesGeojson), _geoBounds4 = _slicedToArray5(_geoBounds3, 2), _geoBounds4$ = _slicedToArray5(_geoBounds4[0], 2), minLng = _geoBounds4$[0], minLat = _geoBounds4$[1], _geoBounds4$2 = _slicedToArray5(_geoBounds4[1], 2), maxLng = _geoBounds4$2[0], maxLat = _geoBounds4$2[1];
  if (Math.min(Math.abs(maxLng - minLng), Math.abs(maxLat - minLat)) < maxDistance)
    return [];
  var crossesPoleOrAntimeridian = minLng > maxLng || maxLat >= 89 || minLat <= -89;
  return getGeoSpiralGrid(maxDistance, {
    minLng,
    maxLng,
    minLat,
    maxLat
  }).filter(function(pnt) {
    return pointInside(pnt, boundariesGeojson, crossesPoleOrAntimeridian);
  });
}
function getGeoSpiralGrid(distanceBetweenPoints) {
  var _ref6 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, minLng = _ref6.minLng, maxLng = _ref6.maxLng, minLat = _ref6.minLat, maxLat = _ref6.maxLat;
  var numPoints = Math.round(Math.pow(360 / distanceBetweenPoints, 2) / Math.PI);
  var phi = (1 + Math.sqrt(5)) / 2;
  var getPntLng = function getPntLng2(idx) {
    return idx / phi * 360 % 360 - 180;
  };
  var getPntLat = function getPntLat2(idx) {
    return Math.acos(2 * idx / numPoints - 1) / Math.PI * 180 - 90;
  };
  var getPntIdx = function getPntIdx2(lat) {
    return numPoints * (Math.cos((lat + 90) * Math.PI / 180) + 1) / 2;
  };
  var pntIdxRange = [maxLat !== void 0 ? Math.ceil(getPntIdx(maxLat)) : 0, minLat !== void 0 ? Math.floor(getPntIdx(minLat)) : numPoints - 1];
  var isLngInRange = minLng === void 0 && maxLng === void 0 ? function() {
    return true;
  } : minLng === void 0 ? function(lng2) {
    return lng2 <= maxLng;
  } : maxLng === void 0 ? function(lng2) {
    return lng2 >= minLng;
  } : maxLng >= minLng ? function(lng2) {
    return lng2 >= minLng && lng2 <= maxLng;
  } : function(lng2) {
    return lng2 >= minLng || lng2 <= maxLng;
  };
  var pnts = [];
  for (var i = pntIdxRange[0]; i <= pntIdxRange[1]; i++) {
    var lng = getPntLng(i);
    isLngInRange(lng) && pnts.push([lng, getPntLat(i)]);
  }
  return pnts;
}
function pointInside(pnt, polygon) {
  var crossesPoleOrAntimeridian = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  return crossesPoleOrAntimeridian ? contains_default(polygon, pnt) : booleanPointInPolygon(pnt, polygon);
}
var THREE2 = window.THREE ? window.THREE : {
  BufferGeometry,
  Float32BufferAttribute
};
var setAttributeFn2 = new THREE2.BufferGeometry().setAttribute ? "setAttribute" : "addAttribute";
var ConicPolygonBufferGeometry = function(_THREE$BufferGeometry) {
  _inherits2(ConicPolygonBufferGeometry2, _THREE$BufferGeometry);
  var _super = _createSuper2(ConicPolygonBufferGeometry2);
  function ConicPolygonBufferGeometry2(polygonGeoJson, startHeight, endHeight, closedBottom, closedTop, includeSides, curvatureResolution) {
    var _this;
    _classCallCheck3(this, ConicPolygonBufferGeometry2);
    _this = _super.call(this);
    _this.type = "ConicPolygonBufferGeometry";
    _this.parameters = {
      polygonGeoJson,
      startHeight,
      endHeight,
      closedBottom,
      closedTop,
      includeSides,
      curvatureResolution
    };
    startHeight = startHeight || 0;
    endHeight = endHeight || 1;
    closedBottom = closedBottom !== void 0 ? closedBottom : true;
    closedTop = closedTop !== void 0 ? closedTop : true;
    includeSides = includeSides !== void 0 ? includeSides : true;
    curvatureResolution = curvatureResolution || 5;
    var _geoPolygonTriangulat = geoPolygonTriangulate(polygonGeoJson, {
      resolution: curvatureResolution
    }), contour = _geoPolygonTriangulat.contour, triangles = _geoPolygonTriangulat.triangles;
    var vertices = [];
    var indices = [];
    var groupCnt = 0;
    var addGroup = function addGroup2(groupData) {
      var prevVertCnt = Math.round(vertices.length / 3);
      var prevIndCnt = indices.length;
      vertices = vertices.concat(groupData.vertices);
      indices = indices.concat(!prevVertCnt ? groupData.indices : groupData.indices.map(function(ind) {
        return ind + prevVertCnt;
      }));
      _this.addGroup(prevIndCnt, indices.length - prevIndCnt, groupCnt++);
    };
    includeSides && addGroup(generateTorso());
    closedBottom && addGroup(generateCap(startHeight, false));
    closedTop && addGroup(generateCap(endHeight, true));
    _this.setIndex(indices);
    _this[setAttributeFn2]("position", new THREE2.Float32BufferAttribute(vertices, 3));
    _this.computeFaceNormals();
    _this.computeVertexNormals();
    function generateVertices(polygon, altitude) {
      var coords3d = polygon.map(function(coords) {
        return coords.map(function(_ref) {
          var _ref2 = _slicedToArray5(_ref, 2), lng = _ref2[0], lat = _ref2[1];
          return polar2Cartesian2(lat, lng, altitude);
        });
      });
      return import_earcut2.default.flatten(coords3d);
    }
    function generateTorso() {
      var _generateVertices = generateVertices(contour, startHeight), bottomVerts = _generateVertices.vertices, holes = _generateVertices.holes;
      var _generateVertices2 = generateVertices(contour, endHeight), topVerts = _generateVertices2.vertices;
      var vertices2 = merge([topVerts, bottomVerts]);
      var numPoints = Math.round(topVerts.length / 3);
      var holesIdx = new Set(holes);
      var lastHoleIdx = 0;
      var indices2 = [];
      for (var v0Idx = 0; v0Idx < numPoints; v0Idx++) {
        var v1Idx = v0Idx + 1;
        if (v1Idx === numPoints) {
          v1Idx = lastHoleIdx;
        } else if (holesIdx.has(v1Idx)) {
          var holeIdx = v1Idx;
          v1Idx = lastHoleIdx;
          lastHoleIdx = holeIdx;
        }
        indices2.push(v0Idx, v0Idx + numPoints, v1Idx + numPoints);
        indices2.push(v1Idx + numPoints, v1Idx, v0Idx);
      }
      return {
        indices: indices2,
        vertices: vertices2
      };
    }
    function generateCap(radius) {
      var isTop = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      return {
        indices: isTop ? triangles.indices : triangles.indices.slice().reverse(),
        vertices: generateVertices([triangles.points], radius).vertices
      };
    }
    return _this;
  }
  return ConicPolygonBufferGeometry2;
}(THREE2.BufferGeometry);
function polar2Cartesian2(lat, lng) {
  var r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
  var phi = (90 - lat) * Math.PI / 180;
  var theta = (90 - lng) * Math.PI / 180;
  return [
    r * Math.sin(phi) * Math.cos(theta),
    r * Math.cos(phi),
    r * Math.sin(phi) * Math.sin(theta)
  ];
}

// node_modules/h3-js/dist/browser/h3-js.es.js
var libh3 = function(libh32) {
  libh32 = libh32 || {};
  var Module = typeof libh32 !== "undefined" ? libh32 : {};
  var moduleOverrides = {};
  var key;
  for (key in Module) {
    if (Module.hasOwnProperty(key)) {
      moduleOverrides[key] = Module[key];
    }
  }
  var arguments_ = [];
  var scriptDirectory = "";
  function locateFile(path) {
    if (Module["locateFile"]) {
      return Module["locateFile"](path, scriptDirectory);
    }
    return scriptDirectory + path;
  }
  var readAsync;
  {
    if (document.currentScript) {
      scriptDirectory = document.currentScript.src;
    }
    if (scriptDirectory.indexOf("blob:") !== 0) {
      scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf("/") + 1);
    } else {
      scriptDirectory = "";
    }
    readAsync = function readAsync2(url, onload, onerror) {
      var xhr = new XMLHttpRequest();
      xhr.open("GET", url, true);
      xhr.responseType = "arraybuffer";
      xhr.onload = function xhr_onload() {
        if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
          onload(xhr.response);
          return;
        }
        var data = tryParseAsDataURI(url);
        if (data) {
          onload(data.buffer);
          return;
        }
        onerror();
      };
      xhr.onerror = onerror;
      xhr.send(null);
    };
  }
  var out = Module["print"] || console.log.bind(console);
  var err = Module["printErr"] || console.warn.bind(console);
  for (key in moduleOverrides) {
    if (moduleOverrides.hasOwnProperty(key)) {
      Module[key] = moduleOverrides[key];
    }
  }
  moduleOverrides = null;
  if (Module["arguments"]) {
    arguments_ = Module["arguments"];
  }
  var tempRet0 = 0;
  var setTempRet0 = function(value) {
    tempRet0 = value;
  };
  var getTempRet0 = function() {
    return tempRet0;
  };
  var GLOBAL_BASE = 8;
  function setValue(ptr, value, type, noSafe) {
    type = type || "i8";
    if (type.charAt(type.length - 1) === "*") {
      type = "i32";
    }
    switch (type) {
      case "i1":
        HEAP8[ptr >> 0] = value;
        break;
      case "i8":
        HEAP8[ptr >> 0] = value;
        break;
      case "i16":
        HEAP16[ptr >> 1] = value;
        break;
      case "i32":
        HEAP32[ptr >> 2] = value;
        break;
      case "i64":
        tempI64 = [value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
        break;
      case "float":
        HEAPF32[ptr >> 2] = value;
        break;
      case "double":
        HEAPF64[ptr >> 3] = value;
        break;
      default:
        abort("invalid type for setValue: " + type);
    }
  }
  function getValue(ptr, type, noSafe) {
    type = type || "i8";
    if (type.charAt(type.length - 1) === "*") {
      type = "i32";
    }
    switch (type) {
      case "i1":
        return HEAP8[ptr >> 0];
      case "i8":
        return HEAP8[ptr >> 0];
      case "i16":
        return HEAP16[ptr >> 1];
      case "i32":
        return HEAP32[ptr >> 2];
      case "i64":
        return HEAP32[ptr >> 2];
      case "float":
        return HEAPF32[ptr >> 2];
      case "double":
        return HEAPF64[ptr >> 3];
      default:
        abort("invalid type for getValue: " + type);
    }
    return null;
  }
  var ABORT = false;
  function assert(condition, text) {
    if (!condition) {
      abort("Assertion failed: " + text);
    }
  }
  function getCFunc(ident) {
    var func = Module["_" + ident];
    assert(func, "Cannot call unknown function " + ident + ", make sure it is exported");
    return func;
  }
  function ccall(ident, returnType, argTypes, args, opts) {
    var toC = {
      "string": function(str) {
        var ret2 = 0;
        if (str !== null && str !== void 0 && str !== 0) {
          var len = (str.length << 2) + 1;
          ret2 = stackAlloc(len);
          stringToUTF8(str, ret2, len);
        }
        return ret2;
      },
      "array": function(arr) {
        var ret2 = stackAlloc(arr.length);
        writeArrayToMemory(arr, ret2);
        return ret2;
      }
    };
    function convertReturnValue(ret2) {
      if (returnType === "string") {
        return UTF8ToString(ret2);
      }
      if (returnType === "boolean") {
        return Boolean(ret2);
      }
      return ret2;
    }
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) {
            stack = stackSave();
          }
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    ret = convertReturnValue(ret);
    if (stack !== 0) {
      stackRestore(stack);
    }
    return ret;
  }
  function cwrap(ident, returnType, argTypes, opts) {
    argTypes = argTypes || [];
    var numericArgs = argTypes.every(function(type) {
      return type === "number";
    });
    var numericRet = returnType !== "string";
    if (numericRet && numericArgs && !opts) {
      return getCFunc(ident);
    }
    return function() {
      return ccall(ident, returnType, argTypes, arguments, opts);
    };
  }
  var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : void 0;
  function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
    var endIdx = idx + maxBytesToRead;
    var endPtr = idx;
    while (u8Array[endPtr] && !(endPtr >= endIdx)) {
      ++endPtr;
    }
    if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
      return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
    } else {
      var str = "";
      while (idx < endPtr) {
        var u0 = u8Array[idx++];
        if (!(u0 & 128)) {
          str += String.fromCharCode(u0);
          continue;
        }
        var u1 = u8Array[idx++] & 63;
        if ((u0 & 224) == 192) {
          str += String.fromCharCode((u0 & 31) << 6 | u1);
          continue;
        }
        var u22 = u8Array[idx++] & 63;
        if ((u0 & 240) == 224) {
          u0 = (u0 & 15) << 12 | u1 << 6 | u22;
        } else {
          u0 = (u0 & 7) << 18 | u1 << 12 | u22 << 6 | u8Array[idx++] & 63;
        }
        if (u0 < 65536) {
          str += String.fromCharCode(u0);
        } else {
          var ch = u0 - 65536;
          str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
        }
      }
    }
    return str;
  }
  function UTF8ToString(ptr, maxBytesToRead) {
    return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
  }
  function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
    if (!(maxBytesToWrite > 0)) {
      return 0;
    }
    var startIdx = outIdx;
    var endIdx = outIdx + maxBytesToWrite - 1;
    for (var i = 0; i < str.length; ++i) {
      var u4 = str.charCodeAt(i);
      if (u4 >= 55296 && u4 <= 57343) {
        var u1 = str.charCodeAt(++i);
        u4 = 65536 + ((u4 & 1023) << 10) | u1 & 1023;
      }
      if (u4 <= 127) {
        if (outIdx >= endIdx) {
          break;
        }
        outU8Array[outIdx++] = u4;
      } else if (u4 <= 2047) {
        if (outIdx + 1 >= endIdx) {
          break;
        }
        outU8Array[outIdx++] = 192 | u4 >> 6;
        outU8Array[outIdx++] = 128 | u4 & 63;
      } else if (u4 <= 65535) {
        if (outIdx + 2 >= endIdx) {
          break;
        }
        outU8Array[outIdx++] = 224 | u4 >> 12;
        outU8Array[outIdx++] = 128 | u4 >> 6 & 63;
        outU8Array[outIdx++] = 128 | u4 & 63;
      } else {
        if (outIdx + 3 >= endIdx) {
          break;
        }
        outU8Array[outIdx++] = 240 | u4 >> 18;
        outU8Array[outIdx++] = 128 | u4 >> 12 & 63;
        outU8Array[outIdx++] = 128 | u4 >> 6 & 63;
        outU8Array[outIdx++] = 128 | u4 & 63;
      }
    }
    outU8Array[outIdx] = 0;
    return outIdx - startIdx;
  }
  function stringToUTF8(str, outPtr, maxBytesToWrite) {
    return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
  }
  var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : void 0;
  function writeArrayToMemory(array6, buffer2) {
    HEAP8.set(array6, buffer2);
  }
  function alignUp(x, multiple) {
    if (x % multiple > 0) {
      x += multiple - x % multiple;
    }
    return x;
  }
  var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
  function updateGlobalBufferAndViews(buf) {
    buffer = buf;
    Module["HEAP8"] = HEAP8 = new Int8Array(buf);
    Module["HEAP16"] = HEAP16 = new Int16Array(buf);
    Module["HEAP32"] = HEAP32 = new Int32Array(buf);
    Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
    Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
    Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
    Module["HEAPF32"] = HEAPF32 = new Float32Array(buf);
    Module["HEAPF64"] = HEAPF64 = new Float64Array(buf);
  }
  var DYNAMIC_BASE = 5266928, DYNAMICTOP_PTR = 24016;
  var INITIAL_TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 33554432;
  if (Module["buffer"]) {
    buffer = Module["buffer"];
  } else {
    buffer = new ArrayBuffer(INITIAL_TOTAL_MEMORY);
  }
  INITIAL_TOTAL_MEMORY = buffer.byteLength;
  updateGlobalBufferAndViews(buffer);
  HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;
  function callRuntimeCallbacks(callbacks) {
    while (callbacks.length > 0) {
      var callback = callbacks.shift();
      if (typeof callback == "function") {
        callback();
        continue;
      }
      var func = callback.func;
      if (typeof func === "number") {
        if (callback.arg === void 0) {
          Module["dynCall_v"](func);
        } else {
          Module["dynCall_vi"](func, callback.arg);
        }
      } else {
        func(callback.arg === void 0 ? null : callback.arg);
      }
    }
  }
  var __ATPRERUN__ = [];
  var __ATINIT__ = [];
  var __ATMAIN__ = [];
  var __ATPOSTRUN__ = [];
  function preRun() {
    if (Module["preRun"]) {
      if (typeof Module["preRun"] == "function") {
        Module["preRun"] = [Module["preRun"]];
      }
      while (Module["preRun"].length) {
        addOnPreRun(Module["preRun"].shift());
      }
    }
    callRuntimeCallbacks(__ATPRERUN__);
  }
  function initRuntime() {
    callRuntimeCallbacks(__ATINIT__);
  }
  function preMain() {
    callRuntimeCallbacks(__ATMAIN__);
  }
  function postRun() {
    if (Module["postRun"]) {
      if (typeof Module["postRun"] == "function") {
        Module["postRun"] = [Module["postRun"]];
      }
      while (Module["postRun"].length) {
        addOnPostRun(Module["postRun"].shift());
      }
    }
    callRuntimeCallbacks(__ATPOSTRUN__);
  }
  function addOnPreRun(cb) {
    __ATPRERUN__.unshift(cb);
  }
  function addOnPostRun(cb) {
    __ATPOSTRUN__.unshift(cb);
  }
  var Math_abs = Math.abs;
  var Math_ceil = Math.ceil;
  var Math_floor = Math.floor;
  var Math_min = Math.min;
  var runDependencies = 0;
  var runDependencyWatcher = null;
  var dependenciesFulfilled = null;
  function addRunDependency(id) {
    runDependencies++;
    if (Module["monitorRunDependencies"]) {
      Module["monitorRunDependencies"](runDependencies);
    }
  }
  function removeRunDependency(id) {
    runDependencies--;
    if (Module["monitorRunDependencies"]) {
      Module["monitorRunDependencies"](runDependencies);
    }
    if (runDependencies == 0) {
      if (runDependencyWatcher !== null) {
        clearInterval(runDependencyWatcher);
        runDependencyWatcher = null;
      }
      if (dependenciesFulfilled) {
        var callback = dependenciesFulfilled;
        dependenciesFulfilled = null;
        callback();
      }
    }
  }
  Module["preloadedImages"] = {};
  Module["preloadedAudios"] = {};
  var memoryInitializer = null;
  var dataURIPrefix = "data:application/octet-stream;base64,";
  function isDataURI(filename) {
    return String.prototype.startsWith ? filename.startsWith(dataURIPrefix) : filename.indexOf(dataURIPrefix) === 0;
  }
  var tempDouble;
  var tempI64;
  memoryInitializer = "data:application/octet-stream;base64,";
  var tempDoublePtr = 24032;
  function demangle(func) {
    return func;
  }
  function demangleAll(text) {
    var regex = /\b__Z[\w\d_]+/g;
    return text.replace(regex, function(x) {
      var y = demangle(x);
      return x === y ? x : y + " [" + x + "]";
    });
  }
  function jsStackTrace() {
    var err2 = new Error();
    if (!err2.stack) {
      try {
        throw new Error(0);
      } catch (e) {
        err2 = e;
      }
      if (!err2.stack) {
        return "(no stack trace available)";
      }
    }
    return err2.stack.toString();
  }
  function stackTrace() {
    var js = jsStackTrace();
    if (Module["extraStackTrace"]) {
      js += "\n" + Module["extraStackTrace"]();
    }
    return demangleAll(js);
  }
  function ___assert_fail(condition, filename, line, func) {
    abort("Assertion failed: " + UTF8ToString(condition) + ", at: " + [filename ? UTF8ToString(filename) : "unknown filename", line, func ? UTF8ToString(func) : "unknown function"]);
  }
  function _emscripten_get_heap_size() {
    return HEAP8.length;
  }
  function _emscripten_memcpy_big(dest, src, num) {
    HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
  }
  function ___setErrNo(value) {
    if (Module["___errno_location"]) {
      HEAP32[Module["___errno_location"]() >> 2] = value;
    }
    return value;
  }
  function abortOnCannotGrowMemory(requestedSize) {
    abort("OOM");
  }
  function emscripten_realloc_buffer(size) {
    try {
      var newBuffer = new ArrayBuffer(size);
      if (newBuffer.byteLength != size) {
        return;
      }
      new Int8Array(newBuffer).set(HEAP8);
      _emscripten_replace_memory(newBuffer);
      updateGlobalBufferAndViews(newBuffer);
      return 1;
    } catch (e) {
    }
  }
  function _emscripten_resize_heap(requestedSize) {
    var oldSize = _emscripten_get_heap_size();
    var PAGE_MULTIPLE = 16777216;
    var LIMIT = 2147483648 - PAGE_MULTIPLE;
    if (requestedSize > LIMIT) {
      return false;
    }
    var MIN_TOTAL_MEMORY = 16777216;
    var newSize = Math.max(oldSize, MIN_TOTAL_MEMORY);
    while (newSize < requestedSize) {
      if (newSize <= 536870912) {
        newSize = alignUp(2 * newSize, PAGE_MULTIPLE);
      } else {
        newSize = Math.min(alignUp((3 * newSize + 2147483648) / 4, PAGE_MULTIPLE), LIMIT);
      }
    }
    var replacement = emscripten_realloc_buffer(newSize);
    if (!replacement) {
      return false;
    }
    return true;
  }
  var decodeBase64 = typeof atob === "function" ? atob : function(input) {
    var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    var output = "";
    var chr1, chr2, chr3;
    var enc1, enc2, enc3, enc4;
    var i = 0;
    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
    do {
      enc1 = keyStr.indexOf(input.charAt(i++));
      enc2 = keyStr.indexOf(input.charAt(i++));
      enc3 = keyStr.indexOf(input.charAt(i++));
      enc4 = keyStr.indexOf(input.charAt(i++));
      chr1 = enc1 << 2 | enc2 >> 4;
      chr2 = (enc2 & 15) << 4 | enc3 >> 2;
      chr3 = (enc3 & 3) << 6 | enc4;
      output = output + String.fromCharCode(chr1);
      if (enc3 !== 64) {
        output = output + String.fromCharCode(chr2);
      }
      if (enc4 !== 64) {
        output = output + String.fromCharCode(chr3);
      }
    } while (i < input.length);
    return output;
  };
  function intArrayFromBase64(s) {
    try {
      var decoded = decodeBase64(s);
      var bytes = new Uint8Array(decoded.length);
      for (var i = 0; i < decoded.length; ++i) {
        bytes[i] = decoded.charCodeAt(i);
      }
      return bytes;
    } catch (_) {
      throw new Error("Converting base64 string to bytes failed.");
    }
  }
  function tryParseAsDataURI(filename) {
    if (!isDataURI(filename)) {
      return;
    }
    return intArrayFromBase64(filename.slice(dataURIPrefix.length));
  }
  var asmGlobalArg = {
    "Math": Math,
    "Int8Array": Int8Array,
    "Int32Array": Int32Array,
    "Uint8Array": Uint8Array,
    "Float32Array": Float32Array,
    "Float64Array": Float64Array
  };
  var asmLibraryArg = {
    "a": abort,
    "b": setTempRet0,
    "c": getTempRet0,
    "d": ___assert_fail,
    "e": ___setErrNo,
    "f": _emscripten_get_heap_size,
    "g": _emscripten_memcpy_big,
    "h": _emscripten_resize_heap,
    "i": abortOnCannotGrowMemory,
    "j": demangle,
    "k": demangleAll,
    "l": emscripten_realloc_buffer,
    "m": jsStackTrace,
    "n": stackTrace,
    "o": tempDoublePtr,
    "p": DYNAMICTOP_PTR
  };
  var asm = function(global, env, buffer2) {
    "almost asm";
    var a = new global.Int8Array(buffer2), b = new global.Int32Array(buffer2), c = new global.Uint8Array(buffer2), d = new global.Float32Array(buffer2), e = new global.Float64Array(buffer2), g = env.p | 0, p = global.Math.floor, q = global.Math.abs, r = global.Math.sqrt, s = global.Math.pow, t = global.Math.cos, u4 = global.Math.sin, v2 = global.Math.tan, w = global.Math.acos, x = global.Math.asin, y = global.Math.atan, z = global.Math.atan2, A6 = global.Math.ceil, B4 = global.Math.imul, C4 = global.Math.min, D4 = global.Math.clz32, F = env.b, G = env.c, H = env.d, I = env.e, J = env.f, K3 = env.g, L = env.h, M3 = env.i, S = 24048;
    function V(newBuffer) {
      a = new Int8Array(newBuffer);
      c = new Uint8Array(newBuffer);
      b = new Int32Array(newBuffer);
      d = new Float32Array(newBuffer);
      e = new Float64Array(newBuffer);
      buffer2 = newBuffer;
      return true;
    }
    function W(a2) {
      a2 = a2 | 0;
      var b2 = 0;
      b2 = S;
      S = S + a2 | 0;
      S = S + 15 & -16;
      return b2 | 0;
    }
    function X() {
      return S | 0;
    }
    function Y(a2) {
      a2 = a2 | 0;
      S = a2;
    }
    function Z(a2, b2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      S = a2;
    }
    function _(a2) {
      a2 = a2 | 0;
      return (B4(a2 * 3 | 0, a2 + 1 | 0) | 0) + 1 | 0;
    }
    function $(a2, b2, c2, d2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      var e3 = 0, f = 0;
      if (!(ba(a2, b2, c2, d2, 0) | 0)) {
        return;
      }
      f = (B4(c2 * 3 | 0, c2 + 1 | 0) | 0) + 1 | 0;
      hd(d2 | 0, 0, f << 3 | 0) | 0;
      e3 = Yc(f, 4) | 0;
      if (!e3) {
        return;
      }
      ca3(a2, b2, c2, d2, e3, f, 0);
      Xc(e3);
      return;
    }
    function aa2(a2, b2, c2, d2, e3) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      e3 = e3 | 0;
      var f = 0;
      if (!(ba(a2, b2, c2, d2, e3) | 0)) {
        return;
      }
      f = (B4(c2 * 3 | 0, c2 + 1 | 0) | 0) + 1 | 0;
      hd(d2 | 0, 0, f << 3 | 0) | 0;
      if (e3 | 0) {
        hd(e3 | 0, 0, f << 2 | 0) | 0;
        ca3(a2, b2, c2, d2, e3, f, 0);
        return;
      }
      e3 = Yc(f, 4) | 0;
      if (!e3) {
        return;
      }
      ca3(a2, b2, c2, d2, e3, f, 0);
      Xc(e3);
      return;
    }
    function ba(a2, c2, d2, e3, f) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      e3 = e3 | 0;
      f = f | 0;
      var g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0;
      o = S;
      S = S + 16 | 0;
      n = o;
      g2 = e3;
      b[g2 >> 2] = a2;
      b[g2 + 4 >> 2] = c2;
      g2 = (f | 0) != 0;
      if (g2) {
        b[f >> 2] = 0;
      }
      if (Fb(a2, c2) | 0) {
        n = 1;
        S = o;
        return n | 0;
      }
      b[n >> 2] = 0;
      a:
        do {
          if ((d2 | 0) >= 1) {
            if (g2) {
              k = 0;
              l = 1;
              m = 1;
              h = 0;
              g2 = a2;
              while (1) {
                if (!(h | k)) {
                  g2 = da2(g2, c2, 4, n) | 0;
                  c2 = G() | 0;
                  if ((g2 | 0) == 0 & (c2 | 0) == 0) {
                    g2 = 2;
                    break a;
                  }
                  if (Fb(g2, c2) | 0) {
                    g2 = 1;
                    break a;
                  }
                }
                g2 = da2(g2, c2, b[16 + (k << 2) >> 2] | 0, n) | 0;
                c2 = G() | 0;
                if ((g2 | 0) == 0 & (c2 | 0) == 0) {
                  g2 = 2;
                  break a;
                }
                a2 = e3 + (m << 3) | 0;
                b[a2 >> 2] = g2;
                b[a2 + 4 >> 2] = c2;
                b[f + (m << 2) >> 2] = l;
                h = h + 1 | 0;
                a2 = (h | 0) == (l | 0);
                i = k + 1 | 0;
                j = (i | 0) == 6;
                if (Fb(g2, c2) | 0) {
                  g2 = 1;
                  break a;
                }
                l = l + (j & a2 & 1) | 0;
                if ((l | 0) > (d2 | 0)) {
                  g2 = 0;
                  break;
                } else {
                  k = a2 ? j ? 0 : i : k;
                  m = m + 1 | 0;
                  h = a2 ? 0 : h;
                }
              }
            } else {
              k = 0;
              l = 1;
              m = 1;
              h = 0;
              g2 = a2;
              while (1) {
                if (!(h | k)) {
                  g2 = da2(g2, c2, 4, n) | 0;
                  c2 = G() | 0;
                  if ((g2 | 0) == 0 & (c2 | 0) == 0) {
                    g2 = 2;
                    break a;
                  }
                  if (Fb(g2, c2) | 0) {
                    g2 = 1;
                    break a;
                  }
                }
                g2 = da2(g2, c2, b[16 + (k << 2) >> 2] | 0, n) | 0;
                c2 = G() | 0;
                if ((g2 | 0) == 0 & (c2 | 0) == 0) {
                  g2 = 2;
                  break a;
                }
                a2 = e3 + (m << 3) | 0;
                b[a2 >> 2] = g2;
                b[a2 + 4 >> 2] = c2;
                h = h + 1 | 0;
                a2 = (h | 0) == (l | 0);
                i = k + 1 | 0;
                j = (i | 0) == 6;
                if (Fb(g2, c2) | 0) {
                  g2 = 1;
                  break a;
                }
                l = l + (j & a2 & 1) | 0;
                if ((l | 0) > (d2 | 0)) {
                  g2 = 0;
                  break;
                } else {
                  k = a2 ? j ? 0 : i : k;
                  m = m + 1 | 0;
                  h = a2 ? 0 : h;
                }
              }
            }
          } else {
            g2 = 0;
          }
        } while (0);
      n = g2;
      S = o;
      return n | 0;
    }
    function ca3(a2, c2, d2, e3, f, g2, h) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      e3 = e3 | 0;
      f = f | 0;
      g2 = g2 | 0;
      h = h | 0;
      var i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0;
      m = S;
      S = S + 16 | 0;
      l = m;
      if ((a2 | 0) == 0 & (c2 | 0) == 0) {
        S = m;
        return;
      }
      i = bd2(a2 | 0, c2 | 0, g2 | 0, ((g2 | 0) < 0) << 31 >> 31 | 0) | 0;
      G() | 0;
      j = e3 + (i << 3) | 0;
      n = j;
      o = b[n >> 2] | 0;
      n = b[n + 4 >> 2] | 0;
      k = (o | 0) == (a2 | 0) & (n | 0) == (c2 | 0);
      if (!((o | 0) == 0 & (n | 0) == 0 | k)) {
        do {
          i = (i + 1 | 0) % (g2 | 0) | 0;
          j = e3 + (i << 3) | 0;
          o = j;
          n = b[o >> 2] | 0;
          o = b[o + 4 >> 2] | 0;
          k = (n | 0) == (a2 | 0) & (o | 0) == (c2 | 0);
        } while (!((n | 0) == 0 & (o | 0) == 0 | k));
      }
      i = f + (i << 2) | 0;
      if (k ? (b[i >> 2] | 0) <= (h | 0) : 0) {
        S = m;
        return;
      }
      o = j;
      b[o >> 2] = a2;
      b[o + 4 >> 2] = c2;
      b[i >> 2] = h;
      if ((h | 0) >= (d2 | 0)) {
        S = m;
        return;
      }
      o = h + 1 | 0;
      b[l >> 2] = 0;
      n = da2(a2, c2, 2, l) | 0;
      ca3(n, G() | 0, d2, e3, f, g2, o);
      b[l >> 2] = 0;
      n = da2(a2, c2, 3, l) | 0;
      ca3(n, G() | 0, d2, e3, f, g2, o);
      b[l >> 2] = 0;
      n = da2(a2, c2, 1, l) | 0;
      ca3(n, G() | 0, d2, e3, f, g2, o);
      b[l >> 2] = 0;
      n = da2(a2, c2, 5, l) | 0;
      ca3(n, G() | 0, d2, e3, f, g2, o);
      b[l >> 2] = 0;
      n = da2(a2, c2, 4, l) | 0;
      ca3(n, G() | 0, d2, e3, f, g2, o);
      b[l >> 2] = 0;
      n = da2(a2, c2, 6, l) | 0;
      ca3(n, G() | 0, d2, e3, f, g2, o);
      S = m;
      return;
    }
    function da2(a2, c2, d2, e3) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      e3 = e3 | 0;
      var f = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0;
      if ((b[e3 >> 2] | 0) > 0) {
        f = 0;
        do {
          d2 = Pa(d2) | 0;
          f = f + 1 | 0;
        } while ((f | 0) < (b[e3 >> 2] | 0));
      }
      i = cd2(a2 | 0, c2 | 0, 45) | 0;
      G() | 0;
      j = i & 127;
      g2 = Lb(a2, c2) | 0;
      f = cd2(a2 | 0, c2 | 0, 52) | 0;
      G() | 0;
      f = f & 15;
      a:
        do {
          if (!f) {
            h = 6;
          } else {
            while (1) {
              m = (15 - f | 0) * 3 | 0;
              n = cd2(a2 | 0, c2 | 0, m | 0) | 0;
              G() | 0;
              n = n & 7;
              o = (Rb(f) | 0) == 0;
              f = f + -1 | 0;
              l = dd(7, 0, m | 0) | 0;
              c2 = c2 & ~(G() | 0);
              m = dd(b[(o ? 464 : 48) + (n * 28 | 0) + (d2 << 2) >> 2] | 0, 0, m | 0) | 0;
              k = G() | 0;
              d2 = b[(o ? 672 : 256) + (n * 28 | 0) + (d2 << 2) >> 2] | 0;
              a2 = m | a2 & ~l;
              c2 = k | c2;
              if (!d2) {
                d2 = 0;
                break a;
              }
              if (!f) {
                h = 6;
                break;
              }
            }
          }
        } while (0);
      if ((h | 0) == 6) {
        o = b[880 + (j * 28 | 0) + (d2 << 2) >> 2] | 0;
        n = dd(o | 0, 0, 45) | 0;
        a2 = n | a2;
        c2 = G() | 0 | c2 & -1040385;
        d2 = b[4304 + (j * 28 | 0) + (d2 << 2) >> 2] | 0;
        if ((o & 127 | 0) == 127) {
          o = dd(b[880 + (j * 28 | 0) + 20 >> 2] | 0, 0, 45) | 0;
          c2 = G() | 0 | c2 & -1040385;
          d2 = b[4304 + (j * 28 | 0) + 20 >> 2] | 0;
          a2 = Nb(o | a2, c2) | 0;
          c2 = G() | 0;
          b[e3 >> 2] = (b[e3 >> 2] | 0) + 1;
        }
      }
      h = cd2(a2 | 0, c2 | 0, 45) | 0;
      G() | 0;
      h = h & 127;
      b:
        do {
          if (!(la(h) | 0)) {
            if ((d2 | 0) > 0) {
              f = 0;
              do {
                a2 = Nb(a2, c2) | 0;
                c2 = G() | 0;
                f = f + 1 | 0;
              } while ((f | 0) != (d2 | 0));
            }
          } else {
            c:
              do {
                if ((Lb(a2, c2) | 0) == 1) {
                  if ((j | 0) != (h | 0)) {
                    if (ra(h, b[7728 + (j * 28 | 0) >> 2] | 0) | 0) {
                      a2 = Pb(a2, c2) | 0;
                      g2 = 1;
                      c2 = G() | 0;
                      break;
                    } else {
                      a2 = Nb(a2, c2) | 0;
                      g2 = 1;
                      c2 = G() | 0;
                      break;
                    }
                  }
                  switch (g2 | 0) {
                    case 5: {
                      a2 = Pb(a2, c2) | 0;
                      c2 = G() | 0;
                      b[e3 >> 2] = (b[e3 >> 2] | 0) + 5;
                      g2 = 0;
                      break c;
                    }
                    case 3: {
                      a2 = Nb(a2, c2) | 0;
                      c2 = G() | 0;
                      b[e3 >> 2] = (b[e3 >> 2] | 0) + 1;
                      g2 = 0;
                      break c;
                    }
                    default: {
                      n = 0;
                      o = 0;
                      F(n | 0);
                      return o | 0;
                    }
                  }
                } else {
                  g2 = 0;
                }
              } while (0);
            if ((d2 | 0) > 0) {
              f = 0;
              do {
                a2 = Mb(a2, c2) | 0;
                c2 = G() | 0;
                f = f + 1 | 0;
              } while ((f | 0) != (d2 | 0));
            }
            if ((j | 0) != (h | 0)) {
              if (!(ma(h) | 0)) {
                if ((g2 | 0) != 0 | (Lb(a2, c2) | 0) != 5) {
                  break;
                }
                b[e3 >> 2] = (b[e3 >> 2] | 0) + 1;
                break;
              }
              switch (i & 127) {
                case 8:
                case 118:
                  break b;
                default:
              }
              if ((Lb(a2, c2) | 0) != 3) {
                b[e3 >> 2] = (b[e3 >> 2] | 0) + 1;
              }
            }
          }
        } while (0);
      b[e3 >> 2] = ((b[e3 >> 2] | 0) + d2 | 0) % 6 | 0;
      n = c2;
      o = a2;
      F(n | 0);
      return o | 0;
    }
    function ea2(a2, c2, d2, e3) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      e3 = e3 | 0;
      var f = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0;
      m = S;
      S = S + 16 | 0;
      l = m;
      if (!d2) {
        l = e3;
        b[l >> 2] = a2;
        b[l + 4 >> 2] = c2;
        l = 0;
        S = m;
        return l | 0;
      }
      b[l >> 2] = 0;
      a:
        do {
          if (!(Fb(a2, c2) | 0)) {
            g2 = (d2 | 0) > 0;
            if (g2) {
              f = 0;
              k = a2;
              do {
                k = da2(k, c2, 4, l) | 0;
                c2 = G() | 0;
                if ((k | 0) == 0 & (c2 | 0) == 0) {
                  a2 = 2;
                  break a;
                }
                f = f + 1 | 0;
                if (Fb(k, c2) | 0) {
                  a2 = 1;
                  break a;
                }
              } while ((f | 0) < (d2 | 0));
              j = e3;
              b[j >> 2] = k;
              b[j + 4 >> 2] = c2;
              j = d2 + -1 | 0;
              if (g2) {
                g2 = 0;
                h = 1;
                f = k;
                a2 = c2;
                do {
                  f = da2(f, a2, 2, l) | 0;
                  a2 = G() | 0;
                  if ((f | 0) == 0 & (a2 | 0) == 0) {
                    a2 = 2;
                    break a;
                  }
                  i = e3 + (h << 3) | 0;
                  b[i >> 2] = f;
                  b[i + 4 >> 2] = a2;
                  h = h + 1 | 0;
                  if (Fb(f, a2) | 0) {
                    a2 = 1;
                    break a;
                  }
                  g2 = g2 + 1 | 0;
                } while ((g2 | 0) < (d2 | 0));
                i = 0;
                g2 = h;
                do {
                  f = da2(f, a2, 3, l) | 0;
                  a2 = G() | 0;
                  if ((f | 0) == 0 & (a2 | 0) == 0) {
                    a2 = 2;
                    break a;
                  }
                  h = e3 + (g2 << 3) | 0;
                  b[h >> 2] = f;
                  b[h + 4 >> 2] = a2;
                  g2 = g2 + 1 | 0;
                  if (Fb(f, a2) | 0) {
                    a2 = 1;
                    break a;
                  }
                  i = i + 1 | 0;
                } while ((i | 0) < (d2 | 0));
                h = 0;
                do {
                  f = da2(f, a2, 1, l) | 0;
                  a2 = G() | 0;
                  if ((f | 0) == 0 & (a2 | 0) == 0) {
                    a2 = 2;
                    break a;
                  }
                  i = e3 + (g2 << 3) | 0;
                  b[i >> 2] = f;
                  b[i + 4 >> 2] = a2;
                  g2 = g2 + 1 | 0;
                  if (Fb(f, a2) | 0) {
                    a2 = 1;
                    break a;
                  }
                  h = h + 1 | 0;
                } while ((h | 0) < (d2 | 0));
                h = 0;
                do {
                  f = da2(f, a2, 5, l) | 0;
                  a2 = G() | 0;
                  if ((f | 0) == 0 & (a2 | 0) == 0) {
                    a2 = 2;
                    break a;
                  }
                  i = e3 + (g2 << 3) | 0;
                  b[i >> 2] = f;
                  b[i + 4 >> 2] = a2;
                  g2 = g2 + 1 | 0;
                  if (Fb(f, a2) | 0) {
                    a2 = 1;
                    break a;
                  }
                  h = h + 1 | 0;
                } while ((h | 0) < (d2 | 0));
                h = 0;
                do {
                  f = da2(f, a2, 4, l) | 0;
                  a2 = G() | 0;
                  if ((f | 0) == 0 & (a2 | 0) == 0) {
                    a2 = 2;
                    break a;
                  }
                  i = e3 + (g2 << 3) | 0;
                  b[i >> 2] = f;
                  b[i + 4 >> 2] = a2;
                  g2 = g2 + 1 | 0;
                  if (Fb(f, a2) | 0) {
                    a2 = 1;
                    break a;
                  }
                  h = h + 1 | 0;
                } while ((h | 0) < (d2 | 0));
                h = 0;
                while (1) {
                  f = da2(f, a2, 6, l) | 0;
                  a2 = G() | 0;
                  if ((f | 0) == 0 & (a2 | 0) == 0) {
                    a2 = 2;
                    break a;
                  }
                  if ((h | 0) != (j | 0)) {
                    i = e3 + (g2 << 3) | 0;
                    b[i >> 2] = f;
                    b[i + 4 >> 2] = a2;
                    if (!(Fb(f, a2) | 0)) {
                      g2 = g2 + 1 | 0;
                    } else {
                      a2 = 1;
                      break a;
                    }
                  }
                  h = h + 1 | 0;
                  if ((h | 0) >= (d2 | 0)) {
                    h = k;
                    g2 = c2;
                    break;
                  }
                }
              } else {
                h = k;
                f = k;
                g2 = c2;
                a2 = c2;
              }
            } else {
              h = e3;
              b[h >> 2] = a2;
              b[h + 4 >> 2] = c2;
              h = a2;
              f = a2;
              g2 = c2;
              a2 = c2;
            }
            a2 = ((h | 0) != (f | 0) | (g2 | 0) != (a2 | 0)) & 1;
          } else {
            a2 = 1;
          }
        } while (0);
      l = a2;
      S = m;
      return l | 0;
    }
    function fa(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      var d2 = 0, e3 = 0, f = 0, g2 = 0, h = 0, i = 0;
      g2 = S;
      S = S + 48 | 0;
      f = g2 + 8 | 0;
      e3 = g2;
      i = a2;
      h = b[i + 4 >> 2] | 0;
      d2 = e3;
      b[d2 >> 2] = b[i >> 2];
      b[d2 + 4 >> 2] = h;
      vc(e3, f);
      f = ya(f, c2) | 0;
      c2 = b[e3 >> 2] | 0;
      e3 = b[a2 + 8 >> 2] | 0;
      if ((e3 | 0) <= 0) {
        i = c2;
        h = (f | 0) < (i | 0);
        i = h ? i : f;
        i = i + 12 | 0;
        S = g2;
        return i | 0;
      }
      d2 = b[a2 + 12 >> 2] | 0;
      a2 = 0;
      do {
        c2 = (b[d2 + (a2 << 3) >> 2] | 0) + c2 | 0;
        a2 = a2 + 1 | 0;
      } while ((a2 | 0) < (e3 | 0));
      i = (f | 0) < (c2 | 0);
      i = i ? c2 : f;
      i = i + 12 | 0;
      S = g2;
      return i | 0;
    }
    function ga(a2, c2, d2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      var e3 = 0, f = 0, g2 = 0, h = 0, i = 0, j = 0;
      i = S;
      S = S + 48 | 0;
      e3 = i + 8 | 0;
      f = i;
      if (!(ha(a2, c2, d2) | 0)) {
        S = i;
        return;
      }
      j = a2;
      g2 = b[j + 4 >> 2] | 0;
      h = f;
      b[h >> 2] = b[j >> 2];
      b[h + 4 >> 2] = g2;
      vc(f, e3);
      h = ya(e3, c2) | 0;
      c2 = b[f >> 2] | 0;
      g2 = b[a2 + 8 >> 2] | 0;
      if ((g2 | 0) > 0) {
        f = b[a2 + 12 >> 2] | 0;
        e3 = 0;
        do {
          c2 = (b[f + (e3 << 3) >> 2] | 0) + c2 | 0;
          e3 = e3 + 1 | 0;
        } while ((e3 | 0) != (g2 | 0));
      }
      c2 = (h | 0) < (c2 | 0) ? c2 : h;
      if ((c2 | 0) <= -12) {
        S = i;
        return;
      }
      j = c2 + 11 | 0;
      hd(d2 | 0, 0, (((j | 0) > 0 ? j : 0) << 3) + 8 | 0) | 0;
      S = i;
      return;
    }
    function ha(a2, c2, d2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      var e3 = 0, f = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t4 = 0, u5 = 0, v3 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0, A7 = 0, B5 = 0, C5 = 0, D5 = 0, E3 = 0, F2 = 0, I2 = 0, J2 = 0;
      J2 = S;
      S = S + 112 | 0;
      D5 = J2 + 80 | 0;
      j = J2 + 72 | 0;
      E3 = J2;
      F2 = J2 + 56 | 0;
      k = a2 + 8 | 0;
      I2 = Wc((b[k >> 2] << 5) + 32 | 0) | 0;
      if (!I2) {
        H(22848, 22448, 800, 22456);
      }
      wc(a2, I2);
      g2 = a2;
      e3 = b[g2 + 4 >> 2] | 0;
      i = j;
      b[i >> 2] = b[g2 >> 2];
      b[i + 4 >> 2] = e3;
      vc(j, D5);
      i = ya(D5, c2) | 0;
      e3 = b[j >> 2] | 0;
      g2 = b[k >> 2] | 0;
      if ((g2 | 0) > 0) {
        h = b[a2 + 12 >> 2] | 0;
        f = 0;
        do {
          e3 = (b[h + (f << 3) >> 2] | 0) + e3 | 0;
          f = f + 1 | 0;
        } while ((f | 0) != (g2 | 0));
      }
      i = (i | 0) < (e3 | 0) ? e3 : i;
      C5 = i + 12 | 0;
      f = Yc(C5, 8) | 0;
      l = Yc(C5, 8) | 0;
      b[D5 >> 2] = 0;
      A7 = a2;
      B5 = b[A7 + 4 >> 2] | 0;
      e3 = j;
      b[e3 >> 2] = b[A7 >> 2];
      b[e3 + 4 >> 2] = B5;
      e3 = ia(j, C5, c2, D5, f, l) | 0;
      if (e3 | 0) {
        Xc(f);
        Xc(l);
        Xc(I2);
        I2 = e3;
        S = J2;
        return I2 | 0;
      }
      a:
        do {
          if ((b[k >> 2] | 0) > 0) {
            g2 = a2 + 12 | 0;
            e3 = 0;
            while (1) {
              h = ia((b[g2 >> 2] | 0) + (e3 << 3) | 0, C5, c2, D5, f, l) | 0;
              e3 = e3 + 1 | 0;
              if (h | 0) {
                break;
              }
              if ((e3 | 0) >= (b[k >> 2] | 0)) {
                break a;
              }
            }
            Xc(f);
            Xc(l);
            Xc(I2);
            I2 = h;
            S = J2;
            return I2 | 0;
          }
        } while (0);
      if ((i | 0) > -12) {
        hd(l | 0, 0, ((C5 | 0) > 1 ? C5 : 1) << 3 | 0) | 0;
      }
      b:
        do {
          if ((b[D5 >> 2] | 0) > 0) {
            B5 = ((C5 | 0) < 0) << 31 >> 31;
            v3 = f;
            w2 = l;
            x2 = f;
            y2 = f;
            z2 = l;
            A7 = f;
            e3 = f;
            r2 = f;
            s2 = l;
            t4 = l;
            u5 = l;
            f = l;
            c:
              while (1) {
                q2 = b[D5 >> 2] | 0;
                o = 0;
                p2 = 0;
                g2 = 0;
                while (1) {
                  h = E3;
                  i = h + 56 | 0;
                  do {
                    b[h >> 2] = 0;
                    h = h + 4 | 0;
                  } while ((h | 0) < (i | 0));
                  c2 = v3 + (o << 3) | 0;
                  j = b[c2 >> 2] | 0;
                  c2 = b[c2 + 4 >> 2] | 0;
                  if (ba(j, c2, 1, E3, 0) | 0) {
                    h = E3;
                    i = h + 56 | 0;
                    do {
                      b[h >> 2] = 0;
                      h = h + 4 | 0;
                    } while ((h | 0) < (i | 0));
                    h = Yc(7, 4) | 0;
                    if (h | 0) {
                      ca3(j, c2, 1, E3, h, 7, 0);
                      Xc(h);
                    }
                  }
                  n = 0;
                  do {
                    m = E3 + (n << 3) | 0;
                    l = b[m >> 2] | 0;
                    m = b[m + 4 >> 2] | 0;
                    d:
                      do {
                        if (!((l | 0) == 0 & (m | 0) == 0)) {
                          j = bd2(l | 0, m | 0, C5 | 0, B5 | 0) | 0;
                          G() | 0;
                          h = d2 + (j << 3) | 0;
                          i = h;
                          c2 = b[i >> 2] | 0;
                          i = b[i + 4 >> 2] | 0;
                          if (!((c2 | 0) == 0 & (i | 0) == 0)) {
                            k = 0;
                            while (1) {
                              if ((k | 0) > (C5 | 0)) {
                                break c;
                              }
                              if ((c2 | 0) == (l | 0) & (i | 0) == (m | 0)) {
                                break d;
                              }
                              j = (j + 1 | 0) % (C5 | 0) | 0;
                              h = d2 + (j << 3) | 0;
                              i = h;
                              c2 = b[i >> 2] | 0;
                              i = b[i + 4 >> 2] | 0;
                              if ((c2 | 0) == 0 & (i | 0) == 0) {
                                break;
                              } else {
                                k = k + 1 | 0;
                              }
                            }
                          }
                          if (!((l | 0) == 0 & (m | 0) == 0)) {
                            Vb(l, m, F2);
                            if (xc(a2, I2, F2) | 0) {
                              k = h;
                              b[k >> 2] = l;
                              b[k + 4 >> 2] = m;
                              k = w2 + (g2 << 3) | 0;
                              b[k >> 2] = l;
                              b[k + 4 >> 2] = m;
                              g2 = g2 + 1 | 0;
                            }
                          }
                        }
                      } while (0);
                    n = n + 1 | 0;
                  } while (n >>> 0 < 7);
                  p2 = p2 + 1 | 0;
                  if ((p2 | 0) >= (q2 | 0)) {
                    break;
                  } else {
                    o = o + 1 | 0;
                  }
                }
                if ((q2 | 0) > 0) {
                  hd(x2 | 0, 0, q2 << 3 | 0) | 0;
                }
                b[D5 >> 2] = g2;
                if ((g2 | 0) > 0) {
                  l = f;
                  m = u5;
                  n = A7;
                  o = t4;
                  p2 = s2;
                  q2 = w2;
                  f = r2;
                  u5 = e3;
                  t4 = y2;
                  s2 = x2;
                  r2 = l;
                  e3 = m;
                  A7 = z2;
                  z2 = n;
                  y2 = o;
                  x2 = p2;
                  w2 = v3;
                  v3 = q2;
                } else {
                  break b;
                }
              }
            Xc(y2);
            Xc(z2);
            Xc(I2);
            I2 = -1;
            S = J2;
            return I2 | 0;
          } else {
            e3 = l;
          }
        } while (0);
      Xc(I2);
      Xc(f);
      Xc(e3);
      I2 = 0;
      S = J2;
      return I2 | 0;
    }
    function ia(a2, c2, d2, f, g2, h) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      f = f | 0;
      g2 = g2 | 0;
      h = h | 0;
      var i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t4 = 0, u5 = 0, v3 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0, A7 = 0, B5 = 0, C5 = 0, D5 = 0, E3 = 0;
      C5 = S;
      S = S + 48 | 0;
      y2 = C5 + 32 | 0;
      z2 = C5 + 16 | 0;
      A7 = C5;
      i = b[a2 >> 2] | 0;
      if ((i | 0) <= 0) {
        B5 = 0;
        S = C5;
        return B5 | 0;
      }
      t4 = a2 + 4 | 0;
      u5 = y2 + 8 | 0;
      v3 = z2 + 8 | 0;
      w2 = A7 + 8 | 0;
      x2 = ((c2 | 0) < 0) << 31 >> 31;
      s2 = 0;
      a:
        while (1) {
          j = b[t4 >> 2] | 0;
          q2 = j + (s2 << 4) | 0;
          b[y2 >> 2] = b[q2 >> 2];
          b[y2 + 4 >> 2] = b[q2 + 4 >> 2];
          b[y2 + 8 >> 2] = b[q2 + 8 >> 2];
          b[y2 + 12 >> 2] = b[q2 + 12 >> 2];
          if ((s2 | 0) == (i + -1 | 0)) {
            b[z2 >> 2] = b[j >> 2];
            b[z2 + 4 >> 2] = b[j + 4 >> 2];
            b[z2 + 8 >> 2] = b[j + 8 >> 2];
            b[z2 + 12 >> 2] = b[j + 12 >> 2];
          } else {
            q2 = j + (s2 + 1 << 4) | 0;
            b[z2 >> 2] = b[q2 >> 2];
            b[z2 + 4 >> 2] = b[q2 + 4 >> 2];
            b[z2 + 8 >> 2] = b[q2 + 8 >> 2];
            b[z2 + 12 >> 2] = b[q2 + 12 >> 2];
          }
          q2 = za(y2, z2, d2) | 0;
          b:
            do {
              if ((q2 | 0) > 0) {
                r2 = +(q2 | 0);
                p2 = 0;
                c:
                  while (1) {
                    E3 = +(q2 - p2 | 0);
                    D5 = +(p2 | 0);
                    e[A7 >> 3] = +e[y2 >> 3] * E3 / r2 + +e[z2 >> 3] * D5 / r2;
                    e[w2 >> 3] = +e[u5 >> 3] * E3 / r2 + +e[v3 >> 3] * D5 / r2;
                    n = Sb(A7, d2) | 0;
                    o = G() | 0;
                    j = bd2(n | 0, o | 0, c2 | 0, x2 | 0) | 0;
                    G() | 0;
                    i = h + (j << 3) | 0;
                    k = i;
                    l = b[k >> 2] | 0;
                    k = b[k + 4 >> 2] | 0;
                    d:
                      do {
                        if ((l | 0) == 0 & (k | 0) == 0) {
                          B5 = 14;
                        } else {
                          m = 0;
                          while (1) {
                            if ((m | 0) > (c2 | 0)) {
                              i = 1;
                              break d;
                            }
                            if ((l | 0) == (n | 0) & (k | 0) == (o | 0)) {
                              i = 7;
                              break d;
                            }
                            j = (j + 1 | 0) % (c2 | 0) | 0;
                            i = h + (j << 3) | 0;
                            k = i;
                            l = b[k >> 2] | 0;
                            k = b[k + 4 >> 2] | 0;
                            if ((l | 0) == 0 & (k | 0) == 0) {
                              B5 = 14;
                              break;
                            } else {
                              m = m + 1 | 0;
                            }
                          }
                        }
                      } while (0);
                    if ((B5 | 0) == 14) {
                      B5 = 0;
                      if ((n | 0) == 0 & (o | 0) == 0) {
                        i = 7;
                      } else {
                        b[i >> 2] = n;
                        b[i + 4 >> 2] = o;
                        i = b[f >> 2] | 0;
                        m = g2 + (i << 3) | 0;
                        b[m >> 2] = n;
                        b[m + 4 >> 2] = o;
                        b[f >> 2] = i + 1;
                        i = 0;
                      }
                    }
                    switch (i & 7) {
                      case 7:
                      case 0:
                        break;
                      default:
                        break c;
                    }
                    p2 = p2 + 1 | 0;
                    if ((q2 | 0) <= (p2 | 0)) {
                      B5 = 8;
                      break b;
                    }
                  }
                if (i | 0) {
                  i = -1;
                  B5 = 20;
                  break a;
                }
              } else {
                B5 = 8;
              }
            } while (0);
          if ((B5 | 0) == 8) {
            B5 = 0;
          }
          s2 = s2 + 1 | 0;
          i = b[a2 >> 2] | 0;
          if ((s2 | 0) >= (i | 0)) {
            i = 0;
            B5 = 20;
            break;
          }
        }
      if ((B5 | 0) == 20) {
        S = C5;
        return i | 0;
      }
      return 0;
    }
    function ja(a2, c2, d2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      var e3 = 0, f = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0;
      k = S;
      S = S + 176 | 0;
      j = k;
      if ((c2 | 0) < 1) {
        Mc(d2, 0, 0);
        S = k;
        return;
      }
      h = a2;
      h = cd2(b[h >> 2] | 0, b[h + 4 >> 2] | 0, 52) | 0;
      G() | 0;
      Mc(d2, (c2 | 0) > 6 ? c2 : 6, h & 15);
      h = 0;
      do {
        e3 = a2 + (h << 3) | 0;
        Wb(b[e3 >> 2] | 0, b[e3 + 4 >> 2] | 0, j);
        e3 = b[j >> 2] | 0;
        if ((e3 | 0) > 0) {
          i = 0;
          do {
            g2 = j + 8 + (i << 4) | 0;
            i = i + 1 | 0;
            e3 = j + 8 + (((i | 0) % (e3 | 0) | 0) << 4) | 0;
            f = Rc(d2, e3, g2) | 0;
            if (!f) {
              Qc(d2, g2, e3) | 0;
            } else {
              Pc(d2, f) | 0;
            }
            e3 = b[j >> 2] | 0;
          } while ((i | 0) < (e3 | 0));
        }
        h = h + 1 | 0;
      } while ((h | 0) != (c2 | 0));
      S = k;
      return;
    }
    function ka(a2, c2, d2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      var e3 = 0, f = 0, g2 = 0, h = 0;
      g2 = S;
      S = S + 32 | 0;
      e3 = g2;
      f = g2 + 16 | 0;
      ja(a2, c2, f);
      b[d2 >> 2] = 0;
      b[d2 + 4 >> 2] = 0;
      b[d2 + 8 >> 2] = 0;
      a2 = Oc(f) | 0;
      if (!a2) {
        kc(d2) | 0;
        Nc(f);
        S = g2;
        return;
      }
      do {
        c2 = hc(d2) | 0;
        do {
          ic(c2, a2) | 0;
          h = a2 + 16 | 0;
          b[e3 >> 2] = b[h >> 2];
          b[e3 + 4 >> 2] = b[h + 4 >> 2];
          b[e3 + 8 >> 2] = b[h + 8 >> 2];
          b[e3 + 12 >> 2] = b[h + 12 >> 2];
          Pc(f, a2) | 0;
          a2 = Sc(f, e3) | 0;
        } while ((a2 | 0) != 0);
        a2 = Oc(f) | 0;
      } while ((a2 | 0) != 0);
      kc(d2) | 0;
      Nc(f);
      S = g2;
      return;
    }
    function la(a2) {
      a2 = a2 | 0;
      return b[7728 + (a2 * 28 | 0) + 16 >> 2] | 0;
    }
    function ma(a2) {
      a2 = a2 | 0;
      return (a2 | 0) == 4 | (a2 | 0) == 117 | 0;
    }
    function na(a2) {
      a2 = a2 | 0;
      return b[11152 + ((b[a2 >> 2] | 0) * 216 | 0) + ((b[a2 + 4 >> 2] | 0) * 72 | 0) + ((b[a2 + 8 >> 2] | 0) * 24 | 0) + (b[a2 + 12 >> 2] << 3) >> 2] | 0;
    }
    function oa(a2) {
      a2 = a2 | 0;
      return b[11152 + ((b[a2 >> 2] | 0) * 216 | 0) + ((b[a2 + 4 >> 2] | 0) * 72 | 0) + ((b[a2 + 8 >> 2] | 0) * 24 | 0) + (b[a2 + 12 >> 2] << 3) + 4 >> 2] | 0;
    }
    function pa(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      a2 = 7728 + (a2 * 28 | 0) | 0;
      b[c2 >> 2] = b[a2 >> 2];
      b[c2 + 4 >> 2] = b[a2 + 4 >> 2];
      b[c2 + 8 >> 2] = b[a2 + 8 >> 2];
      b[c2 + 12 >> 2] = b[a2 + 12 >> 2];
      return;
    }
    function qa(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      var d2 = 0, e3 = 0;
      if (c2 >>> 0 > 20) {
        c2 = -1;
        return c2 | 0;
      }
      do {
        if ((b[11152 + (c2 * 216 | 0) >> 2] | 0) != (a2 | 0)) {
          if ((b[11152 + (c2 * 216 | 0) + 8 >> 2] | 0) != (a2 | 0)) {
            if ((b[11152 + (c2 * 216 | 0) + 16 >> 2] | 0) != (a2 | 0)) {
              if ((b[11152 + (c2 * 216 | 0) + 24 >> 2] | 0) != (a2 | 0)) {
                if ((b[11152 + (c2 * 216 | 0) + 32 >> 2] | 0) != (a2 | 0)) {
                  if ((b[11152 + (c2 * 216 | 0) + 40 >> 2] | 0) != (a2 | 0)) {
                    if ((b[11152 + (c2 * 216 | 0) + 48 >> 2] | 0) != (a2 | 0)) {
                      if ((b[11152 + (c2 * 216 | 0) + 56 >> 2] | 0) != (a2 | 0)) {
                        if ((b[11152 + (c2 * 216 | 0) + 64 >> 2] | 0) != (a2 | 0)) {
                          if ((b[11152 + (c2 * 216 | 0) + 72 >> 2] | 0) != (a2 | 0)) {
                            if ((b[11152 + (c2 * 216 | 0) + 80 >> 2] | 0) != (a2 | 0)) {
                              if ((b[11152 + (c2 * 216 | 0) + 88 >> 2] | 0) != (a2 | 0)) {
                                if ((b[11152 + (c2 * 216 | 0) + 96 >> 2] | 0) != (a2 | 0)) {
                                  if ((b[11152 + (c2 * 216 | 0) + 104 >> 2] | 0) != (a2 | 0)) {
                                    if ((b[11152 + (c2 * 216 | 0) + 112 >> 2] | 0) != (a2 | 0)) {
                                      if ((b[11152 + (c2 * 216 | 0) + 120 >> 2] | 0) != (a2 | 0)) {
                                        if ((b[11152 + (c2 * 216 | 0) + 128 >> 2] | 0) != (a2 | 0)) {
                                          if ((b[11152 + (c2 * 216 | 0) + 136 >> 2] | 0) == (a2 | 0)) {
                                            a2 = 2;
                                            d2 = 1;
                                            e3 = 2;
                                          } else {
                                            if ((b[11152 + (c2 * 216 | 0) + 144 >> 2] | 0) == (a2 | 0)) {
                                              a2 = 0;
                                              d2 = 2;
                                              e3 = 0;
                                              break;
                                            }
                                            if ((b[11152 + (c2 * 216 | 0) + 152 >> 2] | 0) == (a2 | 0)) {
                                              a2 = 0;
                                              d2 = 2;
                                              e3 = 1;
                                              break;
                                            }
                                            if ((b[11152 + (c2 * 216 | 0) + 160 >> 2] | 0) == (a2 | 0)) {
                                              a2 = 0;
                                              d2 = 2;
                                              e3 = 2;
                                              break;
                                            }
                                            if ((b[11152 + (c2 * 216 | 0) + 168 >> 2] | 0) == (a2 | 0)) {
                                              a2 = 1;
                                              d2 = 2;
                                              e3 = 0;
                                              break;
                                            }
                                            if ((b[11152 + (c2 * 216 | 0) + 176 >> 2] | 0) == (a2 | 0)) {
                                              a2 = 1;
                                              d2 = 2;
                                              e3 = 1;
                                              break;
                                            }
                                            if ((b[11152 + (c2 * 216 | 0) + 184 >> 2] | 0) == (a2 | 0)) {
                                              a2 = 1;
                                              d2 = 2;
                                              e3 = 2;
                                              break;
                                            }
                                            if ((b[11152 + (c2 * 216 | 0) + 192 >> 2] | 0) == (a2 | 0)) {
                                              a2 = 2;
                                              d2 = 2;
                                              e3 = 0;
                                              break;
                                            }
                                            if ((b[11152 + (c2 * 216 | 0) + 200 >> 2] | 0) == (a2 | 0)) {
                                              a2 = 2;
                                              d2 = 2;
                                              e3 = 1;
                                              break;
                                            }
                                            if ((b[11152 + (c2 * 216 | 0) + 208 >> 2] | 0) == (a2 | 0)) {
                                              a2 = 2;
                                              d2 = 2;
                                              e3 = 2;
                                              break;
                                            } else {
                                              a2 = -1;
                                            }
                                            return a2 | 0;
                                          }
                                        } else {
                                          a2 = 2;
                                          d2 = 1;
                                          e3 = 1;
                                        }
                                      } else {
                                        a2 = 2;
                                        d2 = 1;
                                        e3 = 0;
                                      }
                                    } else {
                                      a2 = 1;
                                      d2 = 1;
                                      e3 = 2;
                                    }
                                  } else {
                                    a2 = 1;
                                    d2 = 1;
                                    e3 = 1;
                                  }
                                } else {
                                  a2 = 1;
                                  d2 = 1;
                                  e3 = 0;
                                }
                              } else {
                                a2 = 0;
                                d2 = 1;
                                e3 = 2;
                              }
                            } else {
                              a2 = 0;
                              d2 = 1;
                              e3 = 1;
                            }
                          } else {
                            a2 = 0;
                            d2 = 1;
                            e3 = 0;
                          }
                        } else {
                          a2 = 2;
                          d2 = 0;
                          e3 = 2;
                        }
                      } else {
                        a2 = 2;
                        d2 = 0;
                        e3 = 1;
                      }
                    } else {
                      a2 = 2;
                      d2 = 0;
                      e3 = 0;
                    }
                  } else {
                    a2 = 1;
                    d2 = 0;
                    e3 = 2;
                  }
                } else {
                  a2 = 1;
                  d2 = 0;
                  e3 = 1;
                }
              } else {
                a2 = 1;
                d2 = 0;
                e3 = 0;
              }
            } else {
              a2 = 0;
              d2 = 0;
              e3 = 2;
            }
          } else {
            a2 = 0;
            d2 = 0;
            e3 = 1;
          }
        } else {
          a2 = 0;
          d2 = 0;
          e3 = 0;
        }
      } while (0);
      c2 = b[11152 + (c2 * 216 | 0) + (d2 * 72 | 0) + (a2 * 24 | 0) + (e3 << 3) + 4 >> 2] | 0;
      return c2 | 0;
    }
    function ra(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      if ((b[7728 + (a2 * 28 | 0) + 20 >> 2] | 0) == (c2 | 0)) {
        c2 = 1;
        return c2 | 0;
      }
      c2 = (b[7728 + (a2 * 28 | 0) + 24 >> 2] | 0) == (c2 | 0);
      return c2 | 0;
    }
    function sa(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      return b[880 + (a2 * 28 | 0) + (c2 << 2) >> 2] | 0;
    }
    function ta(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      if ((b[880 + (a2 * 28 | 0) >> 2] | 0) == (c2 | 0)) {
        c2 = 0;
        return c2 | 0;
      }
      if ((b[880 + (a2 * 28 | 0) + 4 >> 2] | 0) == (c2 | 0)) {
        c2 = 1;
        return c2 | 0;
      }
      if ((b[880 + (a2 * 28 | 0) + 8 >> 2] | 0) == (c2 | 0)) {
        c2 = 2;
        return c2 | 0;
      }
      if ((b[880 + (a2 * 28 | 0) + 12 >> 2] | 0) == (c2 | 0)) {
        c2 = 3;
        return c2 | 0;
      }
      if ((b[880 + (a2 * 28 | 0) + 16 >> 2] | 0) == (c2 | 0)) {
        c2 = 4;
        return c2 | 0;
      }
      if ((b[880 + (a2 * 28 | 0) + 20 >> 2] | 0) == (c2 | 0)) {
        c2 = 5;
        return c2 | 0;
      } else {
        return ((b[880 + (a2 * 28 | 0) + 24 >> 2] | 0) == (c2 | 0) ? 6 : 7) | 0;
      }
      return 0;
    }
    function ua() {
      return 122;
    }
    function va(a2) {
      a2 = a2 | 0;
      var c2 = 0, d2 = 0, e3 = 0;
      c2 = 0;
      do {
        dd(c2 | 0, 0, 45) | 0;
        e3 = G() | 0 | 134225919;
        d2 = a2 + (c2 << 3) | 0;
        b[d2 >> 2] = -1;
        b[d2 + 4 >> 2] = e3;
        c2 = c2 + 1 | 0;
      } while ((c2 | 0) != 122);
      return;
    }
    function wa(a2) {
      a2 = a2 | 0;
      return +e[a2 + 16 >> 3] < +e[a2 + 24 >> 3] | 0;
    }
    function xa(a2, b2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      var c2 = 0, d2 = 0, f = 0;
      c2 = +e[b2 >> 3];
      if (!(c2 >= +e[a2 + 8 >> 3])) {
        b2 = 0;
        return b2 | 0;
      }
      if (!(c2 <= +e[a2 >> 3])) {
        b2 = 0;
        return b2 | 0;
      }
      d2 = +e[a2 + 16 >> 3];
      c2 = +e[a2 + 24 >> 3];
      f = +e[b2 + 8 >> 3];
      b2 = f >= c2;
      a2 = f <= d2 & 1;
      if (d2 < c2) {
        if (b2) {
          a2 = 1;
        }
      } else if (!b2) {
        a2 = 0;
      }
      b2 = (a2 | 0) != 0;
      return b2 | 0;
    }
    function ya(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      var d2 = 0, f = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0;
      i = S;
      S = S + 288 | 0;
      d2 = i + 264 | 0;
      f = i + 96 | 0;
      g2 = i;
      h = g2;
      j = h + 96 | 0;
      do {
        b[h >> 2] = 0;
        h = h + 4 | 0;
      } while ((h | 0) < (j | 0));
      _b(c2, g2);
      h = g2;
      j = b[h >> 2] | 0;
      h = b[h + 4 >> 2] | 0;
      Vb(j, h, d2);
      Wb(j, h, f);
      k = +jb(d2, f + 8 | 0);
      e[d2 >> 3] = +e[a2 >> 3];
      h = d2 + 8 | 0;
      e[h >> 3] = +e[a2 + 16 >> 3];
      e[f >> 3] = +e[a2 + 8 >> 3];
      j = f + 8 | 0;
      e[j >> 3] = +e[a2 + 24 >> 3];
      l = +jb(d2, f);
      j = ~~+A6(+(l * l / +ed(+ +q(+((+e[h >> 3] - +e[j >> 3]) / (+e[d2 >> 3] - +e[f >> 3]))), 3) / (k * (k * 2.59807621135) * 0.8)));
      S = i;
      return ((j | 0) == 0 ? 1 : j) | 0;
    }
    function za(a2, c2, d2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      var e3 = 0, f = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0;
      i = S;
      S = S + 288 | 0;
      e3 = i + 264 | 0;
      f = i + 96 | 0;
      g2 = i;
      h = g2;
      j = h + 96 | 0;
      do {
        b[h >> 2] = 0;
        h = h + 4 | 0;
      } while ((h | 0) < (j | 0));
      _b(d2, g2);
      j = g2;
      h = b[j >> 2] | 0;
      j = b[j + 4 >> 2] | 0;
      Vb(h, j, e3);
      Wb(h, j, f);
      k = +jb(e3, f + 8 | 0);
      j = ~~+A6(+(+jb(a2, c2) / (k * 2)));
      S = i;
      return ((j | 0) == 0 ? 1 : j) | 0;
    }
    function Aa(a2, c2, d2, e3) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      e3 = e3 | 0;
      b[a2 >> 2] = c2;
      b[a2 + 4 >> 2] = d2;
      b[a2 + 8 >> 2] = e3;
      return;
    }
    function Ba(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      var d2 = 0, f = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0;
      n = c2 + 8 | 0;
      b[n >> 2] = 0;
      k = +e[a2 >> 3];
      i = +q(+k);
      l = +e[a2 + 8 >> 3];
      j = +q(+l) / 0.8660254037844386;
      i = i + j * 0.5;
      d2 = ~~i;
      a2 = ~~j;
      i = i - +(d2 | 0);
      j = j - +(a2 | 0);
      do {
        if (i < 0.5) {
          if (i < 0.3333333333333333) {
            b[c2 >> 2] = d2;
            if (j < (i + 1) * 0.5) {
              b[c2 + 4 >> 2] = a2;
              break;
            } else {
              a2 = a2 + 1 | 0;
              b[c2 + 4 >> 2] = a2;
              break;
            }
          } else {
            o = 1 - i;
            a2 = (!(j < o) & 1) + a2 | 0;
            b[c2 + 4 >> 2] = a2;
            if (o <= j & j < i * 2) {
              d2 = d2 + 1 | 0;
              b[c2 >> 2] = d2;
              break;
            } else {
              b[c2 >> 2] = d2;
              break;
            }
          }
        } else {
          if (!(i < 0.6666666666666666)) {
            d2 = d2 + 1 | 0;
            b[c2 >> 2] = d2;
            if (j < i * 0.5) {
              b[c2 + 4 >> 2] = a2;
              break;
            } else {
              a2 = a2 + 1 | 0;
              b[c2 + 4 >> 2] = a2;
              break;
            }
          }
          if (j < 1 - i) {
            b[c2 + 4 >> 2] = a2;
            if (i * 2 + -1 < j) {
              b[c2 >> 2] = d2;
              break;
            }
          } else {
            a2 = a2 + 1 | 0;
            b[c2 + 4 >> 2] = a2;
          }
          d2 = d2 + 1 | 0;
          b[c2 >> 2] = d2;
        }
      } while (0);
      do {
        if (k < 0) {
          if (!(a2 & 1)) {
            m = (a2 | 0) / 2 | 0;
            m = _c(d2 | 0, ((d2 | 0) < 0) << 31 >> 31 | 0, m | 0, ((m | 0) < 0) << 31 >> 31 | 0) | 0;
            d2 = ~~(+(d2 | 0) - (+(m >>> 0) + 4294967296 * +(G() | 0)) * 2);
            b[c2 >> 2] = d2;
            break;
          } else {
            m = (a2 + 1 | 0) / 2 | 0;
            m = _c(d2 | 0, ((d2 | 0) < 0) << 31 >> 31 | 0, m | 0, ((m | 0) < 0) << 31 >> 31 | 0) | 0;
            d2 = ~~(+(d2 | 0) - ((+(m >>> 0) + 4294967296 * +(G() | 0)) * 2 + 1));
            b[c2 >> 2] = d2;
            break;
          }
        }
      } while (0);
      m = c2 + 4 | 0;
      if (l < 0) {
        d2 = d2 - ((a2 << 1 | 1 | 0) / 2 | 0) | 0;
        b[c2 >> 2] = d2;
        a2 = 0 - a2 | 0;
        b[m >> 2] = a2;
      }
      f = a2 - d2 | 0;
      if ((d2 | 0) < 0) {
        g2 = 0 - d2 | 0;
        b[m >> 2] = f;
        b[n >> 2] = g2;
        b[c2 >> 2] = 0;
        a2 = f;
        d2 = 0;
      } else {
        g2 = 0;
      }
      if ((a2 | 0) < 0) {
        d2 = d2 - a2 | 0;
        b[c2 >> 2] = d2;
        g2 = g2 - a2 | 0;
        b[n >> 2] = g2;
        b[m >> 2] = 0;
        a2 = 0;
      }
      h = d2 - g2 | 0;
      f = a2 - g2 | 0;
      if ((g2 | 0) < 0) {
        b[c2 >> 2] = h;
        b[m >> 2] = f;
        b[n >> 2] = 0;
        a2 = f;
        d2 = h;
        g2 = 0;
      }
      f = (a2 | 0) < (d2 | 0) ? a2 : d2;
      f = (g2 | 0) < (f | 0) ? g2 : f;
      if ((f | 0) <= 0) {
        return;
      }
      b[c2 >> 2] = d2 - f;
      b[m >> 2] = a2 - f;
      b[n >> 2] = g2 - f;
      return;
    }
    function Ca(a2) {
      a2 = a2 | 0;
      var c2 = 0, d2 = 0, e3 = 0, f = 0, g2 = 0, h = 0;
      c2 = b[a2 >> 2] | 0;
      h = a2 + 4 | 0;
      d2 = b[h >> 2] | 0;
      if ((c2 | 0) < 0) {
        d2 = d2 - c2 | 0;
        b[h >> 2] = d2;
        g2 = a2 + 8 | 0;
        b[g2 >> 2] = (b[g2 >> 2] | 0) - c2;
        b[a2 >> 2] = 0;
        c2 = 0;
      }
      if ((d2 | 0) < 0) {
        c2 = c2 - d2 | 0;
        b[a2 >> 2] = c2;
        g2 = a2 + 8 | 0;
        f = (b[g2 >> 2] | 0) - d2 | 0;
        b[g2 >> 2] = f;
        b[h >> 2] = 0;
        d2 = 0;
      } else {
        f = a2 + 8 | 0;
        g2 = f;
        f = b[f >> 2] | 0;
      }
      if ((f | 0) < 0) {
        c2 = c2 - f | 0;
        b[a2 >> 2] = c2;
        d2 = d2 - f | 0;
        b[h >> 2] = d2;
        b[g2 >> 2] = 0;
        f = 0;
      }
      e3 = (d2 | 0) < (c2 | 0) ? d2 : c2;
      e3 = (f | 0) < (e3 | 0) ? f : e3;
      if ((e3 | 0) <= 0) {
        return;
      }
      b[a2 >> 2] = c2 - e3;
      b[h >> 2] = d2 - e3;
      b[g2 >> 2] = f - e3;
      return;
    }
    function Da(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      var d2 = 0, f = 0;
      f = b[a2 + 8 >> 2] | 0;
      d2 = +((b[a2 + 4 >> 2] | 0) - f | 0);
      e[c2 >> 3] = +((b[a2 >> 2] | 0) - f | 0) - d2 * 0.5;
      e[c2 + 8 >> 3] = d2 * 0.8660254037844386;
      return;
    }
    function Ea(a2, c2, d2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      b[d2 >> 2] = (b[c2 >> 2] | 0) + (b[a2 >> 2] | 0);
      b[d2 + 4 >> 2] = (b[c2 + 4 >> 2] | 0) + (b[a2 + 4 >> 2] | 0);
      b[d2 + 8 >> 2] = (b[c2 + 8 >> 2] | 0) + (b[a2 + 8 >> 2] | 0);
      return;
    }
    function Fa(a2, c2, d2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      b[d2 >> 2] = (b[a2 >> 2] | 0) - (b[c2 >> 2] | 0);
      b[d2 + 4 >> 2] = (b[a2 + 4 >> 2] | 0) - (b[c2 + 4 >> 2] | 0);
      b[d2 + 8 >> 2] = (b[a2 + 8 >> 2] | 0) - (b[c2 + 8 >> 2] | 0);
      return;
    }
    function Ga(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      var d2 = 0, e3 = 0;
      d2 = B4(b[a2 >> 2] | 0, c2) | 0;
      b[a2 >> 2] = d2;
      d2 = a2 + 4 | 0;
      e3 = B4(b[d2 >> 2] | 0, c2) | 0;
      b[d2 >> 2] = e3;
      a2 = a2 + 8 | 0;
      c2 = B4(b[a2 >> 2] | 0, c2) | 0;
      b[a2 >> 2] = c2;
      return;
    }
    function Ha(a2) {
      a2 = a2 | 0;
      var c2 = 0, d2 = 0, e3 = 0, f = 0, g2 = 0, h = 0, i = 0;
      h = b[a2 >> 2] | 0;
      i = (h | 0) < 0;
      e3 = (b[a2 + 4 >> 2] | 0) - (i ? h : 0) | 0;
      g2 = (e3 | 0) < 0;
      f = (g2 ? 0 - e3 | 0 : 0) + ((b[a2 + 8 >> 2] | 0) - (i ? h : 0)) | 0;
      d2 = (f | 0) < 0;
      a2 = d2 ? 0 : f;
      c2 = (g2 ? 0 : e3) - (d2 ? f : 0) | 0;
      f = (i ? 0 : h) - (g2 ? e3 : 0) - (d2 ? f : 0) | 0;
      d2 = (c2 | 0) < (f | 0) ? c2 : f;
      d2 = (a2 | 0) < (d2 | 0) ? a2 : d2;
      e3 = (d2 | 0) > 0;
      a2 = a2 - (e3 ? d2 : 0) | 0;
      c2 = c2 - (e3 ? d2 : 0) | 0;
      a:
        do {
          switch (f - (e3 ? d2 : 0) | 0) {
            case 0:
              switch (c2 | 0) {
                case 0: {
                  i = (a2 | 0) == 0 ? 0 : (a2 | 0) == 1 ? 1 : 7;
                  return i | 0;
                }
                case 1: {
                  i = (a2 | 0) == 0 ? 2 : (a2 | 0) == 1 ? 3 : 7;
                  return i | 0;
                }
                default:
                  break a;
              }
            case 1:
              switch (c2 | 0) {
                case 0: {
                  i = (a2 | 0) == 0 ? 4 : (a2 | 0) == 1 ? 5 : 7;
                  return i | 0;
                }
                case 1: {
                  if (!a2) {
                    a2 = 6;
                  } else {
                    break a;
                  }
                  return a2 | 0;
                }
                default:
                  break a;
              }
            default:
          }
        } while (0);
      i = 7;
      return i | 0;
    }
    function Ia(a2) {
      a2 = a2 | 0;
      var c2 = 0, d2 = 0, e3 = 0, f = 0, g2 = 0, h = 0, i = 0;
      h = a2 + 8 | 0;
      d2 = b[h >> 2] | 0;
      c2 = (b[a2 >> 2] | 0) - d2 | 0;
      i = a2 + 4 | 0;
      d2 = (b[i >> 2] | 0) - d2 | 0;
      e3 = Vc(+((c2 * 3 | 0) - d2 | 0) / 7) | 0;
      b[a2 >> 2] = e3;
      c2 = Vc(+((d2 << 1) + c2 | 0) / 7) | 0;
      b[i >> 2] = c2;
      b[h >> 2] = 0;
      d2 = c2 - e3 | 0;
      if ((e3 | 0) < 0) {
        g2 = 0 - e3 | 0;
        b[i >> 2] = d2;
        b[h >> 2] = g2;
        b[a2 >> 2] = 0;
        c2 = d2;
        e3 = 0;
        d2 = g2;
      } else {
        d2 = 0;
      }
      if ((c2 | 0) < 0) {
        e3 = e3 - c2 | 0;
        b[a2 >> 2] = e3;
        d2 = d2 - c2 | 0;
        b[h >> 2] = d2;
        b[i >> 2] = 0;
        c2 = 0;
      }
      g2 = e3 - d2 | 0;
      f = c2 - d2 | 0;
      if ((d2 | 0) < 0) {
        b[a2 >> 2] = g2;
        b[i >> 2] = f;
        b[h >> 2] = 0;
        c2 = f;
        f = g2;
        d2 = 0;
      } else {
        f = e3;
      }
      e3 = (c2 | 0) < (f | 0) ? c2 : f;
      e3 = (d2 | 0) < (e3 | 0) ? d2 : e3;
      if ((e3 | 0) <= 0) {
        return;
      }
      b[a2 >> 2] = f - e3;
      b[i >> 2] = c2 - e3;
      b[h >> 2] = d2 - e3;
      return;
    }
    function Ja(a2) {
      a2 = a2 | 0;
      var c2 = 0, d2 = 0, e3 = 0, f = 0, g2 = 0, h = 0, i = 0;
      h = a2 + 8 | 0;
      d2 = b[h >> 2] | 0;
      c2 = (b[a2 >> 2] | 0) - d2 | 0;
      i = a2 + 4 | 0;
      d2 = (b[i >> 2] | 0) - d2 | 0;
      e3 = Vc(+((c2 << 1) + d2 | 0) / 7) | 0;
      b[a2 >> 2] = e3;
      c2 = Vc(+((d2 * 3 | 0) - c2 | 0) / 7) | 0;
      b[i >> 2] = c2;
      b[h >> 2] = 0;
      d2 = c2 - e3 | 0;
      if ((e3 | 0) < 0) {
        g2 = 0 - e3 | 0;
        b[i >> 2] = d2;
        b[h >> 2] = g2;
        b[a2 >> 2] = 0;
        c2 = d2;
        e3 = 0;
        d2 = g2;
      } else {
        d2 = 0;
      }
      if ((c2 | 0) < 0) {
        e3 = e3 - c2 | 0;
        b[a2 >> 2] = e3;
        d2 = d2 - c2 | 0;
        b[h >> 2] = d2;
        b[i >> 2] = 0;
        c2 = 0;
      }
      g2 = e3 - d2 | 0;
      f = c2 - d2 | 0;
      if ((d2 | 0) < 0) {
        b[a2 >> 2] = g2;
        b[i >> 2] = f;
        b[h >> 2] = 0;
        c2 = f;
        f = g2;
        d2 = 0;
      } else {
        f = e3;
      }
      e3 = (c2 | 0) < (f | 0) ? c2 : f;
      e3 = (d2 | 0) < (e3 | 0) ? d2 : e3;
      if ((e3 | 0) <= 0) {
        return;
      }
      b[a2 >> 2] = f - e3;
      b[i >> 2] = c2 - e3;
      b[h >> 2] = d2 - e3;
      return;
    }
    function Ka(a2) {
      a2 = a2 | 0;
      var c2 = 0, d2 = 0, e3 = 0, f = 0, g2 = 0, h = 0, i = 0;
      c2 = b[a2 >> 2] | 0;
      h = a2 + 4 | 0;
      d2 = b[h >> 2] | 0;
      i = a2 + 8 | 0;
      e3 = b[i >> 2] | 0;
      f = d2 + (c2 * 3 | 0) | 0;
      b[a2 >> 2] = f;
      d2 = e3 + (d2 * 3 | 0) | 0;
      b[h >> 2] = d2;
      c2 = (e3 * 3 | 0) + c2 | 0;
      b[i >> 2] = c2;
      e3 = d2 - f | 0;
      if ((f | 0) < 0) {
        c2 = c2 - f | 0;
        b[h >> 2] = e3;
        b[i >> 2] = c2;
        b[a2 >> 2] = 0;
        d2 = e3;
        e3 = 0;
      } else {
        e3 = f;
      }
      if ((d2 | 0) < 0) {
        e3 = e3 - d2 | 0;
        b[a2 >> 2] = e3;
        c2 = c2 - d2 | 0;
        b[i >> 2] = c2;
        b[h >> 2] = 0;
        d2 = 0;
      }
      g2 = e3 - c2 | 0;
      f = d2 - c2 | 0;
      if ((c2 | 0) < 0) {
        b[a2 >> 2] = g2;
        b[h >> 2] = f;
        b[i >> 2] = 0;
        e3 = g2;
        c2 = 0;
      } else {
        f = d2;
      }
      d2 = (f | 0) < (e3 | 0) ? f : e3;
      d2 = (c2 | 0) < (d2 | 0) ? c2 : d2;
      if ((d2 | 0) <= 0) {
        return;
      }
      b[a2 >> 2] = e3 - d2;
      b[h >> 2] = f - d2;
      b[i >> 2] = c2 - d2;
      return;
    }
    function La(a2) {
      a2 = a2 | 0;
      var c2 = 0, d2 = 0, e3 = 0, f = 0, g2 = 0, h = 0, i = 0;
      f = b[a2 >> 2] | 0;
      h = a2 + 4 | 0;
      c2 = b[h >> 2] | 0;
      i = a2 + 8 | 0;
      d2 = b[i >> 2] | 0;
      e3 = (c2 * 3 | 0) + f | 0;
      f = d2 + (f * 3 | 0) | 0;
      b[a2 >> 2] = f;
      b[h >> 2] = e3;
      c2 = (d2 * 3 | 0) + c2 | 0;
      b[i >> 2] = c2;
      d2 = e3 - f | 0;
      if ((f | 0) < 0) {
        c2 = c2 - f | 0;
        b[h >> 2] = d2;
        b[i >> 2] = c2;
        b[a2 >> 2] = 0;
        f = 0;
      } else {
        d2 = e3;
      }
      if ((d2 | 0) < 0) {
        f = f - d2 | 0;
        b[a2 >> 2] = f;
        c2 = c2 - d2 | 0;
        b[i >> 2] = c2;
        b[h >> 2] = 0;
        d2 = 0;
      }
      g2 = f - c2 | 0;
      e3 = d2 - c2 | 0;
      if ((c2 | 0) < 0) {
        b[a2 >> 2] = g2;
        b[h >> 2] = e3;
        b[i >> 2] = 0;
        f = g2;
        c2 = 0;
      } else {
        e3 = d2;
      }
      d2 = (e3 | 0) < (f | 0) ? e3 : f;
      d2 = (c2 | 0) < (d2 | 0) ? c2 : d2;
      if ((d2 | 0) <= 0) {
        return;
      }
      b[a2 >> 2] = f - d2;
      b[h >> 2] = e3 - d2;
      b[i >> 2] = c2 - d2;
      return;
    }
    function Ma(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      var d2 = 0, e3 = 0, f = 0, g2 = 0, h = 0, i = 0;
      if ((c2 + -1 | 0) >>> 0 >= 6) {
        return;
      }
      f = (b[15472 + (c2 * 12 | 0) >> 2] | 0) + (b[a2 >> 2] | 0) | 0;
      b[a2 >> 2] = f;
      i = a2 + 4 | 0;
      e3 = (b[15472 + (c2 * 12 | 0) + 4 >> 2] | 0) + (b[i >> 2] | 0) | 0;
      b[i >> 2] = e3;
      h = a2 + 8 | 0;
      c2 = (b[15472 + (c2 * 12 | 0) + 8 >> 2] | 0) + (b[h >> 2] | 0) | 0;
      b[h >> 2] = c2;
      d2 = e3 - f | 0;
      if ((f | 0) < 0) {
        c2 = c2 - f | 0;
        b[i >> 2] = d2;
        b[h >> 2] = c2;
        b[a2 >> 2] = 0;
        e3 = 0;
      } else {
        d2 = e3;
        e3 = f;
      }
      if ((d2 | 0) < 0) {
        e3 = e3 - d2 | 0;
        b[a2 >> 2] = e3;
        c2 = c2 - d2 | 0;
        b[h >> 2] = c2;
        b[i >> 2] = 0;
        d2 = 0;
      }
      g2 = e3 - c2 | 0;
      f = d2 - c2 | 0;
      if ((c2 | 0) < 0) {
        b[a2 >> 2] = g2;
        b[i >> 2] = f;
        b[h >> 2] = 0;
        e3 = g2;
        c2 = 0;
      } else {
        f = d2;
      }
      d2 = (f | 0) < (e3 | 0) ? f : e3;
      d2 = (c2 | 0) < (d2 | 0) ? c2 : d2;
      if ((d2 | 0) <= 0) {
        return;
      }
      b[a2 >> 2] = e3 - d2;
      b[i >> 2] = f - d2;
      b[h >> 2] = c2 - d2;
      return;
    }
    function Na(a2) {
      a2 = a2 | 0;
      var c2 = 0, d2 = 0, e3 = 0, f = 0, g2 = 0, h = 0, i = 0;
      f = b[a2 >> 2] | 0;
      h = a2 + 4 | 0;
      c2 = b[h >> 2] | 0;
      i = a2 + 8 | 0;
      d2 = b[i >> 2] | 0;
      e3 = c2 + f | 0;
      f = d2 + f | 0;
      b[a2 >> 2] = f;
      b[h >> 2] = e3;
      c2 = d2 + c2 | 0;
      b[i >> 2] = c2;
      d2 = e3 - f | 0;
      if ((f | 0) < 0) {
        c2 = c2 - f | 0;
        b[h >> 2] = d2;
        b[i >> 2] = c2;
        b[a2 >> 2] = 0;
        e3 = 0;
      } else {
        d2 = e3;
        e3 = f;
      }
      if ((d2 | 0) < 0) {
        e3 = e3 - d2 | 0;
        b[a2 >> 2] = e3;
        c2 = c2 - d2 | 0;
        b[i >> 2] = c2;
        b[h >> 2] = 0;
        d2 = 0;
      }
      g2 = e3 - c2 | 0;
      f = d2 - c2 | 0;
      if ((c2 | 0) < 0) {
        b[a2 >> 2] = g2;
        b[h >> 2] = f;
        b[i >> 2] = 0;
        e3 = g2;
        c2 = 0;
      } else {
        f = d2;
      }
      d2 = (f | 0) < (e3 | 0) ? f : e3;
      d2 = (c2 | 0) < (d2 | 0) ? c2 : d2;
      if ((d2 | 0) <= 0) {
        return;
      }
      b[a2 >> 2] = e3 - d2;
      b[h >> 2] = f - d2;
      b[i >> 2] = c2 - d2;
      return;
    }
    function Oa(a2) {
      a2 = a2 | 0;
      var c2 = 0, d2 = 0, e3 = 0, f = 0, g2 = 0, h = 0, i = 0;
      c2 = b[a2 >> 2] | 0;
      h = a2 + 4 | 0;
      e3 = b[h >> 2] | 0;
      i = a2 + 8 | 0;
      d2 = b[i >> 2] | 0;
      f = e3 + c2 | 0;
      b[a2 >> 2] = f;
      e3 = d2 + e3 | 0;
      b[h >> 2] = e3;
      c2 = d2 + c2 | 0;
      b[i >> 2] = c2;
      d2 = e3 - f | 0;
      if ((f | 0) < 0) {
        c2 = c2 - f | 0;
        b[h >> 2] = d2;
        b[i >> 2] = c2;
        b[a2 >> 2] = 0;
        e3 = 0;
      } else {
        d2 = e3;
        e3 = f;
      }
      if ((d2 | 0) < 0) {
        e3 = e3 - d2 | 0;
        b[a2 >> 2] = e3;
        c2 = c2 - d2 | 0;
        b[i >> 2] = c2;
        b[h >> 2] = 0;
        d2 = 0;
      }
      g2 = e3 - c2 | 0;
      f = d2 - c2 | 0;
      if ((c2 | 0) < 0) {
        b[a2 >> 2] = g2;
        b[h >> 2] = f;
        b[i >> 2] = 0;
        e3 = g2;
        c2 = 0;
      } else {
        f = d2;
      }
      d2 = (f | 0) < (e3 | 0) ? f : e3;
      d2 = (c2 | 0) < (d2 | 0) ? c2 : d2;
      if ((d2 | 0) <= 0) {
        return;
      }
      b[a2 >> 2] = e3 - d2;
      b[h >> 2] = f - d2;
      b[i >> 2] = c2 - d2;
      return;
    }
    function Pa(a2) {
      a2 = a2 | 0;
      switch (a2 | 0) {
        case 1: {
          a2 = 5;
          break;
        }
        case 5: {
          a2 = 4;
          break;
        }
        case 4: {
          a2 = 6;
          break;
        }
        case 6: {
          a2 = 2;
          break;
        }
        case 2: {
          a2 = 3;
          break;
        }
        case 3: {
          a2 = 1;
          break;
        }
        default:
      }
      return a2 | 0;
    }
    function Qa(a2) {
      a2 = a2 | 0;
      switch (a2 | 0) {
        case 1: {
          a2 = 3;
          break;
        }
        case 3: {
          a2 = 2;
          break;
        }
        case 2: {
          a2 = 6;
          break;
        }
        case 6: {
          a2 = 4;
          break;
        }
        case 4: {
          a2 = 5;
          break;
        }
        case 5: {
          a2 = 1;
          break;
        }
        default:
      }
      return a2 | 0;
    }
    function Ra(a2) {
      a2 = a2 | 0;
      var c2 = 0, d2 = 0, e3 = 0, f = 0, g2 = 0, h = 0, i = 0;
      c2 = b[a2 >> 2] | 0;
      h = a2 + 4 | 0;
      d2 = b[h >> 2] | 0;
      i = a2 + 8 | 0;
      e3 = b[i >> 2] | 0;
      f = d2 + (c2 << 1) | 0;
      b[a2 >> 2] = f;
      d2 = e3 + (d2 << 1) | 0;
      b[h >> 2] = d2;
      c2 = (e3 << 1) + c2 | 0;
      b[i >> 2] = c2;
      e3 = d2 - f | 0;
      if ((f | 0) < 0) {
        c2 = c2 - f | 0;
        b[h >> 2] = e3;
        b[i >> 2] = c2;
        b[a2 >> 2] = 0;
        d2 = e3;
        e3 = 0;
      } else {
        e3 = f;
      }
      if ((d2 | 0) < 0) {
        e3 = e3 - d2 | 0;
        b[a2 >> 2] = e3;
        c2 = c2 - d2 | 0;
        b[i >> 2] = c2;
        b[h >> 2] = 0;
        d2 = 0;
      }
      g2 = e3 - c2 | 0;
      f = d2 - c2 | 0;
      if ((c2 | 0) < 0) {
        b[a2 >> 2] = g2;
        b[h >> 2] = f;
        b[i >> 2] = 0;
        e3 = g2;
        c2 = 0;
      } else {
        f = d2;
      }
      d2 = (f | 0) < (e3 | 0) ? f : e3;
      d2 = (c2 | 0) < (d2 | 0) ? c2 : d2;
      if ((d2 | 0) <= 0) {
        return;
      }
      b[a2 >> 2] = e3 - d2;
      b[h >> 2] = f - d2;
      b[i >> 2] = c2 - d2;
      return;
    }
    function Sa(a2) {
      a2 = a2 | 0;
      var c2 = 0, d2 = 0, e3 = 0, f = 0, g2 = 0, h = 0, i = 0;
      f = b[a2 >> 2] | 0;
      h = a2 + 4 | 0;
      c2 = b[h >> 2] | 0;
      i = a2 + 8 | 0;
      d2 = b[i >> 2] | 0;
      e3 = (c2 << 1) + f | 0;
      f = d2 + (f << 1) | 0;
      b[a2 >> 2] = f;
      b[h >> 2] = e3;
      c2 = (d2 << 1) + c2 | 0;
      b[i >> 2] = c2;
      d2 = e3 - f | 0;
      if ((f | 0) < 0) {
        c2 = c2 - f | 0;
        b[h >> 2] = d2;
        b[i >> 2] = c2;
        b[a2 >> 2] = 0;
        f = 0;
      } else {
        d2 = e3;
      }
      if ((d2 | 0) < 0) {
        f = f - d2 | 0;
        b[a2 >> 2] = f;
        c2 = c2 - d2 | 0;
        b[i >> 2] = c2;
        b[h >> 2] = 0;
        d2 = 0;
      }
      g2 = f - c2 | 0;
      e3 = d2 - c2 | 0;
      if ((c2 | 0) < 0) {
        b[a2 >> 2] = g2;
        b[h >> 2] = e3;
        b[i >> 2] = 0;
        f = g2;
        c2 = 0;
      } else {
        e3 = d2;
      }
      d2 = (e3 | 0) < (f | 0) ? e3 : f;
      d2 = (c2 | 0) < (d2 | 0) ? c2 : d2;
      if ((d2 | 0) <= 0) {
        return;
      }
      b[a2 >> 2] = f - d2;
      b[h >> 2] = e3 - d2;
      b[i >> 2] = c2 - d2;
      return;
    }
    function Ta(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      var d2 = 0, e3 = 0, f = 0, g2 = 0, h = 0, i = 0;
      h = (b[a2 >> 2] | 0) - (b[c2 >> 2] | 0) | 0;
      i = (h | 0) < 0;
      e3 = (b[a2 + 4 >> 2] | 0) - (b[c2 + 4 >> 2] | 0) - (i ? h : 0) | 0;
      g2 = (e3 | 0) < 0;
      f = (i ? 0 - h | 0 : 0) + (b[a2 + 8 >> 2] | 0) - (b[c2 + 8 >> 2] | 0) + (g2 ? 0 - e3 | 0 : 0) | 0;
      a2 = (f | 0) < 0;
      c2 = a2 ? 0 : f;
      d2 = (g2 ? 0 : e3) - (a2 ? f : 0) | 0;
      f = (i ? 0 : h) - (g2 ? e3 : 0) - (a2 ? f : 0) | 0;
      a2 = (d2 | 0) < (f | 0) ? d2 : f;
      a2 = (c2 | 0) < (a2 | 0) ? c2 : a2;
      e3 = (a2 | 0) > 0;
      c2 = c2 - (e3 ? a2 : 0) | 0;
      d2 = d2 - (e3 ? a2 : 0) | 0;
      a2 = f - (e3 ? a2 : 0) | 0;
      a2 = (a2 | 0) > -1 ? a2 : 0 - a2 | 0;
      d2 = (d2 | 0) > -1 ? d2 : 0 - d2 | 0;
      c2 = (c2 | 0) > -1 ? c2 : 0 - c2 | 0;
      c2 = (d2 | 0) > (c2 | 0) ? d2 : c2;
      return ((a2 | 0) > (c2 | 0) ? a2 : c2) | 0;
    }
    function Ua(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      var d2 = 0;
      d2 = b[a2 + 8 >> 2] | 0;
      b[c2 >> 2] = (b[a2 >> 2] | 0) - d2;
      b[c2 + 4 >> 2] = (b[a2 + 4 >> 2] | 0) - d2;
      return;
    }
    function Va(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      var d2 = 0, e3 = 0, f = 0, g2 = 0, h = 0, i = 0;
      e3 = b[a2 >> 2] | 0;
      b[c2 >> 2] = e3;
      a2 = b[a2 + 4 >> 2] | 0;
      h = c2 + 4 | 0;
      b[h >> 2] = a2;
      i = c2 + 8 | 0;
      b[i >> 2] = 0;
      d2 = a2 - e3 | 0;
      if ((e3 | 0) < 0) {
        a2 = 0 - e3 | 0;
        b[h >> 2] = d2;
        b[i >> 2] = a2;
        b[c2 >> 2] = 0;
        e3 = 0;
      } else {
        d2 = a2;
        a2 = 0;
      }
      if ((d2 | 0) < 0) {
        e3 = e3 - d2 | 0;
        b[c2 >> 2] = e3;
        a2 = a2 - d2 | 0;
        b[i >> 2] = a2;
        b[h >> 2] = 0;
        d2 = 0;
      }
      g2 = e3 - a2 | 0;
      f = d2 - a2 | 0;
      if ((a2 | 0) < 0) {
        b[c2 >> 2] = g2;
        b[h >> 2] = f;
        b[i >> 2] = 0;
        d2 = f;
        f = g2;
        a2 = 0;
      } else {
        f = e3;
      }
      e3 = (d2 | 0) < (f | 0) ? d2 : f;
      e3 = (a2 | 0) < (e3 | 0) ? a2 : e3;
      if ((e3 | 0) <= 0) {
        return;
      }
      b[c2 >> 2] = f - e3;
      b[h >> 2] = d2 - e3;
      b[i >> 2] = a2 - e3;
      return;
    }
    function Wa(a2) {
      a2 = a2 | 0;
      var c2 = 0, d2 = 0, e3 = 0, f = 0;
      c2 = a2 + 8 | 0;
      f = b[c2 >> 2] | 0;
      d2 = f - (b[a2 >> 2] | 0) | 0;
      b[a2 >> 2] = d2;
      e3 = a2 + 4 | 0;
      a2 = (b[e3 >> 2] | 0) - f | 0;
      b[e3 >> 2] = a2;
      b[c2 >> 2] = 0 - (a2 + d2);
      return;
    }
    function Xa(a2) {
      a2 = a2 | 0;
      var c2 = 0, d2 = 0, e3 = 0, f = 0, g2 = 0, h = 0, i = 0;
      d2 = b[a2 >> 2] | 0;
      c2 = 0 - d2 | 0;
      b[a2 >> 2] = c2;
      h = a2 + 8 | 0;
      b[h >> 2] = 0;
      i = a2 + 4 | 0;
      e3 = b[i >> 2] | 0;
      f = e3 + d2 | 0;
      if ((d2 | 0) > 0) {
        b[i >> 2] = f;
        b[h >> 2] = d2;
        b[a2 >> 2] = 0;
        c2 = 0;
        e3 = f;
      } else {
        d2 = 0;
      }
      if ((e3 | 0) < 0) {
        g2 = c2 - e3 | 0;
        b[a2 >> 2] = g2;
        d2 = d2 - e3 | 0;
        b[h >> 2] = d2;
        b[i >> 2] = 0;
        f = g2 - d2 | 0;
        c2 = 0 - d2 | 0;
        if ((d2 | 0) < 0) {
          b[a2 >> 2] = f;
          b[i >> 2] = c2;
          b[h >> 2] = 0;
          e3 = c2;
          d2 = 0;
        } else {
          e3 = 0;
          f = g2;
        }
      } else {
        f = c2;
      }
      c2 = (e3 | 0) < (f | 0) ? e3 : f;
      c2 = (d2 | 0) < (c2 | 0) ? d2 : c2;
      if ((c2 | 0) <= 0) {
        return;
      }
      b[a2 >> 2] = f - c2;
      b[i >> 2] = e3 - c2;
      b[h >> 2] = d2 - c2;
      return;
    }
    function Ya(a2, b2, c2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      c2 = c2 | 0;
      var d2 = 0, e3 = 0;
      d2 = S;
      S = S + 16 | 0;
      e3 = d2;
      Za(a2, b2, c2, e3);
      Ba(e3, c2 + 4 | 0);
      S = d2;
      return;
    }
    function Za(a2, c2, d2, f) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      f = f | 0;
      var g2 = 0, h = 0, i = 0, j = 0, k = 0;
      k = S;
      S = S + 32 | 0;
      h = k;
      Jc(a2, h);
      b[d2 >> 2] = 0;
      g2 = +Ic(15888, h);
      i = +Ic(15912, h);
      if (i < g2) {
        b[d2 >> 2] = 1;
        g2 = i;
      }
      i = +Ic(15936, h);
      if (i < g2) {
        b[d2 >> 2] = 2;
        g2 = i;
      }
      i = +Ic(15960, h);
      if (i < g2) {
        b[d2 >> 2] = 3;
        g2 = i;
      }
      i = +Ic(15984, h);
      if (i < g2) {
        b[d2 >> 2] = 4;
        g2 = i;
      }
      i = +Ic(16008, h);
      if (i < g2) {
        b[d2 >> 2] = 5;
        g2 = i;
      }
      i = +Ic(16032, h);
      if (i < g2) {
        b[d2 >> 2] = 6;
        g2 = i;
      }
      i = +Ic(16056, h);
      if (i < g2) {
        b[d2 >> 2] = 7;
        g2 = i;
      }
      i = +Ic(16080, h);
      if (i < g2) {
        b[d2 >> 2] = 8;
        g2 = i;
      }
      i = +Ic(16104, h);
      if (i < g2) {
        b[d2 >> 2] = 9;
        g2 = i;
      }
      i = +Ic(16128, h);
      if (i < g2) {
        b[d2 >> 2] = 10;
        g2 = i;
      }
      i = +Ic(16152, h);
      if (i < g2) {
        b[d2 >> 2] = 11;
        g2 = i;
      }
      i = +Ic(16176, h);
      if (i < g2) {
        b[d2 >> 2] = 12;
        g2 = i;
      }
      i = +Ic(16200, h);
      if (i < g2) {
        b[d2 >> 2] = 13;
        g2 = i;
      }
      i = +Ic(16224, h);
      if (i < g2) {
        b[d2 >> 2] = 14;
        g2 = i;
      }
      i = +Ic(16248, h);
      if (i < g2) {
        b[d2 >> 2] = 15;
        g2 = i;
      }
      i = +Ic(16272, h);
      if (i < g2) {
        b[d2 >> 2] = 16;
        g2 = i;
      }
      i = +Ic(16296, h);
      if (i < g2) {
        b[d2 >> 2] = 17;
        g2 = i;
      }
      i = +Ic(16320, h);
      if (i < g2) {
        b[d2 >> 2] = 18;
        g2 = i;
      }
      i = +Ic(16344, h);
      if (i < g2) {
        b[d2 >> 2] = 19;
        g2 = i;
      }
      i = +w(+(1 - g2 * 0.5));
      if (i < 1e-16) {
        b[f >> 2] = 0;
        b[f + 4 >> 2] = 0;
        b[f + 8 >> 2] = 0;
        b[f + 12 >> 2] = 0;
        S = k;
        return;
      }
      d2 = b[d2 >> 2] | 0;
      g2 = +e[16368 + (d2 * 24 | 0) >> 3];
      g2 = +gb(g2 - +gb(+lb(15568 + (d2 << 4) | 0, a2)));
      if (!(Rb(c2) | 0)) {
        j = g2;
      } else {
        j = +gb(g2 + -0.3334731722518321);
      }
      g2 = +v2(+i) / 0.381966011250105;
      if ((c2 | 0) > 0) {
        h = 0;
        do {
          g2 = g2 * 2.6457513110645907;
          h = h + 1 | 0;
        } while ((h | 0) != (c2 | 0));
      }
      i = +t(+j) * g2;
      e[f >> 3] = i;
      j = +u4(+j) * g2;
      e[f + 8 >> 3] = j;
      S = k;
      return;
    }
    function _a(a2, c2, d2, f, g2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      f = f | 0;
      g2 = g2 | 0;
      var h = 0, i = 0;
      h = +Fc(a2);
      if (h < 1e-16) {
        c2 = 15568 + (c2 << 4) | 0;
        b[g2 >> 2] = b[c2 >> 2];
        b[g2 + 4 >> 2] = b[c2 + 4 >> 2];
        b[g2 + 8 >> 2] = b[c2 + 8 >> 2];
        b[g2 + 12 >> 2] = b[c2 + 12 >> 2];
        return;
      }
      i = +z(+ +e[a2 + 8 >> 3], + +e[a2 >> 3]);
      if ((d2 | 0) > 0) {
        a2 = 0;
        do {
          h = h / 2.6457513110645907;
          a2 = a2 + 1 | 0;
        } while ((a2 | 0) != (d2 | 0));
      }
      if (!f) {
        h = +y(+(h * 0.381966011250105));
        if (Rb(d2) | 0) {
          i = +gb(i + 0.3334731722518321);
        }
      } else {
        h = h / 3;
        d2 = (Rb(d2) | 0) == 0;
        h = +y(+((d2 ? h : h / 2.6457513110645907) * 0.381966011250105));
      }
      mb(15568 + (c2 << 4) | 0, +gb(+e[16368 + (c2 * 24 | 0) >> 3] - i), h, g2);
      return;
    }
    function $a(a2, c2, d2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      var e3 = 0, f = 0;
      e3 = S;
      S = S + 16 | 0;
      f = e3;
      Da(a2 + 4 | 0, f);
      _a(f, b[a2 >> 2] | 0, c2, 0, d2);
      S = e3;
      return;
    }
    function ab4(a2, c2, d2, f, g2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      f = f | 0;
      g2 = g2 | 0;
      var h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t4 = 0, u5 = 0, v3 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0, A7 = 0, B5 = 0, C5 = 0, D5 = 0, E3 = 0, F2 = 0, G2 = 0, I2 = 0, J2 = 0;
      G2 = S;
      S = S + 272 | 0;
      h = G2 + 256 | 0;
      u5 = G2 + 240 | 0;
      D5 = G2;
      E3 = G2 + 224 | 0;
      F2 = G2 + 208 | 0;
      v3 = G2 + 176 | 0;
      w2 = G2 + 160 | 0;
      x2 = G2 + 192 | 0;
      y2 = G2 + 144 | 0;
      z2 = G2 + 128 | 0;
      A7 = G2 + 112 | 0;
      B5 = G2 + 96 | 0;
      C5 = G2 + 80 | 0;
      b[h >> 2] = c2;
      b[u5 >> 2] = b[a2 >> 2];
      b[u5 + 4 >> 2] = b[a2 + 4 >> 2];
      b[u5 + 8 >> 2] = b[a2 + 8 >> 2];
      b[u5 + 12 >> 2] = b[a2 + 12 >> 2];
      bb2(u5, h, D5);
      b[g2 >> 2] = 0;
      u5 = f + d2 + ((f | 0) == 5 & 1) | 0;
      if ((u5 | 0) <= (d2 | 0)) {
        S = G2;
        return;
      }
      k = b[h >> 2] | 0;
      l = E3 + 4 | 0;
      m = v3 + 4 | 0;
      n = d2 + 5 | 0;
      o = 16848 + (k << 2) | 0;
      p2 = 16928 + (k << 2) | 0;
      q2 = z2 + 8 | 0;
      r2 = A7 + 8 | 0;
      s2 = B5 + 8 | 0;
      t4 = F2 + 4 | 0;
      j = d2;
      a:
        while (1) {
          i = D5 + (((j | 0) % 5 | 0) << 4) | 0;
          b[F2 >> 2] = b[i >> 2];
          b[F2 + 4 >> 2] = b[i + 4 >> 2];
          b[F2 + 8 >> 2] = b[i + 8 >> 2];
          b[F2 + 12 >> 2] = b[i + 12 >> 2];
          do {
          } while ((cb(F2, k, 0, 1) | 0) == 2);
          if ((j | 0) > (d2 | 0) & (Rb(c2) | 0) != 0) {
            b[v3 >> 2] = b[F2 >> 2];
            b[v3 + 4 >> 2] = b[F2 + 4 >> 2];
            b[v3 + 8 >> 2] = b[F2 + 8 >> 2];
            b[v3 + 12 >> 2] = b[F2 + 12 >> 2];
            Da(l, w2);
            f = b[v3 >> 2] | 0;
            h = b[17008 + (f * 80 | 0) + (b[E3 >> 2] << 2) >> 2] | 0;
            b[v3 >> 2] = b[18608 + (f * 80 | 0) + (h * 20 | 0) >> 2];
            i = b[18608 + (f * 80 | 0) + (h * 20 | 0) + 16 >> 2] | 0;
            if ((i | 0) > 0) {
              a2 = 0;
              do {
                Na(m);
                a2 = a2 + 1 | 0;
              } while ((a2 | 0) < (i | 0));
            }
            i = 18608 + (f * 80 | 0) + (h * 20 | 0) + 4 | 0;
            b[x2 >> 2] = b[i >> 2];
            b[x2 + 4 >> 2] = b[i + 4 >> 2];
            b[x2 + 8 >> 2] = b[i + 8 >> 2];
            Ga(x2, (b[o >> 2] | 0) * 3 | 0);
            Ea(m, x2, m);
            Ca(m);
            Da(m, y2);
            I2 = +(b[p2 >> 2] | 0);
            e[z2 >> 3] = I2 * 3;
            e[q2 >> 3] = 0;
            J2 = I2 * -1.5;
            e[A7 >> 3] = J2;
            e[r2 >> 3] = I2 * 2.598076211353316;
            e[B5 >> 3] = J2;
            e[s2 >> 3] = I2 * -2.598076211353316;
            switch (b[17008 + ((b[v3 >> 2] | 0) * 80 | 0) + (b[F2 >> 2] << 2) >> 2] | 0) {
              case 1: {
                a2 = A7;
                f = z2;
                break;
              }
              case 3: {
                a2 = B5;
                f = A7;
                break;
              }
              case 2: {
                a2 = z2;
                f = B5;
                break;
              }
              default: {
                a2 = 12;
                break a;
              }
            }
            Gc(w2, y2, f, a2, C5);
            _a(C5, b[v3 >> 2] | 0, k, 1, g2 + 8 + (b[g2 >> 2] << 4) | 0);
            b[g2 >> 2] = (b[g2 >> 2] | 0) + 1;
          }
          if ((j | 0) < (n | 0)) {
            Da(t4, v3);
            _a(v3, b[F2 >> 2] | 0, k, 1, g2 + 8 + (b[g2 >> 2] << 4) | 0);
            b[g2 >> 2] = (b[g2 >> 2] | 0) + 1;
          }
          b[E3 >> 2] = b[F2 >> 2];
          b[E3 + 4 >> 2] = b[F2 + 4 >> 2];
          b[E3 + 8 >> 2] = b[F2 + 8 >> 2];
          b[E3 + 12 >> 2] = b[F2 + 12 >> 2];
          j = j + 1 | 0;
          if ((j | 0) >= (u5 | 0)) {
            a2 = 3;
            break;
          }
        }
      if ((a2 | 0) == 3) {
        S = G2;
        return;
      } else if ((a2 | 0) == 12) {
        H(22474, 22521, 581, 22531);
      }
    }
    function bb2(a2, c2, d2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      var e3 = 0, f = 0, g2 = 0, h = 0, i = 0, j = 0;
      j = S;
      S = S + 128 | 0;
      e3 = j + 64 | 0;
      f = j;
      g2 = e3;
      h = 20208;
      i = g2 + 60 | 0;
      do {
        b[g2 >> 2] = b[h >> 2];
        g2 = g2 + 4 | 0;
        h = h + 4 | 0;
      } while ((g2 | 0) < (i | 0));
      g2 = f;
      h = 20272;
      i = g2 + 60 | 0;
      do {
        b[g2 >> 2] = b[h >> 2];
        g2 = g2 + 4 | 0;
        h = h + 4 | 0;
      } while ((g2 | 0) < (i | 0));
      i = (Rb(b[c2 >> 2] | 0) | 0) == 0;
      e3 = i ? e3 : f;
      f = a2 + 4 | 0;
      Ra(f);
      Sa(f);
      if (Rb(b[c2 >> 2] | 0) | 0) {
        La(f);
        b[c2 >> 2] = (b[c2 >> 2] | 0) + 1;
      }
      b[d2 >> 2] = b[a2 >> 2];
      c2 = d2 + 4 | 0;
      Ea(f, e3, c2);
      Ca(c2);
      b[d2 + 16 >> 2] = b[a2 >> 2];
      c2 = d2 + 20 | 0;
      Ea(f, e3 + 12 | 0, c2);
      Ca(c2);
      b[d2 + 32 >> 2] = b[a2 >> 2];
      c2 = d2 + 36 | 0;
      Ea(f, e3 + 24 | 0, c2);
      Ca(c2);
      b[d2 + 48 >> 2] = b[a2 >> 2];
      c2 = d2 + 52 | 0;
      Ea(f, e3 + 36 | 0, c2);
      Ca(c2);
      b[d2 + 64 >> 2] = b[a2 >> 2];
      d2 = d2 + 68 | 0;
      Ea(f, e3 + 48 | 0, d2);
      Ca(d2);
      S = j;
      return;
    }
    function cb(a2, c2, d2, e3) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      e3 = e3 | 0;
      var f = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0;
      p2 = S;
      S = S + 32 | 0;
      n = p2 + 12 | 0;
      i = p2;
      o = a2 + 4 | 0;
      m = b[16928 + (c2 << 2) >> 2] | 0;
      l = (e3 | 0) != 0;
      m = l ? m * 3 | 0 : m;
      f = b[o >> 2] | 0;
      k = a2 + 8 | 0;
      h = b[k >> 2] | 0;
      if (l) {
        g2 = a2 + 12 | 0;
        e3 = b[g2 >> 2] | 0;
        f = h + f + e3 | 0;
        if ((f | 0) == (m | 0)) {
          o = 1;
          S = p2;
          return o | 0;
        } else {
          j = g2;
        }
      } else {
        j = a2 + 12 | 0;
        e3 = b[j >> 2] | 0;
        f = h + f + e3 | 0;
      }
      if ((f | 0) <= (m | 0)) {
        o = 0;
        S = p2;
        return o | 0;
      }
      do {
        if ((e3 | 0) > 0) {
          e3 = b[a2 >> 2] | 0;
          if ((h | 0) > 0) {
            g2 = 18608 + (e3 * 80 | 0) + 60 | 0;
            e3 = a2;
            break;
          }
          e3 = 18608 + (e3 * 80 | 0) + 40 | 0;
          if (!d2) {
            g2 = e3;
            e3 = a2;
          } else {
            Aa(n, m, 0, 0);
            Fa(o, n, i);
            Oa(i);
            Ea(i, n, o);
            g2 = e3;
            e3 = a2;
          }
        } else {
          g2 = 18608 + ((b[a2 >> 2] | 0) * 80 | 0) + 20 | 0;
          e3 = a2;
        }
      } while (0);
      b[e3 >> 2] = b[g2 >> 2];
      f = g2 + 16 | 0;
      if ((b[f >> 2] | 0) > 0) {
        e3 = 0;
        do {
          Na(o);
          e3 = e3 + 1 | 0;
        } while ((e3 | 0) < (b[f >> 2] | 0));
      }
      a2 = g2 + 4 | 0;
      b[n >> 2] = b[a2 >> 2];
      b[n + 4 >> 2] = b[a2 + 4 >> 2];
      b[n + 8 >> 2] = b[a2 + 8 >> 2];
      c2 = b[16848 + (c2 << 2) >> 2] | 0;
      Ga(n, l ? c2 * 3 | 0 : c2);
      Ea(o, n, o);
      Ca(o);
      if (l) {
        e3 = ((b[k >> 2] | 0) + (b[o >> 2] | 0) + (b[j >> 2] | 0) | 0) == (m | 0) ? 1 : 2;
      } else {
        e3 = 2;
      }
      o = e3;
      S = p2;
      return o | 0;
    }
    function db(a2, b2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      var c2 = 0;
      do {
        c2 = cb(a2, b2, 0, 1) | 0;
      } while ((c2 | 0) == 2);
      return c2 | 0;
    }
    function eb2(a2, c2, d2, f, g2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      f = f | 0;
      g2 = g2 | 0;
      var h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t4 = 0, u5 = 0, v3 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0, A7 = 0, B5 = 0, C5 = 0, D5 = 0;
      B5 = S;
      S = S + 240 | 0;
      h = B5 + 224 | 0;
      x2 = B5 + 208 | 0;
      y2 = B5;
      z2 = B5 + 192 | 0;
      A7 = B5 + 176 | 0;
      s2 = B5 + 160 | 0;
      t4 = B5 + 144 | 0;
      u5 = B5 + 128 | 0;
      v3 = B5 + 112 | 0;
      w2 = B5 + 96 | 0;
      b[h >> 2] = c2;
      b[x2 >> 2] = b[a2 >> 2];
      b[x2 + 4 >> 2] = b[a2 + 4 >> 2];
      b[x2 + 8 >> 2] = b[a2 + 8 >> 2];
      b[x2 + 12 >> 2] = b[a2 + 12 >> 2];
      fb(x2, h, y2);
      b[g2 >> 2] = 0;
      r2 = f + d2 + ((f | 0) == 6 & 1) | 0;
      if ((r2 | 0) <= (d2 | 0)) {
        S = B5;
        return;
      }
      k = b[h >> 2] | 0;
      l = d2 + 6 | 0;
      m = 16928 + (k << 2) | 0;
      n = t4 + 8 | 0;
      o = u5 + 8 | 0;
      p2 = v3 + 8 | 0;
      q2 = z2 + 4 | 0;
      i = 0;
      j = d2;
      f = -1;
      a:
        while (1) {
          h = (j | 0) % 6 | 0;
          a2 = y2 + (h << 4) | 0;
          b[z2 >> 2] = b[a2 >> 2];
          b[z2 + 4 >> 2] = b[a2 + 4 >> 2];
          b[z2 + 8 >> 2] = b[a2 + 8 >> 2];
          b[z2 + 12 >> 2] = b[a2 + 12 >> 2];
          a2 = i;
          i = cb(z2, k, 0, 1) | 0;
          if ((j | 0) > (d2 | 0) & (Rb(c2) | 0) != 0 ? (a2 | 0) != 1 ? (b[z2 >> 2] | 0) != (f | 0) : 0 : 0) {
            Da(y2 + (((h + 5 | 0) % 6 | 0) << 4) + 4 | 0, A7);
            Da(y2 + (h << 4) + 4 | 0, s2);
            C5 = +(b[m >> 2] | 0);
            e[t4 >> 3] = C5 * 3;
            e[n >> 3] = 0;
            D5 = C5 * -1.5;
            e[u5 >> 3] = D5;
            e[o >> 3] = C5 * 2.598076211353316;
            e[v3 >> 3] = D5;
            e[p2 >> 3] = C5 * -2.598076211353316;
            h = b[x2 >> 2] | 0;
            switch (b[17008 + (h * 80 | 0) + (((f | 0) == (h | 0) ? b[z2 >> 2] | 0 : f) << 2) >> 2] | 0) {
              case 1: {
                a2 = u5;
                f = t4;
                break;
              }
              case 3: {
                a2 = v3;
                f = u5;
                break;
              }
              case 2: {
                a2 = t4;
                f = v3;
                break;
              }
              default: {
                a2 = 8;
                break a;
              }
            }
            Gc(A7, s2, f, a2, w2);
            if (!(Hc(A7, w2) | 0) ? !(Hc(s2, w2) | 0) : 0) {
              _a(w2, b[x2 >> 2] | 0, k, 1, g2 + 8 + (b[g2 >> 2] << 4) | 0);
              b[g2 >> 2] = (b[g2 >> 2] | 0) + 1;
            }
          }
          if ((j | 0) < (l | 0)) {
            Da(q2, A7);
            _a(A7, b[z2 >> 2] | 0, k, 1, g2 + 8 + (b[g2 >> 2] << 4) | 0);
            b[g2 >> 2] = (b[g2 >> 2] | 0) + 1;
          }
          j = j + 1 | 0;
          if ((j | 0) >= (r2 | 0)) {
            a2 = 3;
            break;
          } else {
            f = b[z2 >> 2] | 0;
          }
        }
      if ((a2 | 0) == 3) {
        S = B5;
        return;
      } else if ((a2 | 0) == 8) {
        H(22557, 22521, 746, 22602);
      }
    }
    function fb(a2, c2, d2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      var e3 = 0, f = 0, g2 = 0, h = 0, i = 0, j = 0;
      j = S;
      S = S + 160 | 0;
      e3 = j + 80 | 0;
      f = j;
      g2 = e3;
      h = 20336;
      i = g2 + 72 | 0;
      do {
        b[g2 >> 2] = b[h >> 2];
        g2 = g2 + 4 | 0;
        h = h + 4 | 0;
      } while ((g2 | 0) < (i | 0));
      g2 = f;
      h = 20416;
      i = g2 + 72 | 0;
      do {
        b[g2 >> 2] = b[h >> 2];
        g2 = g2 + 4 | 0;
        h = h + 4 | 0;
      } while ((g2 | 0) < (i | 0));
      i = (Rb(b[c2 >> 2] | 0) | 0) == 0;
      e3 = i ? e3 : f;
      f = a2 + 4 | 0;
      Ra(f);
      Sa(f);
      if (Rb(b[c2 >> 2] | 0) | 0) {
        La(f);
        b[c2 >> 2] = (b[c2 >> 2] | 0) + 1;
      }
      b[d2 >> 2] = b[a2 >> 2];
      c2 = d2 + 4 | 0;
      Ea(f, e3, c2);
      Ca(c2);
      b[d2 + 16 >> 2] = b[a2 >> 2];
      c2 = d2 + 20 | 0;
      Ea(f, e3 + 12 | 0, c2);
      Ca(c2);
      b[d2 + 32 >> 2] = b[a2 >> 2];
      c2 = d2 + 36 | 0;
      Ea(f, e3 + 24 | 0, c2);
      Ca(c2);
      b[d2 + 48 >> 2] = b[a2 >> 2];
      c2 = d2 + 52 | 0;
      Ea(f, e3 + 36 | 0, c2);
      Ca(c2);
      b[d2 + 64 >> 2] = b[a2 >> 2];
      c2 = d2 + 68 | 0;
      Ea(f, e3 + 48 | 0, c2);
      Ca(c2);
      b[d2 + 80 >> 2] = b[a2 >> 2];
      d2 = d2 + 84 | 0;
      Ea(f, e3 + 60 | 0, d2);
      Ca(d2);
      S = j;
      return;
    }
    function gb(a2) {
      a2 = +a2;
      var b2 = 0;
      b2 = a2 < 0 ? a2 + 6.283185307179586 : a2;
      return +(!(a2 >= 6.283185307179586) ? b2 : b2 + -6.283185307179586);
    }
    function hb(a2, b2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      if (!(+q(+(+e[a2 >> 3] - +e[b2 >> 3])) < 17453292519943298e-27)) {
        b2 = 0;
        return b2 | 0;
      }
      b2 = +q(+(+e[a2 + 8 >> 3] - +e[b2 + 8 >> 3])) < 17453292519943298e-27;
      return b2 | 0;
    }
    function ib(a2, b2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      var c2 = 0, d2 = 0, f = 0, g2 = 0;
      f = +e[b2 >> 3];
      d2 = +e[a2 >> 3];
      g2 = +u4(+((f - d2) * 0.5));
      c2 = +u4(+((+e[b2 + 8 >> 3] - +e[a2 + 8 >> 3]) * 0.5));
      c2 = g2 * g2 + c2 * (+t(+f) * +t(+d2) * c2);
      return +(+z(+ +r(+c2), + +r(+(1 - c2))) * 2);
    }
    function jb(a2, b2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      var c2 = 0, d2 = 0, f = 0, g2 = 0;
      f = +e[b2 >> 3];
      d2 = +e[a2 >> 3];
      g2 = +u4(+((f - d2) * 0.5));
      c2 = +u4(+((+e[b2 + 8 >> 3] - +e[a2 + 8 >> 3]) * 0.5));
      c2 = g2 * g2 + c2 * (+t(+f) * +t(+d2) * c2);
      return +(+z(+ +r(+c2), + +r(+(1 - c2))) * 2 * 6371.007180918475);
    }
    function kb(a2, b2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      var c2 = 0, d2 = 0, f = 0, g2 = 0;
      f = +e[b2 >> 3];
      d2 = +e[a2 >> 3];
      g2 = +u4(+((f - d2) * 0.5));
      c2 = +u4(+((+e[b2 + 8 >> 3] - +e[a2 + 8 >> 3]) * 0.5));
      c2 = g2 * g2 + c2 * (+t(+f) * +t(+d2) * c2);
      return +(+z(+ +r(+c2), + +r(+(1 - c2))) * 2 * 6371.007180918475 * 1e3);
    }
    function lb(a2, b2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      var c2 = 0, d2 = 0, f = 0, g2 = 0, h = 0;
      g2 = +e[b2 >> 3];
      d2 = +t(+g2);
      f = +e[b2 + 8 >> 3] - +e[a2 + 8 >> 3];
      h = d2 * +u4(+f);
      c2 = +e[a2 >> 3];
      return + +z(+h, +(+u4(+g2) * +t(+c2) - +t(+f) * (d2 * +u4(+c2))));
    }
    function mb(a2, c2, d2, f) {
      a2 = a2 | 0;
      c2 = +c2;
      d2 = +d2;
      f = f | 0;
      var g2 = 0, h = 0, i = 0, j = 0;
      if (d2 < 1e-16) {
        b[f >> 2] = b[a2 >> 2];
        b[f + 4 >> 2] = b[a2 + 4 >> 2];
        b[f + 8 >> 2] = b[a2 + 8 >> 2];
        b[f + 12 >> 2] = b[a2 + 12 >> 2];
        return;
      }
      h = c2 < 0 ? c2 + 6.283185307179586 : c2;
      h = !(c2 >= 6.283185307179586) ? h : h + -6.283185307179586;
      do {
        if (h < 1e-16) {
          c2 = +e[a2 >> 3] + d2;
          e[f >> 3] = c2;
          g2 = f;
        } else {
          g2 = +q(+(h + -3.141592653589793)) < 1e-16;
          c2 = +e[a2 >> 3];
          if (g2) {
            c2 = c2 - d2;
            e[f >> 3] = c2;
            g2 = f;
            break;
          }
          i = +t(+d2);
          d2 = +u4(+d2);
          c2 = i * +u4(+c2) + +t(+h) * (d2 * +t(+c2));
          c2 = c2 > 1 ? 1 : c2;
          c2 = +x(+(c2 < -1 ? -1 : c2));
          e[f >> 3] = c2;
          if (+q(+(c2 + -1.5707963267948966)) < 1e-16) {
            e[f >> 3] = 1.5707963267948966;
            e[f + 8 >> 3] = 0;
            return;
          }
          if (+q(+(c2 + 1.5707963267948966)) < 1e-16) {
            e[f >> 3] = -1.5707963267948966;
            e[f + 8 >> 3] = 0;
            return;
          }
          j = +t(+c2);
          h = d2 * +u4(+h) / j;
          d2 = +e[a2 >> 3];
          c2 = (i - +u4(+c2) * +u4(+d2)) / +t(+d2) / j;
          i = h > 1 ? 1 : h;
          c2 = c2 > 1 ? 1 : c2;
          c2 = +e[a2 + 8 >> 3] + +z(+(i < -1 ? -1 : i), +(c2 < -1 ? -1 : c2));
          if (c2 > 3.141592653589793) {
            do {
              c2 = c2 + -6.283185307179586;
            } while (c2 > 3.141592653589793);
          }
          if (c2 < -3.141592653589793) {
            do {
              c2 = c2 + 6.283185307179586;
            } while (c2 < -3.141592653589793);
          }
          e[f + 8 >> 3] = c2;
          return;
        }
      } while (0);
      if (+q(+(c2 + -1.5707963267948966)) < 1e-16) {
        e[g2 >> 3] = 1.5707963267948966;
        e[f + 8 >> 3] = 0;
        return;
      }
      if (+q(+(c2 + 1.5707963267948966)) < 1e-16) {
        e[g2 >> 3] = -1.5707963267948966;
        e[f + 8 >> 3] = 0;
        return;
      }
      c2 = +e[a2 + 8 >> 3];
      if (c2 > 3.141592653589793) {
        do {
          c2 = c2 + -6.283185307179586;
        } while (c2 > 3.141592653589793);
      }
      if (c2 < -3.141592653589793) {
        do {
          c2 = c2 + 6.283185307179586;
        } while (c2 < -3.141592653589793);
      }
      e[f + 8 >> 3] = c2;
      return;
    }
    function nb(a2) {
      a2 = a2 | 0;
      return + +e[20496 + (a2 << 3) >> 3];
    }
    function ob(a2) {
      a2 = a2 | 0;
      return + +e[20624 + (a2 << 3) >> 3];
    }
    function pb(a2) {
      a2 = a2 | 0;
      return + +e[20752 + (a2 << 3) >> 3];
    }
    function qb(a2) {
      a2 = a2 | 0;
      return + +e[20880 + (a2 << 3) >> 3];
    }
    function rb(a2) {
      a2 = a2 | 0;
      var c2 = 0;
      c2 = 21008 + (a2 << 3) | 0;
      a2 = b[c2 >> 2] | 0;
      F(b[c2 + 4 >> 2] | 0);
      return a2 | 0;
    }
    function sb(a2, b2, c2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      c2 = c2 | 0;
      var d2 = 0, f = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0;
      n = +e[b2 >> 3];
      l = +e[a2 >> 3];
      j = +u4(+((n - l) * 0.5));
      g2 = +e[b2 + 8 >> 3];
      k = +e[a2 + 8 >> 3];
      h = +u4(+((g2 - k) * 0.5));
      i = +t(+l);
      m = +t(+n);
      h = j * j + h * (m * i * h);
      h = +z(+ +r(+h), + +r(+(1 - h))) * 2;
      j = +e[c2 >> 3];
      n = +u4(+((j - n) * 0.5));
      d2 = +e[c2 + 8 >> 3];
      g2 = +u4(+((d2 - g2) * 0.5));
      f = +t(+j);
      g2 = n * n + g2 * (m * f * g2);
      g2 = +z(+ +r(+g2), + +r(+(1 - g2))) * 2;
      j = +u4(+((l - j) * 0.5));
      d2 = +u4(+((k - d2) * 0.5));
      d2 = j * j + d2 * (i * f * d2);
      d2 = +z(+ +r(+d2), + +r(+(1 - d2))) * 2;
      f = (h + g2 + d2) * 0.5;
      return +(+y(+ +r(+(+v2(+(f * 0.5)) * +v2(+((f - h) * 0.5)) * +v2(+((f - g2) * 0.5)) * +v2(+((f - d2) * 0.5))))) * 4);
    }
    function tb(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      var d2 = 0, e3 = 0, f = 0, g2 = 0, h = 0;
      g2 = S;
      S = S + 192 | 0;
      e3 = g2 + 168 | 0;
      f = g2;
      Vb(a2, c2, e3);
      Wb(a2, c2, f);
      c2 = b[f >> 2] | 0;
      if ((c2 | 0) <= 0) {
        d2 = 0;
        S = g2;
        return +d2;
      }
      d2 = +sb(f + 8 | 0, f + 8 + (((c2 | 0) != 1 & 1) << 4) | 0, e3) + 0;
      if ((c2 | 0) == 1) {
        S = g2;
        return +d2;
      }
      a2 = 1;
      do {
        h = a2;
        a2 = a2 + 1 | 0;
        d2 = d2 + +sb(f + 8 + (h << 4) | 0, f + 8 + (((a2 | 0) % (c2 | 0) | 0) << 4) | 0, e3);
      } while ((a2 | 0) < (c2 | 0));
      S = g2;
      return +d2;
    }
    function ub(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      var d2 = 0, e3 = 0, f = 0, g2 = 0, h = 0;
      g2 = S;
      S = S + 192 | 0;
      e3 = g2 + 168 | 0;
      f = g2;
      Vb(a2, c2, e3);
      Wb(a2, c2, f);
      c2 = b[f >> 2] | 0;
      if ((c2 | 0) > 0) {
        d2 = +sb(f + 8 | 0, f + 8 + (((c2 | 0) != 1 & 1) << 4) | 0, e3) + 0;
        if ((c2 | 0) != 1) {
          a2 = 1;
          do {
            h = a2;
            a2 = a2 + 1 | 0;
            d2 = d2 + +sb(f + 8 + (h << 4) | 0, f + 8 + (((a2 | 0) % (c2 | 0) | 0) << 4) | 0, e3);
          } while ((a2 | 0) < (c2 | 0));
        }
      } else {
        d2 = 0;
      }
      S = g2;
      return +(d2 * 6371.007180918475 * 6371.007180918475);
    }
    function vb(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      var d2 = 0, e3 = 0, f = 0, g2 = 0, h = 0;
      g2 = S;
      S = S + 192 | 0;
      e3 = g2 + 168 | 0;
      f = g2;
      Vb(a2, c2, e3);
      Wb(a2, c2, f);
      c2 = b[f >> 2] | 0;
      if ((c2 | 0) > 0) {
        d2 = +sb(f + 8 | 0, f + 8 + (((c2 | 0) != 1 & 1) << 4) | 0, e3) + 0;
        if ((c2 | 0) != 1) {
          a2 = 1;
          do {
            h = a2;
            a2 = a2 + 1 | 0;
            d2 = d2 + +sb(f + 8 + (h << 4) | 0, f + 8 + (((a2 | 0) % (c2 | 0) | 0) << 4) | 0, e3);
          } while ((a2 | 0) < (c2 | 0));
        }
      } else {
        d2 = 0;
      }
      S = g2;
      return +(d2 * 6371.007180918475 * 6371.007180918475 * 1e3 * 1e3);
    }
    function wb(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      var d2 = 0, f = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0;
      i = S;
      S = S + 176 | 0;
      h = i;
      gc(a2, c2, h);
      a2 = b[h >> 2] | 0;
      if ((a2 | 0) <= 1) {
        g2 = 0;
        S = i;
        return +g2;
      }
      c2 = a2 + -1 | 0;
      a2 = 0;
      d2 = 0;
      f = +e[h + 8 >> 3];
      g2 = +e[h + 16 >> 3];
      do {
        a2 = a2 + 1 | 0;
        k = f;
        f = +e[h + 8 + (a2 << 4) >> 3];
        l = +u4(+((f - k) * 0.5));
        j = g2;
        g2 = +e[h + 8 + (a2 << 4) + 8 >> 3];
        j = +u4(+((g2 - j) * 0.5));
        j = l * l + j * (+t(+f) * +t(+k) * j);
        d2 = d2 + +z(+ +r(+j), + +r(+(1 - j))) * 2;
      } while ((a2 | 0) < (c2 | 0));
      S = i;
      return +d2;
    }
    function xb(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      var d2 = 0, f = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0;
      i = S;
      S = S + 176 | 0;
      h = i;
      gc(a2, c2, h);
      a2 = b[h >> 2] | 0;
      if ((a2 | 0) <= 1) {
        g2 = 0;
        S = i;
        return +g2;
      }
      c2 = a2 + -1 | 0;
      a2 = 0;
      d2 = 0;
      f = +e[h + 8 >> 3];
      g2 = +e[h + 16 >> 3];
      do {
        a2 = a2 + 1 | 0;
        k = f;
        f = +e[h + 8 + (a2 << 4) >> 3];
        l = +u4(+((f - k) * 0.5));
        j = g2;
        g2 = +e[h + 8 + (a2 << 4) + 8 >> 3];
        j = +u4(+((g2 - j) * 0.5));
        j = l * l + j * (+t(+k) * +t(+f) * j);
        d2 = d2 + +z(+ +r(+j), + +r(+(1 - j))) * 2;
      } while ((a2 | 0) != (c2 | 0));
      l = d2 * 6371.007180918475;
      S = i;
      return +l;
    }
    function yb(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      var d2 = 0, f = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0;
      i = S;
      S = S + 176 | 0;
      h = i;
      gc(a2, c2, h);
      a2 = b[h >> 2] | 0;
      if ((a2 | 0) <= 1) {
        g2 = 0;
        S = i;
        return +g2;
      }
      c2 = a2 + -1 | 0;
      a2 = 0;
      d2 = 0;
      f = +e[h + 8 >> 3];
      g2 = +e[h + 16 >> 3];
      do {
        a2 = a2 + 1 | 0;
        k = f;
        f = +e[h + 8 + (a2 << 4) >> 3];
        l = +u4(+((f - k) * 0.5));
        j = g2;
        g2 = +e[h + 8 + (a2 << 4) + 8 >> 3];
        j = +u4(+((g2 - j) * 0.5));
        j = l * l + j * (+t(+k) * +t(+f) * j);
        d2 = d2 + +z(+ +r(+j), + +r(+(1 - j))) * 2;
      } while ((a2 | 0) != (c2 | 0));
      l = d2 * 6371.007180918475 * 1e3;
      S = i;
      return +l;
    }
    function zb(a2, b2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      b2 = cd2(a2 | 0, b2 | 0, 52) | 0;
      G() | 0;
      return b2 & 15 | 0;
    }
    function Ab(a2, b2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      b2 = cd2(a2 | 0, b2 | 0, 45) | 0;
      G() | 0;
      return b2 & 127 | 0;
    }
    function Bb(a2, b2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      var c2 = 0, d2 = 0, e3 = 0, f = 0, g2 = 0, h = 0;
      if (!(true & (b2 & -16777216 | 0) == 134217728)) {
        b2 = 0;
        return b2 | 0;
      }
      g2 = cd2(a2 | 0, b2 | 0, 45) | 0;
      G() | 0;
      g2 = g2 & 127;
      if (g2 >>> 0 > 121) {
        b2 = 0;
        return b2 | 0;
      }
      c2 = cd2(a2 | 0, b2 | 0, 52) | 0;
      G() | 0;
      c2 = c2 & 15;
      do {
        if (c2 | 0) {
          e3 = 1;
          d2 = 0;
          while (1) {
            f = cd2(a2 | 0, b2 | 0, (15 - e3 | 0) * 3 | 0) | 0;
            G() | 0;
            f = f & 7;
            if ((f | 0) != 0 & (d2 ^ 1)) {
              if ((f | 0) == 1 & (la(g2) | 0) != 0) {
                h = 0;
                d2 = 13;
                break;
              } else {
                d2 = 1;
              }
            }
            if ((f | 0) == 7) {
              h = 0;
              d2 = 13;
              break;
            }
            if (e3 >>> 0 < c2 >>> 0) {
              e3 = e3 + 1 | 0;
            } else {
              d2 = 9;
              break;
            }
          }
          if ((d2 | 0) == 9) {
            if ((c2 | 0) == 15) {
              h = 1;
            } else {
              break;
            }
            return h | 0;
          } else if ((d2 | 0) == 13) {
            return h | 0;
          }
        }
      } while (0);
      while (1) {
        h = cd2(a2 | 0, b2 | 0, (14 - c2 | 0) * 3 | 0) | 0;
        G() | 0;
        if (!((h & 7 | 0) == 7 & true)) {
          h = 0;
          d2 = 13;
          break;
        }
        if (c2 >>> 0 < 14) {
          c2 = c2 + 1 | 0;
        } else {
          h = 1;
          d2 = 13;
          break;
        }
      }
      if ((d2 | 0) == 13) {
        return h | 0;
      }
      return 0;
    }
    function Cb(a2, b2, c2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      c2 = c2 | 0;
      var d2 = 0, e3 = 0;
      d2 = cd2(a2 | 0, b2 | 0, 52) | 0;
      G() | 0;
      d2 = d2 & 15;
      if ((d2 | 0) >= (c2 | 0)) {
        if ((d2 | 0) != (c2 | 0)) {
          if (c2 >>> 0 <= 15) {
            e3 = dd(c2 | 0, 0, 52) | 0;
            a2 = e3 | a2;
            b2 = G() | 0 | b2 & -15728641;
            if ((d2 | 0) > (c2 | 0)) {
              do {
                e3 = dd(7, 0, (14 - c2 | 0) * 3 | 0) | 0;
                c2 = c2 + 1 | 0;
                a2 = e3 | a2;
                b2 = G() | 0 | b2;
              } while ((c2 | 0) < (d2 | 0));
            }
          } else {
            b2 = 0;
            a2 = 0;
          }
        }
      } else {
        b2 = 0;
        a2 = 0;
      }
      F(b2 | 0);
      return a2 | 0;
    }
    function Db(a2, b2, c2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      c2 = c2 | 0;
      a2 = cd2(a2 | 0, b2 | 0, 52) | 0;
      G() | 0;
      a2 = a2 & 15;
      if (!((c2 | 0) < 16 & (a2 | 0) <= (c2 | 0))) {
        c2 = 0;
        return c2 | 0;
      }
      c2 = tc(7, c2 - a2 | 0) | 0;
      return c2 | 0;
    }
    function Eb(a2, c2, d2, e3) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      e3 = e3 | 0;
      var f = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0;
      h = cd2(a2 | 0, c2 | 0, 52) | 0;
      G() | 0;
      h = h & 15;
      if (!((d2 | 0) < 16 & (h | 0) <= (d2 | 0))) {
        return;
      }
      if ((h | 0) == (d2 | 0)) {
        d2 = e3;
        b[d2 >> 2] = a2;
        b[d2 + 4 >> 2] = c2;
        return;
      }
      j = tc(7, d2 - h | 0) | 0;
      k = (j | 0) / 7 | 0;
      i = cd2(a2 | 0, c2 | 0, 45) | 0;
      G() | 0;
      if (!(la(i & 127) | 0)) {
        g2 = 0;
      } else {
        a:
          do {
            if (!h) {
              f = 0;
            } else {
              g2 = 1;
              while (1) {
                f = cd2(a2 | 0, c2 | 0, (15 - g2 | 0) * 3 | 0) | 0;
                G() | 0;
                f = f & 7;
                if (f | 0) {
                  break a;
                }
                if (g2 >>> 0 < h >>> 0) {
                  g2 = g2 + 1 | 0;
                } else {
                  f = 0;
                  break;
                }
              }
            }
          } while (0);
        g2 = (f | 0) == 0;
      }
      l = dd(h + 1 | 0, 0, 52) | 0;
      f = G() | 0 | c2 & -15728641;
      i = (14 - h | 0) * 3 | 0;
      c2 = dd(7, 0, i | 0) | 0;
      c2 = (l | a2) & ~c2;
      h = f & ~(G() | 0);
      Eb(c2, h, d2, e3);
      f = e3 + (k << 3) | 0;
      if (!g2) {
        l = dd(1, 0, i | 0) | 0;
        Eb(l | c2, G() | 0 | h, d2, f);
        l = f + (k << 3) | 0;
        j = dd(2, 0, i | 0) | 0;
        Eb(j | c2, G() | 0 | h, d2, l);
        l = l + (k << 3) | 0;
        j = dd(3, 0, i | 0) | 0;
        Eb(j | c2, G() | 0 | h, d2, l);
        l = l + (k << 3) | 0;
        j = dd(4, 0, i | 0) | 0;
        Eb(j | c2, G() | 0 | h, d2, l);
        l = l + (k << 3) | 0;
        j = dd(5, 0, i | 0) | 0;
        Eb(j | c2, G() | 0 | h, d2, l);
        j = dd(6, 0, i | 0) | 0;
        Eb(j | c2, G() | 0 | h, d2, l + (k << 3) | 0);
        return;
      }
      g2 = f + (k << 3) | 0;
      if ((j | 0) > 6) {
        j = f + 8 | 0;
        l = (g2 >>> 0 > j >>> 0 ? g2 : j) + -1 + (0 - f) | 0;
        hd(f | 0, 0, l + 8 & -8 | 0) | 0;
        f = j + (l >>> 3 << 3) | 0;
      }
      l = dd(2, 0, i | 0) | 0;
      Eb(l | c2, G() | 0 | h, d2, f);
      l = f + (k << 3) | 0;
      j = dd(3, 0, i | 0) | 0;
      Eb(j | c2, G() | 0 | h, d2, l);
      l = l + (k << 3) | 0;
      j = dd(4, 0, i | 0) | 0;
      Eb(j | c2, G() | 0 | h, d2, l);
      l = l + (k << 3) | 0;
      j = dd(5, 0, i | 0) | 0;
      Eb(j | c2, G() | 0 | h, d2, l);
      j = dd(6, 0, i | 0) | 0;
      Eb(j | c2, G() | 0 | h, d2, l + (k << 3) | 0);
      return;
    }
    function Fb(a2, b2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      var c2 = 0, d2 = 0, e3 = 0;
      e3 = cd2(a2 | 0, b2 | 0, 45) | 0;
      G() | 0;
      if (!(la(e3 & 127) | 0)) {
        e3 = 0;
        return e3 | 0;
      }
      e3 = cd2(a2 | 0, b2 | 0, 52) | 0;
      G() | 0;
      e3 = e3 & 15;
      a:
        do {
          if (!e3) {
            c2 = 0;
          } else {
            d2 = 1;
            while (1) {
              c2 = cd2(a2 | 0, b2 | 0, (15 - d2 | 0) * 3 | 0) | 0;
              G() | 0;
              c2 = c2 & 7;
              if (c2 | 0) {
                break a;
              }
              if (d2 >>> 0 < e3 >>> 0) {
                d2 = d2 + 1 | 0;
              } else {
                c2 = 0;
                break;
              }
            }
          }
        } while (0);
      e3 = (c2 | 0) == 0 & 1;
      return e3 | 0;
    }
    function Gb(a2, b2, c2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      c2 = c2 | 0;
      var d2 = 0, e3 = 0;
      d2 = cd2(a2 | 0, b2 | 0, 52) | 0;
      G() | 0;
      d2 = d2 & 15;
      if ((c2 | 0) < 16 & (d2 | 0) <= (c2 | 0)) {
        if ((d2 | 0) != (c2 | 0)) {
          e3 = dd(c2 | 0, 0, 52) | 0;
          a2 = e3 | a2;
          b2 = G() | 0 | b2 & -15728641;
          if ((d2 | 0) < (c2 | 0)) {
            do {
              e3 = dd(7, 0, (14 - d2 | 0) * 3 | 0) | 0;
              d2 = d2 + 1 | 0;
              a2 = a2 & ~e3;
              b2 = b2 & ~(G() | 0);
            } while ((d2 | 0) < (c2 | 0));
          }
        }
      } else {
        b2 = 0;
        a2 = 0;
      }
      F(b2 | 0);
      return a2 | 0;
    }
    function Hb(a2, c2, d2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      var e3 = 0, f = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t4 = 0, u5 = 0, v3 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0;
      if (!d2) {
        y2 = 0;
        return y2 | 0;
      }
      f = a2;
      e3 = b[f >> 2] | 0;
      f = b[f + 4 >> 2] | 0;
      if (true & (f & 15728640 | 0) == 0) {
        if ((d2 | 0) <= 0) {
          y2 = 0;
          return y2 | 0;
        }
        y2 = c2;
        b[y2 >> 2] = e3;
        b[y2 + 4 >> 2] = f;
        if ((d2 | 0) == 1) {
          y2 = 0;
          return y2 | 0;
        }
        e3 = 1;
        do {
          w2 = a2 + (e3 << 3) | 0;
          x2 = b[w2 + 4 >> 2] | 0;
          y2 = c2 + (e3 << 3) | 0;
          b[y2 >> 2] = b[w2 >> 2];
          b[y2 + 4 >> 2] = x2;
          e3 = e3 + 1 | 0;
        } while ((e3 | 0) != (d2 | 0));
        e3 = 0;
        return e3 | 0;
      }
      w2 = d2 << 3;
      x2 = Wc(w2) | 0;
      if (!x2) {
        y2 = -3;
        return y2 | 0;
      }
      gd(x2 | 0, a2 | 0, w2 | 0) | 0;
      v3 = Yc(d2, 8) | 0;
      if (!v3) {
        Xc(x2);
        y2 = -3;
        return y2 | 0;
      }
      e3 = d2;
      a:
        while (1) {
          h = x2;
          l = b[h >> 2] | 0;
          h = b[h + 4 >> 2] | 0;
          t4 = cd2(l | 0, h | 0, 52) | 0;
          G() | 0;
          t4 = t4 & 15;
          u5 = t4 + -1 | 0;
          s2 = (e3 | 0) > 0;
          b:
            do {
              if (s2) {
                r2 = ((e3 | 0) < 0) << 31 >> 31;
                p2 = dd(u5 | 0, 0, 52) | 0;
                q2 = G() | 0;
                if (u5 >>> 0 > 15) {
                  f = 0;
                  a2 = l;
                  d2 = h;
                  while (1) {
                    if (!((a2 | 0) == 0 & (d2 | 0) == 0)) {
                      g2 = cd2(a2 | 0, d2 | 0, 52) | 0;
                      G() | 0;
                      g2 = g2 & 15;
                      i = (g2 | 0) < (u5 | 0);
                      g2 = (g2 | 0) == (u5 | 0);
                      k = i ? 0 : g2 ? a2 : 0;
                      a2 = i ? 0 : g2 ? d2 : 0;
                      d2 = bd2(k | 0, a2 | 0, e3 | 0, r2 | 0) | 0;
                      G() | 0;
                      g2 = v3 + (d2 << 3) | 0;
                      i = g2;
                      j = b[i >> 2] | 0;
                      i = b[i + 4 >> 2] | 0;
                      if ((j | 0) == 0 & (i | 0) == 0) {
                        d2 = k;
                      } else {
                        p2 = 0;
                        o = d2;
                        n = i;
                        d2 = k;
                        while (1) {
                          if ((p2 | 0) > (e3 | 0)) {
                            y2 = 41;
                            break a;
                          }
                          if ((j | 0) == (d2 | 0) & (n & -117440513 | 0) == (a2 | 0)) {
                            k = cd2(j | 0, n | 0, 56) | 0;
                            G() | 0;
                            k = k & 7;
                            m = k + 1 | 0;
                            q2 = cd2(j | 0, n | 0, 45) | 0;
                            G() | 0;
                            c:
                              do {
                                if (!(la(q2 & 127) | 0)) {
                                  i = 7;
                                } else {
                                  j = cd2(j | 0, n | 0, 52) | 0;
                                  G() | 0;
                                  j = j & 15;
                                  if (!j) {
                                    i = 6;
                                    break;
                                  }
                                  i = 1;
                                  while (1) {
                                    q2 = dd(7, 0, (15 - i | 0) * 3 | 0) | 0;
                                    if (!((q2 & d2 | 0) == 0 & ((G() | 0) & a2 | 0) == 0)) {
                                      i = 7;
                                      break c;
                                    }
                                    if (i >>> 0 < j >>> 0) {
                                      i = i + 1 | 0;
                                    } else {
                                      i = 6;
                                      break;
                                    }
                                  }
                                }
                              } while (0);
                            if ((k + 2 | 0) >>> 0 > i >>> 0) {
                              y2 = 51;
                              break a;
                            }
                            q2 = dd(m | 0, 0, 56) | 0;
                            a2 = G() | 0 | a2 & -117440513;
                            i = g2;
                            b[i >> 2] = 0;
                            b[i + 4 >> 2] = 0;
                            i = o;
                            d2 = q2 | d2;
                          } else {
                            i = (o + 1 | 0) % (e3 | 0) | 0;
                          }
                          g2 = v3 + (i << 3) | 0;
                          n = g2;
                          j = b[n >> 2] | 0;
                          n = b[n + 4 >> 2] | 0;
                          if ((j | 0) == 0 & (n | 0) == 0) {
                            break;
                          } else {
                            p2 = p2 + 1 | 0;
                            o = i;
                          }
                        }
                      }
                      q2 = g2;
                      b[q2 >> 2] = d2;
                      b[q2 + 4 >> 2] = a2;
                    }
                    f = f + 1 | 0;
                    if ((f | 0) >= (e3 | 0)) {
                      break b;
                    }
                    d2 = x2 + (f << 3) | 0;
                    a2 = b[d2 >> 2] | 0;
                    d2 = b[d2 + 4 >> 2] | 0;
                  }
                }
                f = 0;
                a2 = l;
                d2 = h;
                while (1) {
                  if (!((a2 | 0) == 0 & (d2 | 0) == 0)) {
                    i = cd2(a2 | 0, d2 | 0, 52) | 0;
                    G() | 0;
                    i = i & 15;
                    if ((i | 0) >= (u5 | 0)) {
                      if ((i | 0) != (u5 | 0)) {
                        a2 = a2 | p2;
                        d2 = d2 & -15728641 | q2;
                        if (i >>> 0 >= t4 >>> 0) {
                          g2 = u5;
                          do {
                            o = dd(7, 0, (14 - g2 | 0) * 3 | 0) | 0;
                            g2 = g2 + 1 | 0;
                            a2 = o | a2;
                            d2 = G() | 0 | d2;
                          } while (g2 >>> 0 < i >>> 0);
                        }
                      }
                    } else {
                      a2 = 0;
                      d2 = 0;
                    }
                    i = bd2(a2 | 0, d2 | 0, e3 | 0, r2 | 0) | 0;
                    G() | 0;
                    g2 = v3 + (i << 3) | 0;
                    j = g2;
                    k = b[j >> 2] | 0;
                    j = b[j + 4 >> 2] | 0;
                    if (!((k | 0) == 0 & (j | 0) == 0)) {
                      o = 0;
                      while (1) {
                        if ((o | 0) > (e3 | 0)) {
                          y2 = 41;
                          break a;
                        }
                        if ((k | 0) == (a2 | 0) & (j & -117440513 | 0) == (d2 | 0)) {
                          m = cd2(k | 0, j | 0, 56) | 0;
                          G() | 0;
                          m = m & 7;
                          n = m + 1 | 0;
                          z2 = cd2(k | 0, j | 0, 45) | 0;
                          G() | 0;
                          d:
                            do {
                              if (!(la(z2 & 127) | 0)) {
                                j = 7;
                              } else {
                                k = cd2(k | 0, j | 0, 52) | 0;
                                G() | 0;
                                k = k & 15;
                                if (!k) {
                                  j = 6;
                                  break;
                                }
                                j = 1;
                                while (1) {
                                  z2 = dd(7, 0, (15 - j | 0) * 3 | 0) | 0;
                                  if (!((z2 & a2 | 0) == 0 & ((G() | 0) & d2 | 0) == 0)) {
                                    j = 7;
                                    break d;
                                  }
                                  if (j >>> 0 < k >>> 0) {
                                    j = j + 1 | 0;
                                  } else {
                                    j = 6;
                                    break;
                                  }
                                }
                              }
                            } while (0);
                          if ((m + 2 | 0) >>> 0 > j >>> 0) {
                            y2 = 51;
                            break a;
                          }
                          z2 = dd(n | 0, 0, 56) | 0;
                          d2 = G() | 0 | d2 & -117440513;
                          n = g2;
                          b[n >> 2] = 0;
                          b[n + 4 >> 2] = 0;
                          a2 = z2 | a2;
                        } else {
                          i = (i + 1 | 0) % (e3 | 0) | 0;
                        }
                        g2 = v3 + (i << 3) | 0;
                        j = g2;
                        k = b[j >> 2] | 0;
                        j = b[j + 4 >> 2] | 0;
                        if ((k | 0) == 0 & (j | 0) == 0) {
                          break;
                        } else {
                          o = o + 1 | 0;
                        }
                      }
                    }
                    z2 = g2;
                    b[z2 >> 2] = a2;
                    b[z2 + 4 >> 2] = d2;
                  }
                  f = f + 1 | 0;
                  if ((f | 0) >= (e3 | 0)) {
                    break b;
                  }
                  d2 = x2 + (f << 3) | 0;
                  a2 = b[d2 >> 2] | 0;
                  d2 = b[d2 + 4 >> 2] | 0;
                }
              }
            } while (0);
          if ((e3 + 5 | 0) >>> 0 < 11) {
            y2 = 99;
            break;
          }
          q2 = Yc((e3 | 0) / 6 | 0, 8) | 0;
          if (!q2) {
            y2 = 58;
            break;
          }
          e:
            do {
              if (s2) {
                o = 0;
                n = 0;
                do {
                  i = v3 + (o << 3) | 0;
                  a2 = i;
                  f = b[a2 >> 2] | 0;
                  a2 = b[a2 + 4 >> 2] | 0;
                  if (!((f | 0) == 0 & (a2 | 0) == 0)) {
                    j = cd2(f | 0, a2 | 0, 56) | 0;
                    G() | 0;
                    j = j & 7;
                    d2 = j + 1 | 0;
                    k = a2 & -117440513;
                    z2 = cd2(f | 0, a2 | 0, 45) | 0;
                    G() | 0;
                    f:
                      do {
                        if (la(z2 & 127) | 0) {
                          m = cd2(f | 0, a2 | 0, 52) | 0;
                          G() | 0;
                          m = m & 15;
                          if (m | 0) {
                            g2 = 1;
                            while (1) {
                              z2 = dd(7, 0, (15 - g2 | 0) * 3 | 0) | 0;
                              if (!((f & z2 | 0) == 0 & (k & (G() | 0) | 0) == 0)) {
                                break f;
                              }
                              if (g2 >>> 0 < m >>> 0) {
                                g2 = g2 + 1 | 0;
                              } else {
                                break;
                              }
                            }
                          }
                          a2 = dd(d2 | 0, 0, 56) | 0;
                          f = a2 | f;
                          a2 = G() | 0 | k;
                          d2 = i;
                          b[d2 >> 2] = f;
                          b[d2 + 4 >> 2] = a2;
                          d2 = j + 2 | 0;
                        }
                      } while (0);
                    if ((d2 | 0) == 7) {
                      z2 = q2 + (n << 3) | 0;
                      b[z2 >> 2] = f;
                      b[z2 + 4 >> 2] = a2 & -117440513;
                      n = n + 1 | 0;
                    }
                  }
                  o = o + 1 | 0;
                } while ((o | 0) != (e3 | 0));
                if (s2) {
                  p2 = ((e3 | 0) < 0) << 31 >> 31;
                  m = dd(u5 | 0, 0, 52) | 0;
                  o = G() | 0;
                  if (u5 >>> 0 > 15) {
                    a2 = 0;
                    f = 0;
                    while (1) {
                      do {
                        if (!((l | 0) == 0 & (h | 0) == 0)) {
                          j = cd2(l | 0, h | 0, 52) | 0;
                          G() | 0;
                          j = j & 15;
                          g2 = (j | 0) < (u5 | 0);
                          j = (j | 0) == (u5 | 0);
                          i = g2 ? 0 : j ? l : 0;
                          j = g2 ? 0 : j ? h : 0;
                          g2 = bd2(i | 0, j | 0, e3 | 0, p2 | 0) | 0;
                          G() | 0;
                          d2 = 0;
                          while (1) {
                            if ((d2 | 0) > (e3 | 0)) {
                              y2 = 98;
                              break a;
                            }
                            z2 = v3 + (g2 << 3) | 0;
                            k = b[z2 + 4 >> 2] | 0;
                            if ((k & -117440513 | 0) == (j | 0) ? (b[z2 >> 2] | 0) == (i | 0) : 0) {
                              y2 = 70;
                              break;
                            }
                            g2 = (g2 + 1 | 0) % (e3 | 0) | 0;
                            z2 = v3 + (g2 << 3) | 0;
                            if ((b[z2 >> 2] | 0) == (i | 0) ? (b[z2 + 4 >> 2] | 0) == (j | 0) : 0) {
                              break;
                            } else {
                              d2 = d2 + 1 | 0;
                            }
                          }
                          if ((y2 | 0) == 70 ? (y2 = 0, true & (k & 117440512 | 0) == 100663296) : 0) {
                            break;
                          }
                          z2 = c2 + (f << 3) | 0;
                          b[z2 >> 2] = l;
                          b[z2 + 4 >> 2] = h;
                          f = f + 1 | 0;
                        }
                      } while (0);
                      a2 = a2 + 1 | 0;
                      if ((a2 | 0) >= (e3 | 0)) {
                        e3 = n;
                        break e;
                      }
                      h = x2 + (a2 << 3) | 0;
                      l = b[h >> 2] | 0;
                      h = b[h + 4 >> 2] | 0;
                    }
                  }
                  a2 = 0;
                  f = 0;
                  while (1) {
                    do {
                      if (!((l | 0) == 0 & (h | 0) == 0)) {
                        j = cd2(l | 0, h | 0, 52) | 0;
                        G() | 0;
                        j = j & 15;
                        if ((j | 0) >= (u5 | 0)) {
                          if ((j | 0) != (u5 | 0)) {
                            d2 = l | m;
                            g2 = h & -15728641 | o;
                            if (j >>> 0 < t4 >>> 0) {
                              j = g2;
                            } else {
                              i = u5;
                              do {
                                z2 = dd(7, 0, (14 - i | 0) * 3 | 0) | 0;
                                i = i + 1 | 0;
                                d2 = z2 | d2;
                                g2 = G() | 0 | g2;
                              } while (i >>> 0 < j >>> 0);
                              j = g2;
                            }
                          } else {
                            d2 = l;
                            j = h;
                          }
                        } else {
                          d2 = 0;
                          j = 0;
                        }
                        i = bd2(d2 | 0, j | 0, e3 | 0, p2 | 0) | 0;
                        G() | 0;
                        g2 = 0;
                        while (1) {
                          if ((g2 | 0) > (e3 | 0)) {
                            y2 = 98;
                            break a;
                          }
                          z2 = v3 + (i << 3) | 0;
                          k = b[z2 + 4 >> 2] | 0;
                          if ((k & -117440513 | 0) == (j | 0) ? (b[z2 >> 2] | 0) == (d2 | 0) : 0) {
                            y2 = 93;
                            break;
                          }
                          i = (i + 1 | 0) % (e3 | 0) | 0;
                          z2 = v3 + (i << 3) | 0;
                          if ((b[z2 >> 2] | 0) == (d2 | 0) ? (b[z2 + 4 >> 2] | 0) == (j | 0) : 0) {
                            break;
                          } else {
                            g2 = g2 + 1 | 0;
                          }
                        }
                        if ((y2 | 0) == 93 ? (y2 = 0, true & (k & 117440512 | 0) == 100663296) : 0) {
                          break;
                        }
                        z2 = c2 + (f << 3) | 0;
                        b[z2 >> 2] = l;
                        b[z2 + 4 >> 2] = h;
                        f = f + 1 | 0;
                      }
                    } while (0);
                    a2 = a2 + 1 | 0;
                    if ((a2 | 0) >= (e3 | 0)) {
                      e3 = n;
                      break e;
                    }
                    h = x2 + (a2 << 3) | 0;
                    l = b[h >> 2] | 0;
                    h = b[h + 4 >> 2] | 0;
                  }
                } else {
                  f = 0;
                  e3 = n;
                }
              } else {
                f = 0;
                e3 = 0;
              }
            } while (0);
          hd(v3 | 0, 0, w2 | 0) | 0;
          gd(x2 | 0, q2 | 0, e3 << 3 | 0) | 0;
          Xc(q2);
          if (!e3) {
            break;
          } else {
            c2 = c2 + (f << 3) | 0;
          }
        }
      if ((y2 | 0) == 41) {
        Xc(x2);
        Xc(v3);
        z2 = -1;
        return z2 | 0;
      } else if ((y2 | 0) == 51) {
        Xc(x2);
        Xc(v3);
        z2 = -2;
        return z2 | 0;
      } else if ((y2 | 0) == 58) {
        Xc(x2);
        Xc(v3);
        z2 = -3;
        return z2 | 0;
      } else if ((y2 | 0) == 98) {
        Xc(q2);
        Xc(x2);
        Xc(v3);
        z2 = -1;
        return z2 | 0;
      } else if ((y2 | 0) == 99) {
        gd(c2 | 0, x2 | 0, e3 << 3 | 0) | 0;
      }
      Xc(x2);
      Xc(v3);
      z2 = 0;
      return z2 | 0;
    }
    function Ib(a2, c2, d2, e3, f) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      e3 = e3 | 0;
      f = f | 0;
      var g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0;
      if ((c2 | 0) <= 0) {
        f = 0;
        return f | 0;
      }
      if ((f | 0) >= 16) {
        g2 = 0;
        while (1) {
          l = a2 + (g2 << 3) | 0;
          if (!((b[l >> 2] | 0) == 0 & (b[l + 4 >> 2] | 0) == 0)) {
            g2 = 14;
            break;
          }
          g2 = g2 + 1 | 0;
          if ((g2 | 0) >= (c2 | 0)) {
            h = 0;
            g2 = 16;
            break;
          }
        }
        if ((g2 | 0) == 14) {
          return ((e3 | 0) > 0 ? -2 : -1) | 0;
        } else if ((g2 | 0) == 16) {
          return h | 0;
        }
      }
      g2 = 0;
      l = 0;
      a:
        while (1) {
          k = a2 + (l << 3) | 0;
          i = k;
          h = b[i >> 2] | 0;
          i = b[i + 4 >> 2] | 0;
          do {
            if (!((h | 0) == 0 & (i | 0) == 0)) {
              if ((g2 | 0) >= (e3 | 0)) {
                h = -1;
                g2 = 16;
                break a;
              }
              j = cd2(h | 0, i | 0, 52) | 0;
              G() | 0;
              j = j & 15;
              if ((j | 0) > (f | 0)) {
                h = -2;
                g2 = 16;
                break a;
              }
              if ((j | 0) == (f | 0)) {
                k = d2 + (g2 << 3) | 0;
                b[k >> 2] = h;
                b[k + 4 >> 2] = i;
                g2 = g2 + 1 | 0;
                break;
              }
              h = (tc(7, f - j | 0) | 0) + g2 | 0;
              if ((h | 0) > (e3 | 0)) {
                h = -1;
                g2 = 16;
                break a;
              }
              Eb(b[k >> 2] | 0, b[k + 4 >> 2] | 0, f, d2 + (g2 << 3) | 0);
              g2 = h;
            }
          } while (0);
          l = l + 1 | 0;
          if ((l | 0) >= (c2 | 0)) {
            h = 0;
            g2 = 16;
            break;
          }
        }
      if ((g2 | 0) == 16) {
        return h | 0;
      }
      return 0;
    }
    function Jb(a2, c2, d2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      var e3 = 0, f = 0, g2 = 0, h = 0;
      if ((c2 | 0) <= 0) {
        d2 = 0;
        return d2 | 0;
      }
      if ((d2 | 0) >= 16) {
        e3 = 0;
        while (1) {
          h = a2 + (e3 << 3) | 0;
          if (!((b[h >> 2] | 0) == 0 & (b[h + 4 >> 2] | 0) == 0)) {
            e3 = -1;
            f = 13;
            break;
          }
          e3 = e3 + 1 | 0;
          if ((e3 | 0) >= (c2 | 0)) {
            e3 = 0;
            f = 13;
            break;
          }
        }
        if ((f | 0) == 13) {
          return e3 | 0;
        }
      }
      e3 = 0;
      h = 0;
      a:
        while (1) {
          f = a2 + (h << 3) | 0;
          g2 = b[f >> 2] | 0;
          f = b[f + 4 >> 2] | 0;
          do {
            if (!((g2 | 0) == 0 & (f | 0) == 0)) {
              f = cd2(g2 | 0, f | 0, 52) | 0;
              G() | 0;
              f = f & 15;
              if ((f | 0) > (d2 | 0)) {
                e3 = -1;
                f = 13;
                break a;
              }
              if ((f | 0) == (d2 | 0)) {
                e3 = e3 + 1 | 0;
                break;
              } else {
                e3 = (tc(7, d2 - f | 0) | 0) + e3 | 0;
                break;
              }
            }
          } while (0);
          h = h + 1 | 0;
          if ((h | 0) >= (c2 | 0)) {
            f = 13;
            break;
          }
        }
      if ((f | 0) == 13) {
        return e3 | 0;
      }
      return 0;
    }
    function Kb(a2, b2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      b2 = cd2(a2 | 0, b2 | 0, 52) | 0;
      G() | 0;
      return b2 & 1 | 0;
    }
    function Lb(a2, b2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      var c2 = 0, d2 = 0, e3 = 0;
      e3 = cd2(a2 | 0, b2 | 0, 52) | 0;
      G() | 0;
      e3 = e3 & 15;
      if (!e3) {
        e3 = 0;
        return e3 | 0;
      }
      d2 = 1;
      while (1) {
        c2 = cd2(a2 | 0, b2 | 0, (15 - d2 | 0) * 3 | 0) | 0;
        G() | 0;
        c2 = c2 & 7;
        if (c2 | 0) {
          d2 = 5;
          break;
        }
        if (d2 >>> 0 < e3 >>> 0) {
          d2 = d2 + 1 | 0;
        } else {
          c2 = 0;
          d2 = 5;
          break;
        }
      }
      if ((d2 | 0) == 5) {
        return c2 | 0;
      }
      return 0;
    }
    function Mb(a2, b2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      var c2 = 0, d2 = 0, e3 = 0, f = 0, g2 = 0, h = 0, i = 0;
      i = cd2(a2 | 0, b2 | 0, 52) | 0;
      G() | 0;
      i = i & 15;
      if (!i) {
        h = b2;
        i = a2;
        F(h | 0);
        return i | 0;
      }
      h = 1;
      c2 = 0;
      while (1) {
        f = (15 - h | 0) * 3 | 0;
        d2 = dd(7, 0, f | 0) | 0;
        e3 = G() | 0;
        g2 = cd2(a2 | 0, b2 | 0, f | 0) | 0;
        G() | 0;
        f = dd(Pa(g2 & 7) | 0, 0, f | 0) | 0;
        g2 = G() | 0;
        a2 = f | a2 & ~d2;
        b2 = g2 | b2 & ~e3;
        a:
          do {
            if (!c2) {
              if (!((f & d2 | 0) == 0 & (g2 & e3 | 0) == 0)) {
                d2 = cd2(a2 | 0, b2 | 0, 52) | 0;
                G() | 0;
                d2 = d2 & 15;
                if (!d2) {
                  c2 = 1;
                } else {
                  c2 = 1;
                  b:
                    while (1) {
                      g2 = cd2(a2 | 0, b2 | 0, (15 - c2 | 0) * 3 | 0) | 0;
                      G() | 0;
                      switch (g2 & 7) {
                        case 1:
                          break b;
                        case 0:
                          break;
                        default: {
                          c2 = 1;
                          break a;
                        }
                      }
                      if (c2 >>> 0 < d2 >>> 0) {
                        c2 = c2 + 1 | 0;
                      } else {
                        c2 = 1;
                        break a;
                      }
                    }
                  c2 = 1;
                  while (1) {
                    g2 = (15 - c2 | 0) * 3 | 0;
                    e3 = cd2(a2 | 0, b2 | 0, g2 | 0) | 0;
                    G() | 0;
                    f = dd(7, 0, g2 | 0) | 0;
                    b2 = b2 & ~(G() | 0);
                    g2 = dd(Pa(e3 & 7) | 0, 0, g2 | 0) | 0;
                    a2 = a2 & ~f | g2;
                    b2 = b2 | (G() | 0);
                    if (c2 >>> 0 < d2 >>> 0) {
                      c2 = c2 + 1 | 0;
                    } else {
                      c2 = 1;
                      break;
                    }
                  }
                }
              } else {
                c2 = 0;
              }
            }
          } while (0);
        if (h >>> 0 < i >>> 0) {
          h = h + 1 | 0;
        } else {
          break;
        }
      }
      F(b2 | 0);
      return a2 | 0;
    }
    function Nb(a2, b2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      var c2 = 0, d2 = 0, e3 = 0, f = 0, g2 = 0;
      d2 = cd2(a2 | 0, b2 | 0, 52) | 0;
      G() | 0;
      d2 = d2 & 15;
      if (!d2) {
        c2 = b2;
        d2 = a2;
        F(c2 | 0);
        return d2 | 0;
      }
      c2 = 1;
      while (1) {
        f = (15 - c2 | 0) * 3 | 0;
        g2 = cd2(a2 | 0, b2 | 0, f | 0) | 0;
        G() | 0;
        e3 = dd(7, 0, f | 0) | 0;
        b2 = b2 & ~(G() | 0);
        f = dd(Pa(g2 & 7) | 0, 0, f | 0) | 0;
        a2 = f | a2 & ~e3;
        b2 = G() | 0 | b2;
        if (c2 >>> 0 < d2 >>> 0) {
          c2 = c2 + 1 | 0;
        } else {
          break;
        }
      }
      F(b2 | 0);
      return a2 | 0;
    }
    function Ob(a2, b2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      var c2 = 0, d2 = 0, e3 = 0, f = 0, g2 = 0, h = 0, i = 0;
      i = cd2(a2 | 0, b2 | 0, 52) | 0;
      G() | 0;
      i = i & 15;
      if (!i) {
        h = b2;
        i = a2;
        F(h | 0);
        return i | 0;
      }
      h = 1;
      c2 = 0;
      while (1) {
        f = (15 - h | 0) * 3 | 0;
        d2 = dd(7, 0, f | 0) | 0;
        e3 = G() | 0;
        g2 = cd2(a2 | 0, b2 | 0, f | 0) | 0;
        G() | 0;
        f = dd(Qa(g2 & 7) | 0, 0, f | 0) | 0;
        g2 = G() | 0;
        a2 = f | a2 & ~d2;
        b2 = g2 | b2 & ~e3;
        a:
          do {
            if (!c2) {
              if (!((f & d2 | 0) == 0 & (g2 & e3 | 0) == 0)) {
                d2 = cd2(a2 | 0, b2 | 0, 52) | 0;
                G() | 0;
                d2 = d2 & 15;
                if (!d2) {
                  c2 = 1;
                } else {
                  c2 = 1;
                  b:
                    while (1) {
                      g2 = cd2(a2 | 0, b2 | 0, (15 - c2 | 0) * 3 | 0) | 0;
                      G() | 0;
                      switch (g2 & 7) {
                        case 1:
                          break b;
                        case 0:
                          break;
                        default: {
                          c2 = 1;
                          break a;
                        }
                      }
                      if (c2 >>> 0 < d2 >>> 0) {
                        c2 = c2 + 1 | 0;
                      } else {
                        c2 = 1;
                        break a;
                      }
                    }
                  c2 = 1;
                  while (1) {
                    e3 = (15 - c2 | 0) * 3 | 0;
                    f = dd(7, 0, e3 | 0) | 0;
                    g2 = b2 & ~(G() | 0);
                    b2 = cd2(a2 | 0, b2 | 0, e3 | 0) | 0;
                    G() | 0;
                    b2 = dd(Qa(b2 & 7) | 0, 0, e3 | 0) | 0;
                    a2 = a2 & ~f | b2;
                    b2 = g2 | (G() | 0);
                    if (c2 >>> 0 < d2 >>> 0) {
                      c2 = c2 + 1 | 0;
                    } else {
                      c2 = 1;
                      break;
                    }
                  }
                }
              } else {
                c2 = 0;
              }
            }
          } while (0);
        if (h >>> 0 < i >>> 0) {
          h = h + 1 | 0;
        } else {
          break;
        }
      }
      F(b2 | 0);
      return a2 | 0;
    }
    function Pb(a2, b2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      var c2 = 0, d2 = 0, e3 = 0, f = 0, g2 = 0;
      d2 = cd2(a2 | 0, b2 | 0, 52) | 0;
      G() | 0;
      d2 = d2 & 15;
      if (!d2) {
        c2 = b2;
        d2 = a2;
        F(c2 | 0);
        return d2 | 0;
      }
      c2 = 1;
      while (1) {
        g2 = (15 - c2 | 0) * 3 | 0;
        f = dd(7, 0, g2 | 0) | 0;
        e3 = b2 & ~(G() | 0);
        b2 = cd2(a2 | 0, b2 | 0, g2 | 0) | 0;
        G() | 0;
        b2 = dd(Qa(b2 & 7) | 0, 0, g2 | 0) | 0;
        a2 = b2 | a2 & ~f;
        b2 = G() | 0 | e3;
        if (c2 >>> 0 < d2 >>> 0) {
          c2 = c2 + 1 | 0;
        } else {
          break;
        }
      }
      F(b2 | 0);
      return a2 | 0;
    }
    function Qb(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      var d2 = 0, e3 = 0, f = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0;
      j = S;
      S = S + 64 | 0;
      i = j + 40 | 0;
      e3 = j + 24 | 0;
      f = j + 12 | 0;
      g2 = j;
      dd(c2 | 0, 0, 52) | 0;
      d2 = G() | 0 | 134225919;
      if (!c2) {
        if ((b[a2 + 4 >> 2] | 0) > 2) {
          h = 0;
          i = 0;
          F(h | 0);
          S = j;
          return i | 0;
        }
        if ((b[a2 + 8 >> 2] | 0) > 2) {
          h = 0;
          i = 0;
          F(h | 0);
          S = j;
          return i | 0;
        }
        if ((b[a2 + 12 >> 2] | 0) > 2) {
          h = 0;
          i = 0;
          F(h | 0);
          S = j;
          return i | 0;
        }
        dd(na(a2) | 0, 0, 45) | 0;
        h = G() | 0 | d2;
        i = -1;
        F(h | 0);
        S = j;
        return i | 0;
      }
      b[i >> 2] = b[a2 >> 2];
      b[i + 4 >> 2] = b[a2 + 4 >> 2];
      b[i + 8 >> 2] = b[a2 + 8 >> 2];
      b[i + 12 >> 2] = b[a2 + 12 >> 2];
      h = i + 4 | 0;
      if ((c2 | 0) > 0) {
        a2 = -1;
        while (1) {
          b[e3 >> 2] = b[h >> 2];
          b[e3 + 4 >> 2] = b[h + 4 >> 2];
          b[e3 + 8 >> 2] = b[h + 8 >> 2];
          if (!(c2 & 1)) {
            Ja(h);
            b[f >> 2] = b[h >> 2];
            b[f + 4 >> 2] = b[h + 4 >> 2];
            b[f + 8 >> 2] = b[h + 8 >> 2];
            La(f);
          } else {
            Ia(h);
            b[f >> 2] = b[h >> 2];
            b[f + 4 >> 2] = b[h + 4 >> 2];
            b[f + 8 >> 2] = b[h + 8 >> 2];
            Ka(f);
          }
          Fa(e3, f, g2);
          Ca(g2);
          l = (15 - c2 | 0) * 3 | 0;
          k = dd(7, 0, l | 0) | 0;
          d2 = d2 & ~(G() | 0);
          l = dd(Ha(g2) | 0, 0, l | 0) | 0;
          a2 = l | a2 & ~k;
          d2 = G() | 0 | d2;
          if ((c2 | 0) > 1) {
            c2 = c2 + -1 | 0;
          } else {
            break;
          }
        }
      } else {
        a2 = -1;
      }
      a:
        do {
          if (((b[h >> 2] | 0) <= 2 ? (b[i + 8 >> 2] | 0) <= 2 : 0) ? (b[i + 12 >> 2] | 0) <= 2 : 0) {
            e3 = na(i) | 0;
            c2 = dd(e3 | 0, 0, 45) | 0;
            c2 = c2 | a2;
            a2 = G() | 0 | d2 & -1040385;
            g2 = oa(i) | 0;
            if (!(la(e3) | 0)) {
              if ((g2 | 0) <= 0) {
                break;
              }
              f = 0;
              while (1) {
                e3 = cd2(c2 | 0, a2 | 0, 52) | 0;
                G() | 0;
                e3 = e3 & 15;
                if (e3) {
                  d2 = 1;
                  while (1) {
                    l = (15 - d2 | 0) * 3 | 0;
                    i = cd2(c2 | 0, a2 | 0, l | 0) | 0;
                    G() | 0;
                    k = dd(7, 0, l | 0) | 0;
                    a2 = a2 & ~(G() | 0);
                    l = dd(Pa(i & 7) | 0, 0, l | 0) | 0;
                    c2 = c2 & ~k | l;
                    a2 = a2 | (G() | 0);
                    if (d2 >>> 0 < e3 >>> 0) {
                      d2 = d2 + 1 | 0;
                    } else {
                      break;
                    }
                  }
                }
                f = f + 1 | 0;
                if ((f | 0) == (g2 | 0)) {
                  break a;
                }
              }
            }
            f = cd2(c2 | 0, a2 | 0, 52) | 0;
            G() | 0;
            f = f & 15;
            b:
              do {
                if (f) {
                  d2 = 1;
                  c:
                    while (1) {
                      l = cd2(c2 | 0, a2 | 0, (15 - d2 | 0) * 3 | 0) | 0;
                      G() | 0;
                      switch (l & 7) {
                        case 1:
                          break c;
                        case 0:
                          break;
                        default:
                          break b;
                      }
                      if (d2 >>> 0 < f >>> 0) {
                        d2 = d2 + 1 | 0;
                      } else {
                        break b;
                      }
                    }
                  if (ra(e3, b[i >> 2] | 0) | 0) {
                    d2 = 1;
                    while (1) {
                      i = (15 - d2 | 0) * 3 | 0;
                      k = dd(7, 0, i | 0) | 0;
                      l = a2 & ~(G() | 0);
                      a2 = cd2(c2 | 0, a2 | 0, i | 0) | 0;
                      G() | 0;
                      a2 = dd(Qa(a2 & 7) | 0, 0, i | 0) | 0;
                      c2 = c2 & ~k | a2;
                      a2 = l | (G() | 0);
                      if (d2 >>> 0 < f >>> 0) {
                        d2 = d2 + 1 | 0;
                      } else {
                        break;
                      }
                    }
                  } else {
                    d2 = 1;
                    while (1) {
                      l = (15 - d2 | 0) * 3 | 0;
                      i = cd2(c2 | 0, a2 | 0, l | 0) | 0;
                      G() | 0;
                      k = dd(7, 0, l | 0) | 0;
                      a2 = a2 & ~(G() | 0);
                      l = dd(Pa(i & 7) | 0, 0, l | 0) | 0;
                      c2 = c2 & ~k | l;
                      a2 = a2 | (G() | 0);
                      if (d2 >>> 0 < f >>> 0) {
                        d2 = d2 + 1 | 0;
                      } else {
                        break;
                      }
                    }
                  }
                }
              } while (0);
            if ((g2 | 0) > 0) {
              d2 = 0;
              do {
                c2 = Mb(c2, a2) | 0;
                a2 = G() | 0;
                d2 = d2 + 1 | 0;
              } while ((d2 | 0) != (g2 | 0));
            }
          } else {
            c2 = 0;
            a2 = 0;
          }
        } while (0);
      k = a2;
      l = c2;
      F(k | 0);
      S = j;
      return l | 0;
    }
    function Rb(a2) {
      a2 = a2 | 0;
      return (a2 | 0) % 2 | 0 | 0;
    }
    function Sb(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      var d2 = 0, e3 = 0;
      e3 = S;
      S = S + 16 | 0;
      d2 = e3;
      if ((c2 >>> 0 <= 15 ? !((b[a2 + 4 >> 2] & 2146435072 | 0) == 2146435072) : 0) ? !((b[a2 + 8 + 4 >> 2] & 2146435072 | 0) == 2146435072) : 0) {
        Ya(a2, c2, d2);
        c2 = Qb(d2, c2) | 0;
        a2 = G() | 0;
      } else {
        a2 = 0;
        c2 = 0;
      }
      F(a2 | 0);
      S = e3;
      return c2 | 0;
    }
    function Tb(a2, c2, d2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      var e3 = 0, f = 0, g2 = 0, h = 0;
      f = d2 + 4 | 0;
      g2 = cd2(a2 | 0, c2 | 0, 52) | 0;
      G() | 0;
      g2 = g2 & 15;
      h = cd2(a2 | 0, c2 | 0, 45) | 0;
      G() | 0;
      e3 = (g2 | 0) == 0;
      if (!(la(h & 127) | 0)) {
        if (e3) {
          h = 0;
          return h | 0;
        }
        if ((b[f >> 2] | 0) == 0 ? (b[d2 + 8 >> 2] | 0) == 0 : 0) {
          e3 = (b[d2 + 12 >> 2] | 0) != 0 & 1;
        } else {
          e3 = 1;
        }
      } else if (e3) {
        h = 1;
        return h | 0;
      } else {
        e3 = 1;
      }
      d2 = 1;
      while (1) {
        if (!(d2 & 1)) {
          La(f);
        } else {
          Ka(f);
        }
        h = cd2(a2 | 0, c2 | 0, (15 - d2 | 0) * 3 | 0) | 0;
        G() | 0;
        Ma(f, h & 7);
        if (d2 >>> 0 < g2 >>> 0) {
          d2 = d2 + 1 | 0;
        } else {
          break;
        }
      }
      return e3 | 0;
    }
    function Ub(a2, c2, d2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      var e3 = 0, f = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0;
      l = S;
      S = S + 16 | 0;
      j = l;
      k = cd2(a2 | 0, c2 | 0, 45) | 0;
      G() | 0;
      k = k & 127;
      a:
        do {
          if ((la(k) | 0) != 0 ? (g2 = cd2(a2 | 0, c2 | 0, 52) | 0, G() | 0, g2 = g2 & 15, (g2 | 0) != 0) : 0) {
            e3 = 1;
            b:
              while (1) {
                i = cd2(a2 | 0, c2 | 0, (15 - e3 | 0) * 3 | 0) | 0;
                G() | 0;
                switch (i & 7) {
                  case 5:
                    break b;
                  case 0:
                    break;
                  default: {
                    e3 = c2;
                    break a;
                  }
                }
                if (e3 >>> 0 < g2 >>> 0) {
                  e3 = e3 + 1 | 0;
                } else {
                  e3 = c2;
                  break a;
                }
              }
            f = 1;
            e3 = c2;
            while (1) {
              c2 = (15 - f | 0) * 3 | 0;
              h = dd(7, 0, c2 | 0) | 0;
              i = e3 & ~(G() | 0);
              e3 = cd2(a2 | 0, e3 | 0, c2 | 0) | 0;
              G() | 0;
              e3 = dd(Qa(e3 & 7) | 0, 0, c2 | 0) | 0;
              a2 = a2 & ~h | e3;
              e3 = i | (G() | 0);
              if (f >>> 0 < g2 >>> 0) {
                f = f + 1 | 0;
              } else {
                break;
              }
            }
          } else {
            e3 = c2;
          }
        } while (0);
      i = 7728 + (k * 28 | 0) | 0;
      b[d2 >> 2] = b[i >> 2];
      b[d2 + 4 >> 2] = b[i + 4 >> 2];
      b[d2 + 8 >> 2] = b[i + 8 >> 2];
      b[d2 + 12 >> 2] = b[i + 12 >> 2];
      if (!(Tb(a2, e3, d2) | 0)) {
        S = l;
        return;
      }
      h = d2 + 4 | 0;
      b[j >> 2] = b[h >> 2];
      b[j + 4 >> 2] = b[h + 4 >> 2];
      b[j + 8 >> 2] = b[h + 8 >> 2];
      g2 = cd2(a2 | 0, e3 | 0, 52) | 0;
      G() | 0;
      i = g2 & 15;
      if (!(g2 & 1)) {
        g2 = i;
      } else {
        La(h);
        g2 = i + 1 | 0;
      }
      if (!(la(k) | 0)) {
        e3 = 0;
      } else {
        c:
          do {
            if (!i) {
              e3 = 0;
            } else {
              c2 = 1;
              while (1) {
                f = cd2(a2 | 0, e3 | 0, (15 - c2 | 0) * 3 | 0) | 0;
                G() | 0;
                f = f & 7;
                if (f | 0) {
                  e3 = f;
                  break c;
                }
                if (c2 >>> 0 < i >>> 0) {
                  c2 = c2 + 1 | 0;
                } else {
                  e3 = 0;
                  break;
                }
              }
            }
          } while (0);
        e3 = (e3 | 0) == 4 & 1;
      }
      if (!(cb(d2, g2, e3, 0) | 0)) {
        if ((g2 | 0) != (i | 0)) {
          b[h >> 2] = b[j >> 2];
          b[h + 4 >> 2] = b[j + 4 >> 2];
          b[h + 8 >> 2] = b[j + 8 >> 2];
        }
      } else {
        if (la(k) | 0) {
          do {
          } while ((cb(d2, g2, 0, 0) | 0) != 0);
        }
        if ((g2 | 0) != (i | 0)) {
          Ja(h);
        }
      }
      S = l;
      return;
    }
    function Vb(a2, b2, c2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      c2 = c2 | 0;
      var d2 = 0, e3 = 0;
      d2 = S;
      S = S + 16 | 0;
      e3 = d2;
      Ub(a2, b2, e3);
      b2 = cd2(a2 | 0, b2 | 0, 52) | 0;
      G() | 0;
      $a(e3, b2 & 15, c2);
      S = d2;
      return;
    }
    function Wb(a2, b2, c2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      c2 = c2 | 0;
      var d2 = 0, e3 = 0, f = 0, g2 = 0, h = 0;
      g2 = S;
      S = S + 16 | 0;
      f = g2;
      Ub(a2, b2, f);
      d2 = cd2(a2 | 0, b2 | 0, 45) | 0;
      G() | 0;
      d2 = (la(d2 & 127) | 0) == 0;
      e3 = cd2(a2 | 0, b2 | 0, 52) | 0;
      G() | 0;
      e3 = e3 & 15;
      a:
        do {
          if (!d2) {
            if (e3 | 0) {
              d2 = 1;
              while (1) {
                h = dd(7, 0, (15 - d2 | 0) * 3 | 0) | 0;
                if (!((h & a2 | 0) == 0 & ((G() | 0) & b2 | 0) == 0)) {
                  break a;
                }
                if (d2 >>> 0 < e3 >>> 0) {
                  d2 = d2 + 1 | 0;
                } else {
                  break;
                }
              }
            }
            ab4(f, e3, 0, 5, c2);
            S = g2;
            return;
          }
        } while (0);
      eb2(f, e3, 0, 6, c2);
      S = g2;
      return;
    }
    function Xb(a2, b2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      var c2 = 0, d2 = 0, e3 = 0;
      d2 = cd2(a2 | 0, b2 | 0, 45) | 0;
      G() | 0;
      if (!(la(d2 & 127) | 0)) {
        d2 = 2;
        return d2 | 0;
      }
      d2 = cd2(a2 | 0, b2 | 0, 52) | 0;
      G() | 0;
      d2 = d2 & 15;
      if (!d2) {
        d2 = 5;
        return d2 | 0;
      }
      c2 = 1;
      while (1) {
        e3 = dd(7, 0, (15 - c2 | 0) * 3 | 0) | 0;
        if (!((e3 & a2 | 0) == 0 & ((G() | 0) & b2 | 0) == 0)) {
          c2 = 2;
          a2 = 6;
          break;
        }
        if (c2 >>> 0 < d2 >>> 0) {
          c2 = c2 + 1 | 0;
        } else {
          c2 = 5;
          a2 = 6;
          break;
        }
      }
      if ((a2 | 0) == 6) {
        return c2 | 0;
      }
      return 0;
    }
    function Yb(a2, c2, d2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      var e3 = 0, f = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0;
      m = S;
      S = S + 128 | 0;
      k = m + 112 | 0;
      g2 = m + 96 | 0;
      l = m;
      f = cd2(a2 | 0, c2 | 0, 52) | 0;
      G() | 0;
      i = f & 15;
      b[k >> 2] = i;
      h = cd2(a2 | 0, c2 | 0, 45) | 0;
      G() | 0;
      h = h & 127;
      a:
        do {
          if (la(h) | 0) {
            if (i | 0) {
              e3 = 1;
              while (1) {
                j = dd(7, 0, (15 - e3 | 0) * 3 | 0) | 0;
                if (!((j & a2 | 0) == 0 & ((G() | 0) & c2 | 0) == 0)) {
                  f = 0;
                  break a;
                }
                if (e3 >>> 0 < i >>> 0) {
                  e3 = e3 + 1 | 0;
                } else {
                  break;
                }
              }
            }
            if (!(f & 1)) {
              j = dd(i + 1 | 0, 0, 52) | 0;
              l = G() | 0 | c2 & -15728641;
              k = dd(7, 0, (14 - i | 0) * 3 | 0) | 0;
              Yb((j | a2) & ~k, l & ~(G() | 0), d2);
              S = m;
              return;
            } else {
              f = 1;
            }
          } else {
            f = 0;
          }
        } while (0);
      Ub(a2, c2, g2);
      if (f) {
        bb2(g2, k, l);
        j = 5;
      } else {
        fb(g2, k, l);
        j = 6;
      }
      b:
        do {
          if (la(h) | 0) {
            if (!i) {
              e3 = 20;
            } else {
              e3 = 1;
              while (1) {
                h = dd(7, 0, (15 - e3 | 0) * 3 | 0) | 0;
                if (!((h & a2 | 0) == 0 & ((G() | 0) & c2 | 0) == 0)) {
                  e3 = 8;
                  break b;
                }
                if (e3 >>> 0 < i >>> 0) {
                  e3 = e3 + 1 | 0;
                } else {
                  e3 = 20;
                  break;
                }
              }
            }
          } else {
            e3 = 8;
          }
        } while (0);
      hd(d2 | 0, -1, e3 | 0) | 0;
      if (f) {
        f = 0;
        do {
          g2 = l + (f << 4) | 0;
          db(g2, b[k >> 2] | 0) | 0;
          g2 = b[g2 >> 2] | 0;
          e3 = 0;
          while (1) {
            h = d2 + (e3 << 2) | 0;
            i = b[h >> 2] | 0;
            if ((i | 0) == -1 | (i | 0) == (g2 | 0)) {
              break;
            } else {
              e3 = e3 + 1 | 0;
            }
          }
          b[h >> 2] = g2;
          f = f + 1 | 0;
        } while ((f | 0) != (j | 0));
      } else {
        f = 0;
        do {
          g2 = l + (f << 4) | 0;
          cb(g2, b[k >> 2] | 0, 0, 1) | 0;
          g2 = b[g2 >> 2] | 0;
          e3 = 0;
          while (1) {
            h = d2 + (e3 << 2) | 0;
            i = b[h >> 2] | 0;
            if ((i | 0) == -1 | (i | 0) == (g2 | 0)) {
              break;
            } else {
              e3 = e3 + 1 | 0;
            }
          }
          b[h >> 2] = g2;
          f = f + 1 | 0;
        } while ((f | 0) != (j | 0));
      }
      S = m;
      return;
    }
    function Zb() {
      return 12;
    }
    function _b(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      var d2 = 0, e3 = 0, f = 0, g2 = 0, h = 0, i = 0, j = 0;
      dd(a2 | 0, 0, 52) | 0;
      i = G() | 0 | 134225919;
      if ((a2 | 0) < 1) {
        e3 = 0;
        d2 = 0;
        do {
          if (la(e3) | 0) {
            dd(e3 | 0, 0, 45) | 0;
            h = i | (G() | 0);
            a2 = c2 + (d2 << 3) | 0;
            b[a2 >> 2] = -1;
            b[a2 + 4 >> 2] = h;
            d2 = d2 + 1 | 0;
          }
          e3 = e3 + 1 | 0;
        } while ((e3 | 0) != 122);
        return;
      }
      h = 0;
      d2 = 0;
      do {
        if (la(h) | 0) {
          dd(h | 0, 0, 45) | 0;
          e3 = 1;
          f = -1;
          g2 = i | (G() | 0);
          while (1) {
            j = dd(7, 0, (15 - e3 | 0) * 3 | 0) | 0;
            f = f & ~j;
            g2 = g2 & ~(G() | 0);
            if ((e3 | 0) == (a2 | 0)) {
              break;
            } else {
              e3 = e3 + 1 | 0;
            }
          }
          j = c2 + (d2 << 3) | 0;
          b[j >> 2] = f;
          b[j + 4 >> 2] = g2;
          d2 = d2 + 1 | 0;
        }
        h = h + 1 | 0;
      } while ((h | 0) != 122);
      return;
    }
    function $b(a2, c2, d2, e3) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      e3 = e3 | 0;
      var f = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0;
      i = S;
      S = S + 64 | 0;
      h = i;
      if ((a2 | 0) == (d2 | 0) & (c2 | 0) == (e3 | 0) | (false | (c2 & 2013265920 | 0) != 134217728 | (false | (e3 & 2013265920 | 0) != 134217728))) {
        h = 0;
        S = i;
        return h | 0;
      }
      f = cd2(a2 | 0, c2 | 0, 52) | 0;
      G() | 0;
      f = f & 15;
      g2 = cd2(d2 | 0, e3 | 0, 52) | 0;
      G() | 0;
      if ((f | 0) != (g2 & 15 | 0)) {
        h = 0;
        S = i;
        return h | 0;
      }
      g2 = f + -1 | 0;
      if (f >>> 0 > 1 ? (k = Cb(a2, c2, g2) | 0, j = G() | 0, g2 = Cb(d2, e3, g2) | 0, (k | 0) == (g2 | 0) & (j | 0) == (G() | 0)) : 0) {
        g2 = (f ^ 15) * 3 | 0;
        f = cd2(a2 | 0, c2 | 0, g2 | 0) | 0;
        G() | 0;
        f = f & 7;
        g2 = cd2(d2 | 0, e3 | 0, g2 | 0) | 0;
        G() | 0;
        g2 = g2 & 7;
        if ((f | 0) == 0 | (g2 | 0) == 0) {
          k = 1;
          S = i;
          return k | 0;
        }
        if ((b[21136 + (f << 2) >> 2] | 0) == (g2 | 0)) {
          k = 1;
          S = i;
          return k | 0;
        }
        if ((b[21168 + (f << 2) >> 2] | 0) == (g2 | 0)) {
          k = 1;
          S = i;
          return k | 0;
        }
      }
      f = h;
      g2 = f + 56 | 0;
      do {
        b[f >> 2] = 0;
        f = f + 4 | 0;
      } while ((f | 0) < (g2 | 0));
      $(a2, c2, 1, h);
      k = h;
      if (((((!((b[k >> 2] | 0) == (d2 | 0) ? (b[k + 4 >> 2] | 0) == (e3 | 0) : 0) ? (k = h + 8 | 0, !((b[k >> 2] | 0) == (d2 | 0) ? (b[k + 4 >> 2] | 0) == (e3 | 0) : 0)) : 0) ? (k = h + 16 | 0, !((b[k >> 2] | 0) == (d2 | 0) ? (b[k + 4 >> 2] | 0) == (e3 | 0) : 0)) : 0) ? (k = h + 24 | 0, !((b[k >> 2] | 0) == (d2 | 0) ? (b[k + 4 >> 2] | 0) == (e3 | 0) : 0)) : 0) ? (k = h + 32 | 0, !((b[k >> 2] | 0) == (d2 | 0) ? (b[k + 4 >> 2] | 0) == (e3 | 0) : 0)) : 0) ? (k = h + 40 | 0, !((b[k >> 2] | 0) == (d2 | 0) ? (b[k + 4 >> 2] | 0) == (e3 | 0) : 0)) : 0) {
        f = h + 48 | 0;
        f = ((b[f >> 2] | 0) == (d2 | 0) ? (b[f + 4 >> 2] | 0) == (e3 | 0) : 0) & 1;
      } else {
        f = 1;
      }
      k = f;
      S = i;
      return k | 0;
    }
    function ac2(a2, c2, d2, e3) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      e3 = e3 | 0;
      var f = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0;
      k = S;
      S = S + 16 | 0;
      h = k;
      if (!($b(a2, c2, d2, e3) | 0)) {
        i = 0;
        j = 0;
        F(i | 0);
        S = k;
        return j | 0;
      }
      i = c2 & -2130706433;
      f = (Fb(a2, c2) | 0) == 0;
      f = f ? 1 : 2;
      while (1) {
        b[h >> 2] = 0;
        l = da2(a2, c2, f, h) | 0;
        g2 = f + 1 | 0;
        if ((l | 0) == (d2 | 0) & (G() | 0) == (e3 | 0)) {
          break;
        }
        if (g2 >>> 0 < 7) {
          f = g2;
        } else {
          f = 0;
          a2 = 0;
          j = 6;
          break;
        }
      }
      if ((j | 0) == 6) {
        F(f | 0);
        S = k;
        return a2 | 0;
      }
      l = dd(f | 0, 0, 56) | 0;
      j = i | (G() | 0) | 268435456;
      l = a2 | l;
      F(j | 0);
      S = k;
      return l | 0;
    }
    function bc4(a2, b2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      var c2 = 0;
      c2 = true & (b2 & 2013265920 | 0) == 268435456;
      F((c2 ? b2 & -2130706433 | 134217728 : 0) | 0);
      return (c2 ? a2 : 0) | 0;
    }
    function cc2(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      var d2 = 0, e3 = 0, f = 0;
      e3 = S;
      S = S + 16 | 0;
      d2 = e3;
      if (!(true & (c2 & 2013265920 | 0) == 268435456)) {
        c2 = 0;
        d2 = 0;
        F(c2 | 0);
        S = e3;
        return d2 | 0;
      }
      f = cd2(a2 | 0, c2 | 0, 56) | 0;
      G() | 0;
      b[d2 >> 2] = 0;
      d2 = da2(a2, c2 & -2130706433 | 134217728, f & 7, d2) | 0;
      c2 = G() | 0;
      F(c2 | 0);
      S = e3;
      return d2 | 0;
    }
    function dc(a2, b2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      var c2 = 0;
      if (!(true & (b2 & 2013265920 | 0) == 268435456)) {
        c2 = 0;
        return c2 | 0;
      }
      c2 = cd2(a2 | 0, b2 | 0, 56) | 0;
      G() | 0;
      switch (c2 & 7) {
        case 0:
        case 7: {
          c2 = 0;
          return c2 | 0;
        }
        default:
      }
      c2 = b2 & -2130706433 | 134217728;
      if (true & (b2 & 117440512 | 0) == 16777216 & (Fb(a2, c2) | 0) != 0) {
        c2 = 0;
        return c2 | 0;
      }
      c2 = Bb(a2, c2) | 0;
      return c2 | 0;
    }
    function ec(a2, c2, d2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      var e3 = 0, f = 0, g2 = 0, h = 0, i = 0;
      g2 = S;
      S = S + 16 | 0;
      e3 = g2;
      h = true & (c2 & 2013265920 | 0) == 268435456;
      f = c2 & -2130706433 | 134217728;
      i = d2;
      b[i >> 2] = h ? a2 : 0;
      b[i + 4 >> 2] = h ? f : 0;
      if (h) {
        c2 = cd2(a2 | 0, c2 | 0, 56) | 0;
        G() | 0;
        b[e3 >> 2] = 0;
        a2 = da2(a2, f, c2 & 7, e3) | 0;
        c2 = G() | 0;
      } else {
        a2 = 0;
        c2 = 0;
      }
      i = d2 + 8 | 0;
      b[i >> 2] = a2;
      b[i + 4 >> 2] = c2;
      S = g2;
      return;
    }
    function fc(a2, c2, d2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      var e3 = 0, f = 0;
      f = (Fb(a2, c2) | 0) == 0;
      c2 = c2 & -2130706433;
      e3 = d2;
      b[e3 >> 2] = f ? a2 : 0;
      b[e3 + 4 >> 2] = f ? c2 | 285212672 : 0;
      e3 = d2 + 8 | 0;
      b[e3 >> 2] = a2;
      b[e3 + 4 >> 2] = c2 | 301989888;
      e3 = d2 + 16 | 0;
      b[e3 >> 2] = a2;
      b[e3 + 4 >> 2] = c2 | 318767104;
      e3 = d2 + 24 | 0;
      b[e3 >> 2] = a2;
      b[e3 + 4 >> 2] = c2 | 335544320;
      e3 = d2 + 32 | 0;
      b[e3 >> 2] = a2;
      b[e3 + 4 >> 2] = c2 | 352321536;
      d2 = d2 + 40 | 0;
      b[d2 >> 2] = a2;
      b[d2 + 4 >> 2] = c2 | 369098752;
      return;
    }
    function gc(a2, c2, d2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      var e3 = 0, f = 0, g2 = 0, h = 0, i = 0;
      h = S;
      S = S + 16 | 0;
      g2 = h;
      e3 = cd2(a2 | 0, c2 | 0, 56) | 0;
      G() | 0;
      i = true & (c2 & 2013265920 | 0) == 268435456;
      f = i ? a2 : 0;
      a2 = i ? c2 & -2130706433 | 134217728 : 0;
      c2 = Lc(f, a2, e3 & 7) | 0;
      if ((c2 | 0) == -1) {
        b[d2 >> 2] = 0;
        S = h;
        return;
      }
      Ub(f, a2, g2);
      e3 = cd2(f | 0, a2 | 0, 52) | 0;
      G() | 0;
      e3 = e3 & 15;
      if (!(Fb(f, a2) | 0)) {
        eb2(g2, e3, c2, 2, d2);
      } else {
        ab4(g2, e3, c2, 2, d2);
      }
      S = h;
      return;
    }
    function hc(a2) {
      a2 = a2 | 0;
      var c2 = 0, d2 = 0, e3 = 0;
      c2 = Yc(1, 12) | 0;
      if (!c2) {
        H(22691, 22646, 49, 22704);
      }
      d2 = a2 + 4 | 0;
      e3 = b[d2 >> 2] | 0;
      if (e3 | 0) {
        e3 = e3 + 8 | 0;
        b[e3 >> 2] = c2;
        b[d2 >> 2] = c2;
        return c2 | 0;
      }
      if (b[a2 >> 2] | 0) {
        H(22721, 22646, 61, 22744);
      }
      e3 = a2;
      b[e3 >> 2] = c2;
      b[d2 >> 2] = c2;
      return c2 | 0;
    }
    function ic(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      var d2 = 0, e3 = 0;
      e3 = Wc(24) | 0;
      if (!e3) {
        H(22758, 22646, 78, 22772);
      }
      b[e3 >> 2] = b[c2 >> 2];
      b[e3 + 4 >> 2] = b[c2 + 4 >> 2];
      b[e3 + 8 >> 2] = b[c2 + 8 >> 2];
      b[e3 + 12 >> 2] = b[c2 + 12 >> 2];
      b[e3 + 16 >> 2] = 0;
      c2 = a2 + 4 | 0;
      d2 = b[c2 >> 2] | 0;
      if (d2 | 0) {
        b[d2 + 16 >> 2] = e3;
        b[c2 >> 2] = e3;
        return e3 | 0;
      }
      if (b[a2 >> 2] | 0) {
        H(22787, 22646, 82, 22772);
      }
      b[a2 >> 2] = e3;
      b[c2 >> 2] = e3;
      return e3 | 0;
    }
    function jc(a2) {
      a2 = a2 | 0;
      var c2 = 0, d2 = 0, e3 = 0, f = 0;
      if (!a2) {
        return;
      }
      e3 = 1;
      while (1) {
        c2 = b[a2 >> 2] | 0;
        if (c2 | 0) {
          do {
            d2 = b[c2 >> 2] | 0;
            if (d2 | 0) {
              do {
                f = d2;
                d2 = b[d2 + 16 >> 2] | 0;
                Xc(f);
              } while ((d2 | 0) != 0);
            }
            f = c2;
            c2 = b[c2 + 8 >> 2] | 0;
            Xc(f);
          } while ((c2 | 0) != 0);
        }
        c2 = a2;
        a2 = b[a2 + 8 >> 2] | 0;
        if (!e3) {
          Xc(c2);
        }
        if (!a2) {
          break;
        } else {
          e3 = 0;
        }
      }
      return;
    }
    function kc(a2) {
      a2 = a2 | 0;
      var c2 = 0, d2 = 0, f = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, r2 = 0, s2 = 0, t4 = 0, u5 = 0, v3 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0, A7 = 0, B5 = 0, C5 = 0, D5 = 0, E3 = 0, F2 = 0, G2 = 0, I2 = 0, J2 = 0, K4 = 0;
      g2 = a2 + 8 | 0;
      if (b[g2 >> 2] | 0) {
        K4 = 1;
        return K4 | 0;
      }
      f = b[a2 >> 2] | 0;
      if (!f) {
        K4 = 0;
        return K4 | 0;
      }
      c2 = f;
      d2 = 0;
      do {
        d2 = d2 + 1 | 0;
        c2 = b[c2 + 8 >> 2] | 0;
      } while ((c2 | 0) != 0);
      if (d2 >>> 0 < 2) {
        K4 = 0;
        return K4 | 0;
      }
      I2 = Wc(d2 << 2) | 0;
      if (!I2) {
        H(22807, 22646, 317, 22826);
      }
      G2 = Wc(d2 << 5) | 0;
      if (!G2) {
        H(22848, 22646, 321, 22826);
      }
      b[a2 >> 2] = 0;
      z2 = a2 + 4 | 0;
      b[z2 >> 2] = 0;
      b[g2 >> 2] = 0;
      d2 = 0;
      F2 = 0;
      y2 = 0;
      n = 0;
      a:
        while (1) {
          m = b[f >> 2] | 0;
          if (m) {
            h = 0;
            i = m;
            do {
              k = +e[i + 8 >> 3];
              c2 = i;
              i = b[i + 16 >> 2] | 0;
              l = (i | 0) == 0;
              g2 = l ? m : i;
              j = +e[g2 + 8 >> 3];
              if (+q(+(k - j)) > 3.141592653589793) {
                K4 = 14;
                break;
              }
              h = h + (j - k) * (+e[c2 >> 3] + +e[g2 >> 3]);
            } while (!l);
            if ((K4 | 0) == 14) {
              K4 = 0;
              h = 0;
              c2 = m;
              do {
                x2 = +e[c2 + 8 >> 3];
                E3 = c2 + 16 | 0;
                D5 = b[E3 >> 2] | 0;
                D5 = (D5 | 0) == 0 ? m : D5;
                w2 = +e[D5 + 8 >> 3];
                h = h + (+e[c2 >> 3] + +e[D5 >> 3]) * ((w2 < 0 ? w2 + 6.283185307179586 : w2) - (x2 < 0 ? x2 + 6.283185307179586 : x2));
                c2 = b[((c2 | 0) == 0 ? f : E3) >> 2] | 0;
              } while ((c2 | 0) != 0);
            }
            if (h > 0) {
              b[I2 + (F2 << 2) >> 2] = f;
              F2 = F2 + 1 | 0;
              g2 = y2;
              c2 = n;
            } else {
              K4 = 19;
            }
          } else {
            K4 = 19;
          }
          if ((K4 | 0) == 19) {
            K4 = 0;
            do {
              if (!d2) {
                if (!n) {
                  if (!(b[a2 >> 2] | 0)) {
                    g2 = z2;
                    i = a2;
                    c2 = f;
                    d2 = a2;
                    break;
                  } else {
                    K4 = 27;
                    break a;
                  }
                } else {
                  g2 = z2;
                  i = n + 8 | 0;
                  c2 = f;
                  d2 = a2;
                  break;
                }
              } else {
                c2 = d2 + 8 | 0;
                if (b[c2 >> 2] | 0) {
                  K4 = 21;
                  break a;
                }
                d2 = Yc(1, 12) | 0;
                if (!d2) {
                  K4 = 23;
                  break a;
                }
                b[c2 >> 2] = d2;
                g2 = d2 + 4 | 0;
                i = d2;
                c2 = n;
              }
            } while (0);
            b[i >> 2] = f;
            b[g2 >> 2] = f;
            i = G2 + (y2 << 5) | 0;
            l = b[f >> 2] | 0;
            if (l) {
              m = G2 + (y2 << 5) + 8 | 0;
              e[m >> 3] = 17976931348623157e292;
              n = G2 + (y2 << 5) + 24 | 0;
              e[n >> 3] = 17976931348623157e292;
              e[i >> 3] = -17976931348623157e292;
              o = G2 + (y2 << 5) + 16 | 0;
              e[o >> 3] = -17976931348623157e292;
              u5 = 17976931348623157e292;
              v3 = -17976931348623157e292;
              g2 = 0;
              p2 = l;
              k = 17976931348623157e292;
              s2 = 17976931348623157e292;
              t4 = -17976931348623157e292;
              j = -17976931348623157e292;
              while (1) {
                h = +e[p2 >> 3];
                x2 = +e[p2 + 8 >> 3];
                p2 = b[p2 + 16 >> 2] | 0;
                r2 = (p2 | 0) == 0;
                w2 = +e[(r2 ? l : p2) + 8 >> 3];
                if (h < k) {
                  e[m >> 3] = h;
                  k = h;
                }
                if (x2 < s2) {
                  e[n >> 3] = x2;
                  s2 = x2;
                }
                if (h > t4) {
                  e[i >> 3] = h;
                } else {
                  h = t4;
                }
                if (x2 > j) {
                  e[o >> 3] = x2;
                  j = x2;
                }
                u5 = x2 > 0 & x2 < u5 ? x2 : u5;
                v3 = x2 < 0 & x2 > v3 ? x2 : v3;
                g2 = g2 | +q(+(x2 - w2)) > 3.141592653589793;
                if (r2) {
                  break;
                } else {
                  t4 = h;
                }
              }
              if (g2) {
                e[o >> 3] = v3;
                e[n >> 3] = u5;
              }
            } else {
              b[i >> 2] = 0;
              b[i + 4 >> 2] = 0;
              b[i + 8 >> 2] = 0;
              b[i + 12 >> 2] = 0;
              b[i + 16 >> 2] = 0;
              b[i + 20 >> 2] = 0;
              b[i + 24 >> 2] = 0;
              b[i + 28 >> 2] = 0;
            }
            g2 = y2 + 1 | 0;
          }
          E3 = f + 8 | 0;
          f = b[E3 >> 2] | 0;
          b[E3 >> 2] = 0;
          if (!f) {
            K4 = 45;
            break;
          } else {
            y2 = g2;
            n = c2;
          }
        }
      if ((K4 | 0) == 21) {
        H(22624, 22646, 35, 22658);
      } else if ((K4 | 0) == 23) {
        H(22678, 22646, 37, 22658);
      } else if ((K4 | 0) == 27) {
        H(22721, 22646, 61, 22744);
      } else if ((K4 | 0) == 45) {
        b:
          do {
            if ((F2 | 0) > 0) {
              E3 = (g2 | 0) == 0;
              C5 = g2 << 2;
              D5 = (a2 | 0) == 0;
              B5 = 0;
              c2 = 0;
              while (1) {
                A7 = b[I2 + (B5 << 2) >> 2] | 0;
                if (!E3) {
                  y2 = Wc(C5) | 0;
                  if (!y2) {
                    K4 = 50;
                    break;
                  }
                  z2 = Wc(C5) | 0;
                  if (!z2) {
                    K4 = 52;
                    break;
                  }
                  c:
                    do {
                      if (!D5) {
                        g2 = 0;
                        d2 = 0;
                        i = a2;
                        while (1) {
                          f = G2 + (g2 << 5) | 0;
                          if (lc(b[i >> 2] | 0, f, b[A7 >> 2] | 0) | 0) {
                            b[y2 + (d2 << 2) >> 2] = i;
                            b[z2 + (d2 << 2) >> 2] = f;
                            r2 = d2 + 1 | 0;
                          } else {
                            r2 = d2;
                          }
                          i = b[i + 8 >> 2] | 0;
                          if (!i) {
                            break;
                          } else {
                            g2 = g2 + 1 | 0;
                            d2 = r2;
                          }
                        }
                        if ((r2 | 0) > 0) {
                          f = b[y2 >> 2] | 0;
                          if ((r2 | 0) == 1) {
                            d2 = f;
                          } else {
                            o = 0;
                            p2 = -1;
                            d2 = f;
                            n = f;
                            while (1) {
                              l = b[n >> 2] | 0;
                              f = 0;
                              i = 0;
                              while (1) {
                                g2 = b[b[y2 + (i << 2) >> 2] >> 2] | 0;
                                if ((g2 | 0) == (l | 0)) {
                                  m = f;
                                } else {
                                  m = f + ((lc(g2, b[z2 + (i << 2) >> 2] | 0, b[l >> 2] | 0) | 0) & 1) | 0;
                                }
                                i = i + 1 | 0;
                                if ((i | 0) == (r2 | 0)) {
                                  break;
                                } else {
                                  f = m;
                                }
                              }
                              g2 = (m | 0) > (p2 | 0);
                              d2 = g2 ? n : d2;
                              f = o + 1 | 0;
                              if ((f | 0) == (r2 | 0)) {
                                break c;
                              }
                              o = f;
                              p2 = g2 ? m : p2;
                              n = b[y2 + (f << 2) >> 2] | 0;
                            }
                          }
                        } else {
                          d2 = 0;
                        }
                      } else {
                        d2 = 0;
                      }
                    } while (0);
                  Xc(y2);
                  Xc(z2);
                  if (d2) {
                    g2 = d2 + 4 | 0;
                    f = b[g2 >> 2] | 0;
                    if (!f) {
                      if (b[d2 >> 2] | 0) {
                        K4 = 70;
                        break;
                      }
                    } else {
                      d2 = f + 8 | 0;
                    }
                    b[d2 >> 2] = A7;
                    b[g2 >> 2] = A7;
                  } else {
                    K4 = 73;
                  }
                } else {
                  K4 = 73;
                }
                if ((K4 | 0) == 73) {
                  K4 = 0;
                  c2 = b[A7 >> 2] | 0;
                  if (c2 | 0) {
                    do {
                      z2 = c2;
                      c2 = b[c2 + 16 >> 2] | 0;
                      Xc(z2);
                    } while ((c2 | 0) != 0);
                  }
                  Xc(A7);
                  c2 = 2;
                }
                B5 = B5 + 1 | 0;
                if ((B5 | 0) >= (F2 | 0)) {
                  J2 = c2;
                  break b;
                }
              }
              if ((K4 | 0) == 50) {
                H(22863, 22646, 249, 22882);
              } else if ((K4 | 0) == 52) {
                H(22901, 22646, 252, 22882);
              } else if ((K4 | 0) == 70) {
                H(22721, 22646, 61, 22744);
              }
            } else {
              J2 = 0;
            }
          } while (0);
        Xc(I2);
        Xc(G2);
        K4 = J2;
        return K4 | 0;
      }
      return 0;
    }
    function lc(a2, c2, d2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      var f = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0;
      if (!(xa(c2, d2) | 0)) {
        a2 = 0;
        return a2 | 0;
      }
      c2 = wa(c2) | 0;
      l = +e[d2 >> 3];
      f = +e[d2 + 8 >> 3];
      f = c2 & f < 0 ? f + 6.283185307179586 : f;
      a2 = b[a2 >> 2] | 0;
      if (!a2) {
        a2 = 0;
        return a2 | 0;
      }
      if (c2) {
        c2 = 0;
        d2 = a2;
        a:
          while (1) {
            while (1) {
              i = +e[d2 >> 3];
              k = +e[d2 + 8 >> 3];
              d2 = d2 + 16 | 0;
              m = b[d2 >> 2] | 0;
              m = (m | 0) == 0 ? a2 : m;
              h = +e[m >> 3];
              g2 = +e[m + 8 >> 3];
              if (i > h) {
                j = i;
                i = k;
              } else {
                j = h;
                h = i;
                i = g2;
                g2 = k;
              }
              if (!(l < h | l > j)) {
                break;
              }
              d2 = b[d2 >> 2] | 0;
              if (!d2) {
                d2 = 22;
                break a;
              }
            }
            k = g2 < 0 ? g2 + 6.283185307179586 : g2;
            i = i < 0 ? i + 6.283185307179586 : i;
            f = i == f | k == f ? f + -2220446049250313e-31 : f;
            k = k + (l - h) / (j - h) * (i - k);
            if ((k < 0 ? k + 6.283185307179586 : k) > f) {
              c2 = c2 ^ 1;
            }
            d2 = b[d2 >> 2] | 0;
            if (!d2) {
              d2 = 22;
              break;
            }
          }
        if ((d2 | 0) == 22) {
          return c2 | 0;
        }
      } else {
        c2 = 0;
        d2 = a2;
        b:
          while (1) {
            while (1) {
              i = +e[d2 >> 3];
              k = +e[d2 + 8 >> 3];
              d2 = d2 + 16 | 0;
              m = b[d2 >> 2] | 0;
              m = (m | 0) == 0 ? a2 : m;
              h = +e[m >> 3];
              g2 = +e[m + 8 >> 3];
              if (i > h) {
                j = i;
                i = k;
              } else {
                j = h;
                h = i;
                i = g2;
                g2 = k;
              }
              if (!(l < h | l > j)) {
                break;
              }
              d2 = b[d2 >> 2] | 0;
              if (!d2) {
                d2 = 22;
                break b;
              }
            }
            f = i == f | g2 == f ? f + -2220446049250313e-31 : f;
            if (g2 + (l - h) / (j - h) * (i - g2) > f) {
              c2 = c2 ^ 1;
            }
            d2 = b[d2 >> 2] | 0;
            if (!d2) {
              d2 = 22;
              break;
            }
          }
        if ((d2 | 0) == 22) {
          return c2 | 0;
        }
      }
      return 0;
    }
    function mc(c2, d2, e3, f, g2) {
      c2 = c2 | 0;
      d2 = d2 | 0;
      e3 = e3 | 0;
      f = f | 0;
      g2 = g2 | 0;
      var h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t4 = 0, u5 = 0;
      u5 = S;
      S = S + 32 | 0;
      t4 = u5 + 16 | 0;
      s2 = u5;
      h = cd2(c2 | 0, d2 | 0, 52) | 0;
      G() | 0;
      h = h & 15;
      p2 = cd2(e3 | 0, f | 0, 52) | 0;
      G() | 0;
      if ((h | 0) != (p2 & 15 | 0)) {
        t4 = 1;
        S = u5;
        return t4 | 0;
      }
      l = cd2(c2 | 0, d2 | 0, 45) | 0;
      G() | 0;
      l = l & 127;
      m = cd2(e3 | 0, f | 0, 45) | 0;
      G() | 0;
      m = m & 127;
      p2 = (l | 0) != (m | 0);
      if (p2) {
        j = ta(l, m) | 0;
        if ((j | 0) == 7) {
          t4 = 2;
          S = u5;
          return t4 | 0;
        }
        k = ta(m, l) | 0;
        if ((k | 0) == 7) {
          H(22925, 22949, 151, 22959);
        } else {
          q2 = j;
          i = k;
        }
      } else {
        q2 = 0;
        i = 0;
      }
      n = la(l) | 0;
      o = la(m) | 0;
      b[t4 >> 2] = 0;
      b[t4 + 4 >> 2] = 0;
      b[t4 + 8 >> 2] = 0;
      b[t4 + 12 >> 2] = 0;
      do {
        if (!q2) {
          Tb(e3, f, t4) | 0;
          if ((n | 0) != 0 & (o | 0) != 0) {
            if ((m | 0) != (l | 0)) {
              H(23077, 22949, 243, 22959);
            }
            i = Lb(c2, d2) | 0;
            h = Lb(e3, f) | 0;
            if (!(a[22032 + (i * 7 | 0) + h >> 0] | 0)) {
              i = b[21200 + (i * 28 | 0) + (h << 2) >> 2] | 0;
              if ((i | 0) > 0) {
                j = t4 + 4 | 0;
                h = 0;
                do {
                  Oa(j);
                  h = h + 1 | 0;
                } while ((h | 0) != (i | 0));
                r2 = 50;
              } else {
                r2 = 50;
              }
            } else {
              h = 5;
            }
          } else {
            r2 = 50;
          }
        } else {
          m = b[4304 + (l * 28 | 0) + (q2 << 2) >> 2] | 0;
          j = (m | 0) > 0;
          if (!o) {
            if (j) {
              l = 0;
              k = e3;
              j = f;
              do {
                k = Pb(k, j) | 0;
                j = G() | 0;
                i = Qa(i) | 0;
                l = l + 1 | 0;
              } while ((l | 0) != (m | 0));
              m = i;
              l = k;
              k = j;
            } else {
              m = i;
              l = e3;
              k = f;
            }
          } else if (j) {
            l = 0;
            k = e3;
            j = f;
            do {
              k = Ob(k, j) | 0;
              j = G() | 0;
              i = Qa(i) | 0;
              if ((i | 0) == 1) {
                i = Qa(1) | 0;
              }
              l = l + 1 | 0;
            } while ((l | 0) != (m | 0));
            m = i;
            l = k;
            k = j;
          } else {
            m = i;
            l = e3;
            k = f;
          }
          Tb(l, k, t4) | 0;
          if (!p2) {
            H(22972, 22949, 181, 22959);
          }
          j = (n | 0) != 0;
          i = (o | 0) != 0;
          if (j & i) {
            H(22999, 22949, 182, 22959);
          }
          if (!j) {
            if (i) {
              i = Lb(l, k) | 0;
              if (a[22032 + (i * 7 | 0) + m >> 0] | 0) {
                h = 4;
                break;
              }
              l = 0;
              k = b[21200 + (m * 28 | 0) + (i << 2) >> 2] | 0;
              r2 = 26;
            } else {
              i = 0;
            }
          } else {
            i = Lb(c2, d2) | 0;
            if (a[22032 + (i * 7 | 0) + q2 >> 0] | 0) {
              h = 3;
              break;
            }
            k = b[21200 + (i * 28 | 0) + (q2 << 2) >> 2] | 0;
            l = k;
            r2 = 26;
          }
          if ((r2 | 0) == 26) {
            if ((k | 0) <= -1) {
              H(23030, 22949, 212, 22959);
            }
            if ((l | 0) <= -1) {
              H(23053, 22949, 213, 22959);
            }
            if ((k | 0) > 0) {
              j = t4 + 4 | 0;
              i = 0;
              do {
                Oa(j);
                i = i + 1 | 0;
              } while ((i | 0) != (k | 0));
              i = l;
            } else {
              i = l;
            }
          }
          b[s2 >> 2] = 0;
          b[s2 + 4 >> 2] = 0;
          b[s2 + 8 >> 2] = 0;
          Ma(s2, q2);
          if (h | 0) {
            while (1) {
              if (!(Rb(h) | 0)) {
                La(s2);
              } else {
                Ka(s2);
              }
              if ((h | 0) > 1) {
                h = h + -1 | 0;
              } else {
                break;
              }
            }
          }
          if ((i | 0) > 0) {
            h = 0;
            do {
              Oa(s2);
              h = h + 1 | 0;
            } while ((h | 0) != (i | 0));
          }
          r2 = t4 + 4 | 0;
          Ea(r2, s2, r2);
          Ca(r2);
          r2 = 50;
        }
      } while (0);
      if ((r2 | 0) == 50) {
        h = t4 + 4 | 0;
        b[g2 >> 2] = b[h >> 2];
        b[g2 + 4 >> 2] = b[h + 4 >> 2];
        b[g2 + 8 >> 2] = b[h + 8 >> 2];
        h = 0;
      }
      t4 = h;
      S = u5;
      return t4 | 0;
    }
    function nc(a2, c2, d2, e3) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      e3 = e3 | 0;
      var f = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t4 = 0;
      p2 = S;
      S = S + 48 | 0;
      h = p2 + 36 | 0;
      i = p2 + 24 | 0;
      j = p2 + 12 | 0;
      k = p2;
      g2 = cd2(a2 | 0, c2 | 0, 52) | 0;
      G() | 0;
      g2 = g2 & 15;
      n = cd2(a2 | 0, c2 | 0, 45) | 0;
      G() | 0;
      n = n & 127;
      l = la(n) | 0;
      dd(g2 | 0, 0, 52) | 0;
      r2 = G() | 0 | 134225919;
      q2 = e3;
      b[q2 >> 2] = -1;
      b[q2 + 4 >> 2] = r2;
      if (!g2) {
        if ((b[d2 >> 2] | 0) > 1) {
          r2 = 1;
          S = p2;
          return r2 | 0;
        }
        if ((b[d2 + 4 >> 2] | 0) > 1) {
          r2 = 1;
          S = p2;
          return r2 | 0;
        }
        if ((b[d2 + 8 >> 2] | 0) > 1) {
          r2 = 1;
          S = p2;
          return r2 | 0;
        }
        f = sa(n, Ha(d2) | 0) | 0;
        if ((f | 0) == 127) {
          r2 = 1;
          S = p2;
          return r2 | 0;
        }
        o = dd(f | 0, 0, 45) | 0;
        q2 = G() | 0;
        n = e3;
        q2 = b[n + 4 >> 2] & -1040385 | q2;
        r2 = e3;
        b[r2 >> 2] = b[n >> 2] | o;
        b[r2 + 4 >> 2] = q2;
        r2 = 0;
        S = p2;
        return r2 | 0;
      }
      b[h >> 2] = b[d2 >> 2];
      b[h + 4 >> 2] = b[d2 + 4 >> 2];
      b[h + 8 >> 2] = b[d2 + 8 >> 2];
      while (1) {
        b[i >> 2] = b[h >> 2];
        b[i + 4 >> 2] = b[h + 4 >> 2];
        b[i + 8 >> 2] = b[h + 8 >> 2];
        if (!(Rb(g2) | 0)) {
          Ja(h);
          b[j >> 2] = b[h >> 2];
          b[j + 4 >> 2] = b[h + 4 >> 2];
          b[j + 8 >> 2] = b[h + 8 >> 2];
          La(j);
        } else {
          Ia(h);
          b[j >> 2] = b[h >> 2];
          b[j + 4 >> 2] = b[h + 4 >> 2];
          b[j + 8 >> 2] = b[h + 8 >> 2];
          Ka(j);
        }
        Fa(i, j, k);
        Ca(k);
        q2 = e3;
        s2 = b[q2 >> 2] | 0;
        q2 = b[q2 + 4 >> 2] | 0;
        t4 = (15 - g2 | 0) * 3 | 0;
        d2 = dd(7, 0, t4 | 0) | 0;
        q2 = q2 & ~(G() | 0);
        t4 = dd(Ha(k) | 0, 0, t4 | 0) | 0;
        q2 = G() | 0 | q2;
        r2 = e3;
        b[r2 >> 2] = t4 | s2 & ~d2;
        b[r2 + 4 >> 2] = q2;
        if ((g2 | 0) > 1) {
          g2 = g2 + -1 | 0;
        } else {
          break;
        }
      }
      a:
        do {
          if (((b[h >> 2] | 0) <= 1 ? (b[h + 4 >> 2] | 0) <= 1 : 0) ? (b[h + 8 >> 2] | 0) <= 1 : 0) {
            g2 = Ha(h) | 0;
            i = sa(n, g2) | 0;
            if ((i | 0) == 127) {
              k = 0;
            } else {
              k = la(i) | 0;
            }
            b:
              do {
                if (!g2) {
                  if ((l | 0) != 0 & (k | 0) != 0) {
                    t4 = Lb(a2, c2) | 0;
                    g2 = e3;
                    g2 = 21408 + (t4 * 28 | 0) + ((Lb(b[g2 >> 2] | 0, b[g2 + 4 >> 2] | 0) | 0) << 2) | 0;
                    g2 = b[g2 >> 2] | 0;
                    if ((g2 | 0) <= -1) {
                      H(23201, 22949, 433, 23134);
                    }
                    if (!g2) {
                      f = i;
                      g2 = 55;
                    } else {
                      h = e3;
                      f = 0;
                      d2 = b[h >> 2] | 0;
                      h = b[h + 4 >> 2] | 0;
                      do {
                        d2 = Nb(d2, h) | 0;
                        h = G() | 0;
                        t4 = e3;
                        b[t4 >> 2] = d2;
                        b[t4 + 4 >> 2] = h;
                        f = f + 1 | 0;
                      } while ((f | 0) < (g2 | 0));
                      f = i;
                      g2 = 54;
                    }
                  } else {
                    f = i;
                    g2 = 54;
                  }
                } else {
                  if (l) {
                    h = 21408 + ((Lb(a2, c2) | 0) * 28 | 0) + (g2 << 2) | 0;
                    h = b[h >> 2] | 0;
                    if ((h | 0) > 0) {
                      d2 = 0;
                      do {
                        g2 = Pa(g2) | 0;
                        d2 = d2 + 1 | 0;
                      } while ((d2 | 0) != (h | 0));
                    }
                    if ((g2 | 0) == 1) {
                      f = 3;
                      break a;
                    }
                    d2 = sa(n, g2) | 0;
                    if ((d2 | 0) == 127) {
                      H(23104, 22949, 376, 23134);
                    }
                    if (!(la(d2) | 0)) {
                      o = h;
                      m = g2;
                      f = d2;
                    } else {
                      H(23147, 22949, 377, 23134);
                    }
                  } else {
                    o = 0;
                    m = g2;
                    f = i;
                  }
                  j = b[4304 + (n * 28 | 0) + (m << 2) >> 2] | 0;
                  if ((j | 0) <= -1) {
                    H(23178, 22949, 384, 23134);
                  }
                  if (!k) {
                    if ((o | 0) <= -1) {
                      H(23030, 22949, 417, 23134);
                    }
                    if (o | 0) {
                      h = e3;
                      g2 = 0;
                      d2 = b[h >> 2] | 0;
                      h = b[h + 4 >> 2] | 0;
                      do {
                        d2 = Nb(d2, h) | 0;
                        h = G() | 0;
                        t4 = e3;
                        b[t4 >> 2] = d2;
                        b[t4 + 4 >> 2] = h;
                        g2 = g2 + 1 | 0;
                      } while ((g2 | 0) < (o | 0));
                    }
                    if ((j | 0) <= 0) {
                      g2 = 54;
                      break;
                    }
                    h = e3;
                    g2 = 0;
                    d2 = b[h >> 2] | 0;
                    h = b[h + 4 >> 2] | 0;
                    while (1) {
                      d2 = Nb(d2, h) | 0;
                      h = G() | 0;
                      t4 = e3;
                      b[t4 >> 2] = d2;
                      b[t4 + 4 >> 2] = h;
                      g2 = g2 + 1 | 0;
                      if ((g2 | 0) == (j | 0)) {
                        g2 = 54;
                        break b;
                      }
                    }
                  }
                  i = ta(f, n) | 0;
                  if ((i | 0) == 7) {
                    H(22925, 22949, 393, 23134);
                  }
                  g2 = e3;
                  d2 = b[g2 >> 2] | 0;
                  g2 = b[g2 + 4 >> 2] | 0;
                  if ((j | 0) > 0) {
                    h = 0;
                    do {
                      d2 = Nb(d2, g2) | 0;
                      g2 = G() | 0;
                      t4 = e3;
                      b[t4 >> 2] = d2;
                      b[t4 + 4 >> 2] = g2;
                      h = h + 1 | 0;
                    } while ((h | 0) != (j | 0));
                  }
                  d2 = Lb(d2, g2) | 0;
                  t4 = ma(f) | 0;
                  d2 = b[(t4 ? 21824 : 21616) + (i * 28 | 0) + (d2 << 2) >> 2] | 0;
                  if ((d2 | 0) <= -1) {
                    H(23030, 22949, 412, 23134);
                  }
                  if (!d2) {
                    g2 = 54;
                  } else {
                    i = e3;
                    g2 = 0;
                    h = b[i >> 2] | 0;
                    i = b[i + 4 >> 2] | 0;
                    do {
                      h = Mb(h, i) | 0;
                      i = G() | 0;
                      t4 = e3;
                      b[t4 >> 2] = h;
                      b[t4 + 4 >> 2] = i;
                      g2 = g2 + 1 | 0;
                    } while ((g2 | 0) < (d2 | 0));
                    g2 = 54;
                  }
                }
              } while (0);
            if ((g2 | 0) == 54) {
              if (k) {
                g2 = 55;
              }
            }
            if ((g2 | 0) == 55) {
              t4 = e3;
              if ((Lb(b[t4 >> 2] | 0, b[t4 + 4 >> 2] | 0) | 0) == 1) {
                f = 4;
                break;
              }
            }
            t4 = e3;
            r2 = b[t4 >> 2] | 0;
            t4 = b[t4 + 4 >> 2] & -1040385;
            s2 = dd(f | 0, 0, 45) | 0;
            t4 = t4 | (G() | 0);
            f = e3;
            b[f >> 2] = r2 | s2;
            b[f + 4 >> 2] = t4;
            f = 0;
          } else {
            f = 2;
          }
        } while (0);
      t4 = f;
      S = p2;
      return t4 | 0;
    }
    function oc(a2, b2, c2, d2, e3) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      e3 = e3 | 0;
      var f = 0, g2 = 0;
      g2 = S;
      S = S + 16 | 0;
      f = g2;
      a2 = mc(a2, b2, c2, d2, f) | 0;
      if (!a2) {
        Ua(f, e3);
        a2 = 0;
      }
      S = g2;
      return a2 | 0;
    }
    function pc(a2, b2, c2, d2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      var e3 = 0, f = 0;
      e3 = S;
      S = S + 16 | 0;
      f = e3;
      Va(c2, f);
      d2 = nc(a2, b2, f, d2) | 0;
      S = e3;
      return d2 | 0;
    }
    function qc(a2, b2, c2, d2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      var e3 = 0, f = 0, g2 = 0;
      g2 = S;
      S = S + 32 | 0;
      e3 = g2 + 12 | 0;
      f = g2;
      if ((mc(a2, b2, a2, b2, e3) | 0) == 0 ? (mc(a2, b2, c2, d2, f) | 0) == 0 : 0) {
        a2 = Ta(e3, f) | 0;
      } else {
        a2 = -1;
      }
      S = g2;
      return a2 | 0;
    }
    function rc(a2, b2, c2, d2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      var e3 = 0, f = 0, g2 = 0;
      g2 = S;
      S = S + 32 | 0;
      e3 = g2 + 12 | 0;
      f = g2;
      if ((mc(a2, b2, a2, b2, e3) | 0) == 0 ? (mc(a2, b2, c2, d2, f) | 0) == 0 : 0) {
        a2 = Ta(e3, f) | 0;
      } else {
        a2 = -1;
      }
      S = g2;
      return (a2 >>> 31 ^ 1) + a2 | 0;
    }
    function sc(a2, c2, d2, e3, f) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      e3 = e3 | 0;
      f = f | 0;
      var g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, r2 = 0, s2 = 0, t4 = 0, u5 = 0, v3 = 0, w2 = 0, x2 = 0, y2 = 0;
      x2 = S;
      S = S + 48 | 0;
      g2 = x2 + 24 | 0;
      h = x2 + 12 | 0;
      w2 = x2;
      if ((mc(a2, c2, a2, c2, g2) | 0) == 0 ? (mc(a2, c2, d2, e3, h) | 0) == 0 : 0) {
        v3 = Ta(g2, h) | 0;
        if ((v3 | 0) < 0) {
          w2 = v3;
          S = x2;
          return w2 | 0;
        }
        b[g2 >> 2] = 0;
        b[g2 + 4 >> 2] = 0;
        b[g2 + 8 >> 2] = 0;
        b[h >> 2] = 0;
        b[h + 4 >> 2] = 0;
        b[h + 8 >> 2] = 0;
        mc(a2, c2, a2, c2, g2) | 0;
        mc(a2, c2, d2, e3, h) | 0;
        Wa(g2);
        Wa(h);
        if (!v3) {
          e3 = g2 + 4 | 0;
          n = g2 + 8 | 0;
          s2 = e3;
          t4 = n;
          u5 = g2;
          d2 = b[g2 >> 2] | 0;
          e3 = b[e3 >> 2] | 0;
          g2 = b[n >> 2] | 0;
          p2 = 0;
          r2 = 0;
          o = 0;
        } else {
          l = b[g2 >> 2] | 0;
          o = +(v3 | 0);
          s2 = g2 + 4 | 0;
          m = b[s2 >> 2] | 0;
          t4 = g2 + 8 | 0;
          n = b[t4 >> 2] | 0;
          u5 = g2;
          d2 = l;
          e3 = m;
          g2 = n;
          p2 = +((b[h >> 2] | 0) - l | 0) / o;
          r2 = +((b[h + 4 >> 2] | 0) - m | 0) / o;
          o = +((b[h + 8 >> 2] | 0) - n | 0) / o;
        }
        b[w2 >> 2] = d2;
        n = w2 + 4 | 0;
        b[n >> 2] = e3;
        m = w2 + 8 | 0;
        b[m >> 2] = g2;
        l = 0;
        while (1) {
          j = +(l | 0);
          y2 = p2 * j + +(d2 | 0);
          i = r2 * j + +(b[s2 >> 2] | 0);
          j = o * j + +(b[t4 >> 2] | 0);
          e3 = ~~+fd(+y2);
          h = ~~+fd(+i);
          d2 = ~~+fd(+j);
          y2 = +q(+(+(e3 | 0) - y2));
          i = +q(+(+(h | 0) - i));
          j = +q(+(+(d2 | 0) - j));
          do {
            if (!(y2 > i & y2 > j)) {
              k = 0 - e3 | 0;
              if (i > j) {
                g2 = k - d2 | 0;
                break;
              } else {
                g2 = h;
                d2 = k - h | 0;
                break;
              }
            } else {
              e3 = 0 - (h + d2) | 0;
              g2 = h;
            }
          } while (0);
          b[w2 >> 2] = e3;
          b[n >> 2] = g2;
          b[m >> 2] = d2;
          Xa(w2);
          nc(a2, c2, w2, f + (l << 3) | 0) | 0;
          if ((l | 0) == (v3 | 0)) {
            break;
          }
          l = l + 1 | 0;
          d2 = b[u5 >> 2] | 0;
        }
        w2 = 0;
        S = x2;
        return w2 | 0;
      }
      w2 = -1;
      S = x2;
      return w2 | 0;
    }
    function tc(a2, b2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      var c2 = 0;
      if (!b2) {
        c2 = 1;
        return c2 | 0;
      }
      c2 = a2;
      a2 = 1;
      do {
        a2 = B4((b2 & 1 | 0) == 0 ? 1 : c2, a2) | 0;
        b2 = b2 >> 1;
        c2 = B4(c2, c2) | 0;
      } while ((b2 | 0) != 0);
      return a2 | 0;
    }
    function uc(a2, c2, d2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      var f = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0;
      if (!(xa(c2, d2) | 0)) {
        n = 0;
        return n | 0;
      }
      c2 = wa(c2) | 0;
      o = +e[d2 >> 3];
      f = +e[d2 + 8 >> 3];
      f = c2 & f < 0 ? f + 6.283185307179586 : f;
      n = b[a2 >> 2] | 0;
      if ((n | 0) <= 0) {
        n = 0;
        return n | 0;
      }
      m = b[a2 + 4 >> 2] | 0;
      if (c2) {
        c2 = 0;
        d2 = -1;
        a2 = 0;
        a:
          while (1) {
            l = a2;
            while (1) {
              i = +e[m + (l << 4) >> 3];
              k = +e[m + (l << 4) + 8 >> 3];
              a2 = (d2 + 2 | 0) % (n | 0) | 0;
              h = +e[m + (a2 << 4) >> 3];
              g2 = +e[m + (a2 << 4) + 8 >> 3];
              if (i > h) {
                j = i;
                i = k;
              } else {
                j = h;
                h = i;
                i = g2;
                g2 = k;
              }
              if (!(o < h | o > j)) {
                break;
              }
              d2 = l + 1 | 0;
              if ((d2 | 0) < (n | 0)) {
                a2 = l;
                l = d2;
                d2 = a2;
              } else {
                d2 = 22;
                break a;
              }
            }
            k = g2 < 0 ? g2 + 6.283185307179586 : g2;
            i = i < 0 ? i + 6.283185307179586 : i;
            f = i == f | k == f ? f + -2220446049250313e-31 : f;
            k = k + (o - h) / (j - h) * (i - k);
            if ((k < 0 ? k + 6.283185307179586 : k) > f) {
              c2 = c2 ^ 1;
            }
            a2 = l + 1 | 0;
            if ((a2 | 0) >= (n | 0)) {
              d2 = 22;
              break;
            } else {
              d2 = l;
            }
          }
        if ((d2 | 0) == 22) {
          return c2 | 0;
        }
      } else {
        c2 = 0;
        d2 = -1;
        a2 = 0;
        b:
          while (1) {
            l = a2;
            while (1) {
              i = +e[m + (l << 4) >> 3];
              k = +e[m + (l << 4) + 8 >> 3];
              a2 = (d2 + 2 | 0) % (n | 0) | 0;
              h = +e[m + (a2 << 4) >> 3];
              g2 = +e[m + (a2 << 4) + 8 >> 3];
              if (i > h) {
                j = i;
                i = k;
              } else {
                j = h;
                h = i;
                i = g2;
                g2 = k;
              }
              if (!(o < h | o > j)) {
                break;
              }
              d2 = l + 1 | 0;
              if ((d2 | 0) < (n | 0)) {
                a2 = l;
                l = d2;
                d2 = a2;
              } else {
                d2 = 22;
                break b;
              }
            }
            f = i == f | g2 == f ? f + -2220446049250313e-31 : f;
            if (g2 + (o - h) / (j - h) * (i - g2) > f) {
              c2 = c2 ^ 1;
            }
            a2 = l + 1 | 0;
            if ((a2 | 0) >= (n | 0)) {
              d2 = 22;
              break;
            } else {
              d2 = l;
            }
          }
        if ((d2 | 0) == 22) {
          return c2 | 0;
        }
      }
      return 0;
    }
    function vc(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      var d2 = 0, f = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, r2 = 0, s2 = 0, t4 = 0, u5 = 0, v3 = 0;
      r2 = b[a2 >> 2] | 0;
      if (!r2) {
        b[c2 >> 2] = 0;
        b[c2 + 4 >> 2] = 0;
        b[c2 + 8 >> 2] = 0;
        b[c2 + 12 >> 2] = 0;
        b[c2 + 16 >> 2] = 0;
        b[c2 + 20 >> 2] = 0;
        b[c2 + 24 >> 2] = 0;
        b[c2 + 28 >> 2] = 0;
        return;
      }
      s2 = c2 + 8 | 0;
      e[s2 >> 3] = 17976931348623157e292;
      t4 = c2 + 24 | 0;
      e[t4 >> 3] = 17976931348623157e292;
      e[c2 >> 3] = -17976931348623157e292;
      u5 = c2 + 16 | 0;
      e[u5 >> 3] = -17976931348623157e292;
      if ((r2 | 0) <= 0) {
        return;
      }
      o = b[a2 + 4 >> 2] | 0;
      l = 17976931348623157e292;
      m = -17976931348623157e292;
      n = 0;
      a2 = -1;
      h = 17976931348623157e292;
      i = 17976931348623157e292;
      k = -17976931348623157e292;
      f = -17976931348623157e292;
      p2 = 0;
      while (1) {
        d2 = +e[o + (p2 << 4) >> 3];
        j = +e[o + (p2 << 4) + 8 >> 3];
        a2 = a2 + 2 | 0;
        g2 = +e[o + (((a2 | 0) == (r2 | 0) ? 0 : a2) << 4) + 8 >> 3];
        if (d2 < h) {
          e[s2 >> 3] = d2;
          h = d2;
        }
        if (j < i) {
          e[t4 >> 3] = j;
          i = j;
        }
        if (d2 > k) {
          e[c2 >> 3] = d2;
        } else {
          d2 = k;
        }
        if (j > f) {
          e[u5 >> 3] = j;
          f = j;
        }
        l = j > 0 & j < l ? j : l;
        m = j < 0 & j > m ? j : m;
        n = n | +q(+(j - g2)) > 3.141592653589793;
        a2 = p2 + 1 | 0;
        if ((a2 | 0) == (r2 | 0)) {
          break;
        } else {
          v3 = p2;
          k = d2;
          p2 = a2;
          a2 = v3;
        }
      }
      if (!n) {
        return;
      }
      e[u5 >> 3] = m;
      e[t4 >> 3] = l;
      return;
    }
    function wc(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      var d2 = 0, f = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, r2 = 0, s2 = 0, t4 = 0, u5 = 0, v3 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0, A7 = 0;
      r2 = b[a2 >> 2] | 0;
      if (r2) {
        s2 = c2 + 8 | 0;
        e[s2 >> 3] = 17976931348623157e292;
        t4 = c2 + 24 | 0;
        e[t4 >> 3] = 17976931348623157e292;
        e[c2 >> 3] = -17976931348623157e292;
        u5 = c2 + 16 | 0;
        e[u5 >> 3] = -17976931348623157e292;
        if ((r2 | 0) > 0) {
          g2 = b[a2 + 4 >> 2] | 0;
          o = 17976931348623157e292;
          p2 = -17976931348623157e292;
          f = 0;
          d2 = -1;
          k = 17976931348623157e292;
          l = 17976931348623157e292;
          n = -17976931348623157e292;
          i = -17976931348623157e292;
          v3 = 0;
          while (1) {
            h = +e[g2 + (v3 << 4) >> 3];
            m = +e[g2 + (v3 << 4) + 8 >> 3];
            z2 = d2 + 2 | 0;
            j = +e[g2 + (((z2 | 0) == (r2 | 0) ? 0 : z2) << 4) + 8 >> 3];
            if (h < k) {
              e[s2 >> 3] = h;
              k = h;
            }
            if (m < l) {
              e[t4 >> 3] = m;
              l = m;
            }
            if (h > n) {
              e[c2 >> 3] = h;
            } else {
              h = n;
            }
            if (m > i) {
              e[u5 >> 3] = m;
              i = m;
            }
            o = m > 0 & m < o ? m : o;
            p2 = m < 0 & m > p2 ? m : p2;
            f = f | +q(+(m - j)) > 3.141592653589793;
            d2 = v3 + 1 | 0;
            if ((d2 | 0) == (r2 | 0)) {
              break;
            } else {
              z2 = v3;
              n = h;
              v3 = d2;
              d2 = z2;
            }
          }
          if (f) {
            e[u5 >> 3] = p2;
            e[t4 >> 3] = o;
          }
        }
      } else {
        b[c2 >> 2] = 0;
        b[c2 + 4 >> 2] = 0;
        b[c2 + 8 >> 2] = 0;
        b[c2 + 12 >> 2] = 0;
        b[c2 + 16 >> 2] = 0;
        b[c2 + 20 >> 2] = 0;
        b[c2 + 24 >> 2] = 0;
        b[c2 + 28 >> 2] = 0;
      }
      z2 = a2 + 8 | 0;
      d2 = b[z2 >> 2] | 0;
      if ((d2 | 0) <= 0) {
        return;
      }
      y2 = a2 + 12 | 0;
      x2 = 0;
      do {
        g2 = b[y2 >> 2] | 0;
        f = x2;
        x2 = x2 + 1 | 0;
        t4 = c2 + (x2 << 5) | 0;
        u5 = b[g2 + (f << 3) >> 2] | 0;
        if (u5) {
          v3 = c2 + (x2 << 5) + 8 | 0;
          e[v3 >> 3] = 17976931348623157e292;
          a2 = c2 + (x2 << 5) + 24 | 0;
          e[a2 >> 3] = 17976931348623157e292;
          e[t4 >> 3] = -17976931348623157e292;
          w2 = c2 + (x2 << 5) + 16 | 0;
          e[w2 >> 3] = -17976931348623157e292;
          if ((u5 | 0) > 0) {
            r2 = b[g2 + (f << 3) + 4 >> 2] | 0;
            o = 17976931348623157e292;
            p2 = -17976931348623157e292;
            g2 = 0;
            f = -1;
            s2 = 0;
            k = 17976931348623157e292;
            l = 17976931348623157e292;
            m = -17976931348623157e292;
            i = -17976931348623157e292;
            while (1) {
              h = +e[r2 + (s2 << 4) >> 3];
              n = +e[r2 + (s2 << 4) + 8 >> 3];
              f = f + 2 | 0;
              j = +e[r2 + (((f | 0) == (u5 | 0) ? 0 : f) << 4) + 8 >> 3];
              if (h < k) {
                e[v3 >> 3] = h;
                k = h;
              }
              if (n < l) {
                e[a2 >> 3] = n;
                l = n;
              }
              if (h > m) {
                e[t4 >> 3] = h;
              } else {
                h = m;
              }
              if (n > i) {
                e[w2 >> 3] = n;
                i = n;
              }
              o = n > 0 & n < o ? n : o;
              p2 = n < 0 & n > p2 ? n : p2;
              g2 = g2 | +q(+(n - j)) > 3.141592653589793;
              f = s2 + 1 | 0;
              if ((f | 0) == (u5 | 0)) {
                break;
              } else {
                A7 = s2;
                s2 = f;
                m = h;
                f = A7;
              }
            }
            if (g2) {
              e[w2 >> 3] = p2;
              e[a2 >> 3] = o;
            }
          }
        } else {
          b[t4 >> 2] = 0;
          b[t4 + 4 >> 2] = 0;
          b[t4 + 8 >> 2] = 0;
          b[t4 + 12 >> 2] = 0;
          b[t4 + 16 >> 2] = 0;
          b[t4 + 20 >> 2] = 0;
          b[t4 + 24 >> 2] = 0;
          b[t4 + 28 >> 2] = 0;
          d2 = b[z2 >> 2] | 0;
        }
      } while ((x2 | 0) < (d2 | 0));
      return;
    }
    function xc(a2, c2, d2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      var e3 = 0, f = 0, g2 = 0;
      if (!(uc(a2, c2, d2) | 0)) {
        f = 0;
        return f | 0;
      }
      f = a2 + 8 | 0;
      if ((b[f >> 2] | 0) <= 0) {
        f = 1;
        return f | 0;
      }
      e3 = a2 + 12 | 0;
      a2 = 0;
      while (1) {
        g2 = a2;
        a2 = a2 + 1 | 0;
        if (uc((b[e3 >> 2] | 0) + (g2 << 3) | 0, c2 + (a2 << 5) | 0, d2) | 0) {
          a2 = 0;
          e3 = 6;
          break;
        }
        if ((a2 | 0) >= (b[f >> 2] | 0)) {
          a2 = 1;
          e3 = 6;
          break;
        }
      }
      if ((e3 | 0) == 6) {
        return a2 | 0;
      }
      return 0;
    }
    function yc() {
      return 8;
    }
    function zc() {
      return 16;
    }
    function Ac() {
      return 168;
    }
    function Bc() {
      return 8;
    }
    function Cc() {
      return 16;
    }
    function Dc() {
      return 12;
    }
    function Ec() {
      return 8;
    }
    function Fc(a2) {
      a2 = a2 | 0;
      var b2 = 0, c2 = 0;
      c2 = +e[a2 >> 3];
      b2 = +e[a2 + 8 >> 3];
      return + +r(+(c2 * c2 + b2 * b2));
    }
    function Gc(a2, b2, c2, d2, f) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      f = f | 0;
      var g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0;
      k = +e[a2 >> 3];
      j = +e[b2 >> 3] - k;
      i = +e[a2 + 8 >> 3];
      h = +e[b2 + 8 >> 3] - i;
      m = +e[c2 >> 3];
      g2 = +e[d2 >> 3] - m;
      n = +e[c2 + 8 >> 3];
      l = +e[d2 + 8 >> 3] - n;
      g2 = (g2 * (i - n) - (k - m) * l) / (j * l - h * g2);
      e[f >> 3] = k + j * g2;
      e[f + 8 >> 3] = i + h * g2;
      return;
    }
    function Hc(a2, b2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      if (!(+e[a2 >> 3] == +e[b2 >> 3])) {
        b2 = 0;
        return b2 | 0;
      }
      b2 = +e[a2 + 8 >> 3] == +e[b2 + 8 >> 3];
      return b2 | 0;
    }
    function Ic(a2, b2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      var c2 = 0, d2 = 0, f = 0;
      f = +e[a2 >> 3] - +e[b2 >> 3];
      d2 = +e[a2 + 8 >> 3] - +e[b2 + 8 >> 3];
      c2 = +e[a2 + 16 >> 3] - +e[b2 + 16 >> 3];
      return +(f * f + d2 * d2 + c2 * c2);
    }
    function Jc(a2, b2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      var c2 = 0, d2 = 0, f = 0;
      c2 = +e[a2 >> 3];
      d2 = +t(+c2);
      c2 = +u4(+c2);
      e[b2 + 16 >> 3] = c2;
      c2 = +e[a2 + 8 >> 3];
      f = d2 * +t(+c2);
      e[b2 >> 3] = f;
      c2 = d2 * +u4(+c2);
      e[b2 + 8 >> 3] = c2;
      return;
    }
    function Kc(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      var d2 = 0, e3 = 0, f = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0;
      k = S;
      S = S + 32 | 0;
      f = k + 16 | 0;
      g2 = k;
      Ub(a2, c2, f);
      h = Ab(a2, c2) | 0;
      j = Lb(a2, c2) | 0;
      pa(h, g2);
      c2 = qa(h, b[f >> 2] | 0) | 0;
      if (!(la(h) | 0)) {
        j = c2;
        S = k;
        return j | 0;
      }
      do {
        switch (h | 0) {
          case 4: {
            a2 = 0;
            d2 = 14;
            break;
          }
          case 14: {
            a2 = 1;
            d2 = 14;
            break;
          }
          case 24: {
            a2 = 2;
            d2 = 14;
            break;
          }
          case 38: {
            a2 = 3;
            d2 = 14;
            break;
          }
          case 49: {
            a2 = 4;
            d2 = 14;
            break;
          }
          case 58: {
            a2 = 5;
            d2 = 14;
            break;
          }
          case 63: {
            a2 = 6;
            d2 = 14;
            break;
          }
          case 72: {
            a2 = 7;
            d2 = 14;
            break;
          }
          case 83: {
            a2 = 8;
            d2 = 14;
            break;
          }
          case 97: {
            a2 = 9;
            d2 = 14;
            break;
          }
          case 107: {
            a2 = 10;
            d2 = 14;
            break;
          }
          case 117: {
            a2 = 11;
            d2 = 14;
            break;
          }
          default: {
            i = 0;
            e3 = 0;
          }
        }
      } while (0);
      if ((d2 | 0) == 14) {
        i = b[22096 + (a2 * 24 | 0) + 8 >> 2] | 0;
        e3 = b[22096 + (a2 * 24 | 0) + 16 >> 2] | 0;
      }
      a2 = b[f >> 2] | 0;
      if ((a2 | 0) != (b[g2 >> 2] | 0)) {
        h = ma(h) | 0;
        a2 = b[f >> 2] | 0;
        if (h | (a2 | 0) == (e3 | 0)) {
          c2 = (c2 + 1 | 0) % 6 | 0;
        }
      }
      if ((j | 0) == 3 & (a2 | 0) == (e3 | 0)) {
        j = (c2 + 5 | 0) % 6 | 0;
        S = k;
        return j | 0;
      }
      if (!((j | 0) == 5 & (a2 | 0) == (i | 0))) {
        j = c2;
        S = k;
        return j | 0;
      }
      j = (c2 + 1 | 0) % 6 | 0;
      S = k;
      return j | 0;
    }
    function Lc(a2, c2, d2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      var e3 = 0, f = 0;
      e3 = Fb(a2, c2) | 0;
      if ((d2 + -1 | 0) >>> 0 > 5) {
        d2 = -1;
        return d2 | 0;
      }
      f = (e3 | 0) != 0;
      if ((d2 | 0) == 1 & f) {
        d2 = -1;
        return d2 | 0;
      }
      e3 = Kc(a2, c2) | 0;
      if (f) {
        d2 = (5 - e3 + (b[22384 + (d2 << 2) >> 2] | 0) | 0) % 5 | 0;
        return d2 | 0;
      } else {
        d2 = (6 - e3 + (b[22416 + (d2 << 2) >> 2] | 0) | 0) % 6 | 0;
        return d2 | 0;
      }
      return 0;
    }
    function Mc(a2, c2, d2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      var e3 = 0;
      if ((c2 | 0) > 0) {
        e3 = Yc(c2, 4) | 0;
        b[a2 >> 2] = e3;
        if (!e3) {
          H(23230, 23253, 40, 23267);
        }
      } else {
        b[a2 >> 2] = 0;
      }
      b[a2 + 4 >> 2] = c2;
      b[a2 + 8 >> 2] = 0;
      b[a2 + 12 >> 2] = d2;
      return;
    }
    function Nc(a2) {
      a2 = a2 | 0;
      var c2 = 0, d2 = 0, f = 0, g2 = 0, h = 0, i = 0, j = 0;
      g2 = a2 + 4 | 0;
      h = a2 + 12 | 0;
      i = a2 + 8 | 0;
      a:
        while (1) {
          d2 = b[g2 >> 2] | 0;
          c2 = 0;
          while (1) {
            if ((c2 | 0) >= (d2 | 0)) {
              break a;
            }
            f = b[a2 >> 2] | 0;
            j = b[f + (c2 << 2) >> 2] | 0;
            if (!j) {
              c2 = c2 + 1 | 0;
            } else {
              break;
            }
          }
          c2 = f + (~~(+q(+(+s(10, + +(15 - (b[h >> 2] | 0) | 0)) * (+e[j >> 3] + +e[j + 8 >> 3]))) % +(d2 | 0)) >>> 0 << 2) | 0;
          d2 = b[c2 >> 2] | 0;
          b:
            do {
              if (d2 | 0) {
                f = j + 32 | 0;
                if ((d2 | 0) == (j | 0)) {
                  b[c2 >> 2] = b[f >> 2];
                } else {
                  d2 = d2 + 32 | 0;
                  c2 = b[d2 >> 2] | 0;
                  if (!c2) {
                    break;
                  }
                  while (1) {
                    if ((c2 | 0) == (j | 0)) {
                      break;
                    }
                    d2 = c2 + 32 | 0;
                    c2 = b[d2 >> 2] | 0;
                    if (!c2) {
                      break b;
                    }
                  }
                  b[d2 >> 2] = b[f >> 2];
                }
                Xc(j);
                b[i >> 2] = (b[i >> 2] | 0) + -1;
              }
            } while (0);
        }
      Xc(b[a2 >> 2] | 0);
      return;
    }
    function Oc(a2) {
      a2 = a2 | 0;
      var c2 = 0, d2 = 0, e3 = 0;
      e3 = b[a2 + 4 >> 2] | 0;
      d2 = 0;
      while (1) {
        if ((d2 | 0) >= (e3 | 0)) {
          c2 = 0;
          d2 = 4;
          break;
        }
        c2 = b[(b[a2 >> 2] | 0) + (d2 << 2) >> 2] | 0;
        if (!c2) {
          d2 = d2 + 1 | 0;
        } else {
          d2 = 4;
          break;
        }
      }
      if ((d2 | 0) == 4) {
        return c2 | 0;
      }
      return 0;
    }
    function Pc(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      var d2 = 0, f = 0, g2 = 0, h = 0;
      d2 = ~~(+q(+(+s(10, + +(15 - (b[a2 + 12 >> 2] | 0) | 0)) * (+e[c2 >> 3] + +e[c2 + 8 >> 3]))) % +(b[a2 + 4 >> 2] | 0)) >>> 0;
      d2 = (b[a2 >> 2] | 0) + (d2 << 2) | 0;
      f = b[d2 >> 2] | 0;
      if (!f) {
        h = 1;
        return h | 0;
      }
      h = c2 + 32 | 0;
      do {
        if ((f | 0) != (c2 | 0)) {
          d2 = b[f + 32 >> 2] | 0;
          if (!d2) {
            h = 1;
            return h | 0;
          }
          g2 = d2;
          while (1) {
            if ((g2 | 0) == (c2 | 0)) {
              g2 = 8;
              break;
            }
            d2 = b[g2 + 32 >> 2] | 0;
            if (!d2) {
              d2 = 1;
              g2 = 10;
              break;
            } else {
              f = g2;
              g2 = d2;
            }
          }
          if ((g2 | 0) == 8) {
            b[f + 32 >> 2] = b[h >> 2];
            break;
          } else if ((g2 | 0) == 10) {
            return d2 | 0;
          }
        } else {
          b[d2 >> 2] = b[h >> 2];
        }
      } while (0);
      Xc(c2);
      h = a2 + 8 | 0;
      b[h >> 2] = (b[h >> 2] | 0) + -1;
      h = 0;
      return h | 0;
    }
    function Qc(a2, c2, d2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      var f = 0, g2 = 0, h = 0, i = 0;
      h = Wc(40) | 0;
      if (!h) {
        H(23283, 23253, 98, 23296);
      }
      b[h >> 2] = b[c2 >> 2];
      b[h + 4 >> 2] = b[c2 + 4 >> 2];
      b[h + 8 >> 2] = b[c2 + 8 >> 2];
      b[h + 12 >> 2] = b[c2 + 12 >> 2];
      g2 = h + 16 | 0;
      b[g2 >> 2] = b[d2 >> 2];
      b[g2 + 4 >> 2] = b[d2 + 4 >> 2];
      b[g2 + 8 >> 2] = b[d2 + 8 >> 2];
      b[g2 + 12 >> 2] = b[d2 + 12 >> 2];
      b[h + 32 >> 2] = 0;
      g2 = ~~(+q(+(+s(10, + +(15 - (b[a2 + 12 >> 2] | 0) | 0)) * (+e[c2 >> 3] + +e[c2 + 8 >> 3]))) % +(b[a2 + 4 >> 2] | 0)) >>> 0;
      g2 = (b[a2 >> 2] | 0) + (g2 << 2) | 0;
      f = b[g2 >> 2] | 0;
      do {
        if (!f) {
          b[g2 >> 2] = h;
        } else {
          while (1) {
            if (hb(f, c2) | 0 ? hb(f + 16 | 0, d2) | 0 : 0) {
              break;
            }
            g2 = b[f + 32 >> 2] | 0;
            f = (g2 | 0) == 0 ? f : g2;
            if (!(b[f + 32 >> 2] | 0)) {
              i = 10;
              break;
            }
          }
          if ((i | 0) == 10) {
            b[f + 32 >> 2] = h;
            break;
          }
          Xc(h);
          i = f;
          return i | 0;
        }
      } while (0);
      i = a2 + 8 | 0;
      b[i >> 2] = (b[i >> 2] | 0) + 1;
      i = h;
      return i | 0;
    }
    function Rc(a2, c2, d2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      var f = 0, g2 = 0;
      g2 = ~~(+q(+(+s(10, + +(15 - (b[a2 + 12 >> 2] | 0) | 0)) * (+e[c2 >> 3] + +e[c2 + 8 >> 3]))) % +(b[a2 + 4 >> 2] | 0)) >>> 0;
      g2 = b[(b[a2 >> 2] | 0) + (g2 << 2) >> 2] | 0;
      if (!g2) {
        d2 = 0;
        return d2 | 0;
      }
      if (!d2) {
        a2 = g2;
        while (1) {
          if (hb(a2, c2) | 0) {
            f = 10;
            break;
          }
          a2 = b[a2 + 32 >> 2] | 0;
          if (!a2) {
            a2 = 0;
            f = 10;
            break;
          }
        }
        if ((f | 0) == 10) {
          return a2 | 0;
        }
      }
      a2 = g2;
      while (1) {
        if (hb(a2, c2) | 0 ? hb(a2 + 16 | 0, d2) | 0 : 0) {
          f = 10;
          break;
        }
        a2 = b[a2 + 32 >> 2] | 0;
        if (!a2) {
          a2 = 0;
          f = 10;
          break;
        }
      }
      if ((f | 0) == 10) {
        return a2 | 0;
      }
      return 0;
    }
    function Sc(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      var d2 = 0;
      d2 = ~~(+q(+(+s(10, + +(15 - (b[a2 + 12 >> 2] | 0) | 0)) * (+e[c2 >> 3] + +e[c2 + 8 >> 3]))) % +(b[a2 + 4 >> 2] | 0)) >>> 0;
      a2 = b[(b[a2 >> 2] | 0) + (d2 << 2) >> 2] | 0;
      if (!a2) {
        d2 = 0;
        return d2 | 0;
      }
      while (1) {
        if (hb(a2, c2) | 0) {
          c2 = 5;
          break;
        }
        a2 = b[a2 + 32 >> 2] | 0;
        if (!a2) {
          a2 = 0;
          c2 = 5;
          break;
        }
      }
      if ((c2 | 0) == 5) {
        return a2 | 0;
      }
      return 0;
    }
    function Tc() {
      return 23312;
    }
    function Uc(a2) {
      a2 = +a2;
      return + +id(+a2);
    }
    function Vc(a2) {
      a2 = +a2;
      return ~~+Uc(a2) | 0;
    }
    function Wc(a2) {
      a2 = a2 | 0;
      var c2 = 0, d2 = 0, e3 = 0, f = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t4 = 0, u5 = 0, v3 = 0, w2 = 0;
      w2 = S;
      S = S + 16 | 0;
      n = w2;
      do {
        if (a2 >>> 0 < 245) {
          k = a2 >>> 0 < 11 ? 16 : a2 + 11 & -8;
          a2 = k >>> 3;
          m = b[5829] | 0;
          d2 = m >>> a2;
          if (d2 & 3 | 0) {
            c2 = (d2 & 1 ^ 1) + a2 | 0;
            a2 = 23356 + (c2 << 1 << 2) | 0;
            d2 = a2 + 8 | 0;
            e3 = b[d2 >> 2] | 0;
            f = e3 + 8 | 0;
            g2 = b[f >> 2] | 0;
            if ((g2 | 0) == (a2 | 0)) {
              b[5829] = m & ~(1 << c2);
            } else {
              b[g2 + 12 >> 2] = a2;
              b[d2 >> 2] = g2;
            }
            v3 = c2 << 3;
            b[e3 + 4 >> 2] = v3 | 3;
            v3 = e3 + v3 + 4 | 0;
            b[v3 >> 2] = b[v3 >> 2] | 1;
            v3 = f;
            S = w2;
            return v3 | 0;
          }
          l = b[5831] | 0;
          if (k >>> 0 > l >>> 0) {
            if (d2 | 0) {
              c2 = 2 << a2;
              c2 = d2 << a2 & (c2 | 0 - c2);
              c2 = (c2 & 0 - c2) + -1 | 0;
              i = c2 >>> 12 & 16;
              c2 = c2 >>> i;
              d2 = c2 >>> 5 & 8;
              c2 = c2 >>> d2;
              g2 = c2 >>> 2 & 4;
              c2 = c2 >>> g2;
              a2 = c2 >>> 1 & 2;
              c2 = c2 >>> a2;
              e3 = c2 >>> 1 & 1;
              e3 = (d2 | i | g2 | a2 | e3) + (c2 >>> e3) | 0;
              c2 = 23356 + (e3 << 1 << 2) | 0;
              a2 = c2 + 8 | 0;
              g2 = b[a2 >> 2] | 0;
              i = g2 + 8 | 0;
              d2 = b[i >> 2] | 0;
              if ((d2 | 0) == (c2 | 0)) {
                a2 = m & ~(1 << e3);
                b[5829] = a2;
              } else {
                b[d2 + 12 >> 2] = c2;
                b[a2 >> 2] = d2;
                a2 = m;
              }
              v3 = e3 << 3;
              h = v3 - k | 0;
              b[g2 + 4 >> 2] = k | 3;
              f = g2 + k | 0;
              b[f + 4 >> 2] = h | 1;
              b[g2 + v3 >> 2] = h;
              if (l | 0) {
                e3 = b[5834] | 0;
                c2 = l >>> 3;
                d2 = 23356 + (c2 << 1 << 2) | 0;
                c2 = 1 << c2;
                if (!(a2 & c2)) {
                  b[5829] = a2 | c2;
                  c2 = d2;
                  a2 = d2 + 8 | 0;
                } else {
                  a2 = d2 + 8 | 0;
                  c2 = b[a2 >> 2] | 0;
                }
                b[a2 >> 2] = e3;
                b[c2 + 12 >> 2] = e3;
                b[e3 + 8 >> 2] = c2;
                b[e3 + 12 >> 2] = d2;
              }
              b[5831] = h;
              b[5834] = f;
              v3 = i;
              S = w2;
              return v3 | 0;
            }
            g2 = b[5830] | 0;
            if (g2) {
              d2 = (g2 & 0 - g2) + -1 | 0;
              f = d2 >>> 12 & 16;
              d2 = d2 >>> f;
              e3 = d2 >>> 5 & 8;
              d2 = d2 >>> e3;
              h = d2 >>> 2 & 4;
              d2 = d2 >>> h;
              i = d2 >>> 1 & 2;
              d2 = d2 >>> i;
              j = d2 >>> 1 & 1;
              j = b[23620 + ((e3 | f | h | i | j) + (d2 >>> j) << 2) >> 2] | 0;
              d2 = j;
              i = j;
              j = (b[j + 4 >> 2] & -8) - k | 0;
              while (1) {
                a2 = b[d2 + 16 >> 2] | 0;
                if (!a2) {
                  a2 = b[d2 + 20 >> 2] | 0;
                  if (!a2) {
                    break;
                  }
                }
                h = (b[a2 + 4 >> 2] & -8) - k | 0;
                f = h >>> 0 < j >>> 0;
                d2 = a2;
                i = f ? a2 : i;
                j = f ? h : j;
              }
              h = i + k | 0;
              if (h >>> 0 > i >>> 0) {
                f = b[i + 24 >> 2] | 0;
                c2 = b[i + 12 >> 2] | 0;
                do {
                  if ((c2 | 0) == (i | 0)) {
                    a2 = i + 20 | 0;
                    c2 = b[a2 >> 2] | 0;
                    if (!c2) {
                      a2 = i + 16 | 0;
                      c2 = b[a2 >> 2] | 0;
                      if (!c2) {
                        d2 = 0;
                        break;
                      }
                    }
                    while (1) {
                      e3 = c2 + 20 | 0;
                      d2 = b[e3 >> 2] | 0;
                      if (!d2) {
                        e3 = c2 + 16 | 0;
                        d2 = b[e3 >> 2] | 0;
                        if (!d2) {
                          break;
                        } else {
                          c2 = d2;
                          a2 = e3;
                        }
                      } else {
                        c2 = d2;
                        a2 = e3;
                      }
                    }
                    b[a2 >> 2] = 0;
                    d2 = c2;
                  } else {
                    d2 = b[i + 8 >> 2] | 0;
                    b[d2 + 12 >> 2] = c2;
                    b[c2 + 8 >> 2] = d2;
                    d2 = c2;
                  }
                } while (0);
                do {
                  if (f | 0) {
                    c2 = b[i + 28 >> 2] | 0;
                    a2 = 23620 + (c2 << 2) | 0;
                    if ((i | 0) == (b[a2 >> 2] | 0)) {
                      b[a2 >> 2] = d2;
                      if (!d2) {
                        b[5830] = g2 & ~(1 << c2);
                        break;
                      }
                    } else {
                      v3 = f + 16 | 0;
                      b[((b[v3 >> 2] | 0) == (i | 0) ? v3 : f + 20 | 0) >> 2] = d2;
                      if (!d2) {
                        break;
                      }
                    }
                    b[d2 + 24 >> 2] = f;
                    c2 = b[i + 16 >> 2] | 0;
                    if (c2 | 0) {
                      b[d2 + 16 >> 2] = c2;
                      b[c2 + 24 >> 2] = d2;
                    }
                    c2 = b[i + 20 >> 2] | 0;
                    if (c2 | 0) {
                      b[d2 + 20 >> 2] = c2;
                      b[c2 + 24 >> 2] = d2;
                    }
                  }
                } while (0);
                if (j >>> 0 < 16) {
                  v3 = j + k | 0;
                  b[i + 4 >> 2] = v3 | 3;
                  v3 = i + v3 + 4 | 0;
                  b[v3 >> 2] = b[v3 >> 2] | 1;
                } else {
                  b[i + 4 >> 2] = k | 3;
                  b[h + 4 >> 2] = j | 1;
                  b[h + j >> 2] = j;
                  if (l | 0) {
                    e3 = b[5834] | 0;
                    c2 = l >>> 3;
                    d2 = 23356 + (c2 << 1 << 2) | 0;
                    c2 = 1 << c2;
                    if (!(c2 & m)) {
                      b[5829] = c2 | m;
                      c2 = d2;
                      a2 = d2 + 8 | 0;
                    } else {
                      a2 = d2 + 8 | 0;
                      c2 = b[a2 >> 2] | 0;
                    }
                    b[a2 >> 2] = e3;
                    b[c2 + 12 >> 2] = e3;
                    b[e3 + 8 >> 2] = c2;
                    b[e3 + 12 >> 2] = d2;
                  }
                  b[5831] = j;
                  b[5834] = h;
                }
                v3 = i + 8 | 0;
                S = w2;
                return v3 | 0;
              } else {
                m = k;
              }
            } else {
              m = k;
            }
          } else {
            m = k;
          }
        } else if (a2 >>> 0 <= 4294967231) {
          a2 = a2 + 11 | 0;
          k = a2 & -8;
          e3 = b[5830] | 0;
          if (e3) {
            f = 0 - k | 0;
            a2 = a2 >>> 8;
            if (a2) {
              if (k >>> 0 > 16777215) {
                j = 31;
              } else {
                m = (a2 + 1048320 | 0) >>> 16 & 8;
                q2 = a2 << m;
                i = (q2 + 520192 | 0) >>> 16 & 4;
                q2 = q2 << i;
                j = (q2 + 245760 | 0) >>> 16 & 2;
                j = 14 - (i | m | j) + (q2 << j >>> 15) | 0;
                j = k >>> (j + 7 | 0) & 1 | j << 1;
              }
            } else {
              j = 0;
            }
            d2 = b[23620 + (j << 2) >> 2] | 0;
            a:
              do {
                if (!d2) {
                  d2 = 0;
                  a2 = 0;
                  q2 = 61;
                } else {
                  a2 = 0;
                  i = k << ((j | 0) == 31 ? 0 : 25 - (j >>> 1) | 0);
                  g2 = 0;
                  while (1) {
                    h = (b[d2 + 4 >> 2] & -8) - k | 0;
                    if (h >>> 0 < f >>> 0) {
                      if (!h) {
                        a2 = d2;
                        f = 0;
                        q2 = 65;
                        break a;
                      } else {
                        a2 = d2;
                        f = h;
                      }
                    }
                    q2 = b[d2 + 20 >> 2] | 0;
                    d2 = b[d2 + 16 + (i >>> 31 << 2) >> 2] | 0;
                    g2 = (q2 | 0) == 0 | (q2 | 0) == (d2 | 0) ? g2 : q2;
                    if (!d2) {
                      d2 = g2;
                      q2 = 61;
                      break;
                    } else {
                      i = i << 1;
                    }
                  }
                }
              } while (0);
            if ((q2 | 0) == 61) {
              if ((d2 | 0) == 0 & (a2 | 0) == 0) {
                a2 = 2 << j;
                a2 = (a2 | 0 - a2) & e3;
                if (!a2) {
                  m = k;
                  break;
                }
                m = (a2 & 0 - a2) + -1 | 0;
                h = m >>> 12 & 16;
                m = m >>> h;
                g2 = m >>> 5 & 8;
                m = m >>> g2;
                i = m >>> 2 & 4;
                m = m >>> i;
                j = m >>> 1 & 2;
                m = m >>> j;
                d2 = m >>> 1 & 1;
                a2 = 0;
                d2 = b[23620 + ((g2 | h | i | j | d2) + (m >>> d2) << 2) >> 2] | 0;
              }
              if (!d2) {
                i = a2;
                h = f;
              } else {
                q2 = 65;
              }
            }
            if ((q2 | 0) == 65) {
              g2 = d2;
              while (1) {
                m = (b[g2 + 4 >> 2] & -8) - k | 0;
                d2 = m >>> 0 < f >>> 0;
                f = d2 ? m : f;
                a2 = d2 ? g2 : a2;
                d2 = b[g2 + 16 >> 2] | 0;
                if (!d2) {
                  d2 = b[g2 + 20 >> 2] | 0;
                }
                if (!d2) {
                  i = a2;
                  h = f;
                  break;
                } else {
                  g2 = d2;
                }
              }
            }
            if (((i | 0) != 0 ? h >>> 0 < ((b[5831] | 0) - k | 0) >>> 0 : 0) ? (l = i + k | 0, l >>> 0 > i >>> 0) : 0) {
              g2 = b[i + 24 >> 2] | 0;
              c2 = b[i + 12 >> 2] | 0;
              do {
                if ((c2 | 0) == (i | 0)) {
                  a2 = i + 20 | 0;
                  c2 = b[a2 >> 2] | 0;
                  if (!c2) {
                    a2 = i + 16 | 0;
                    c2 = b[a2 >> 2] | 0;
                    if (!c2) {
                      c2 = 0;
                      break;
                    }
                  }
                  while (1) {
                    f = c2 + 20 | 0;
                    d2 = b[f >> 2] | 0;
                    if (!d2) {
                      f = c2 + 16 | 0;
                      d2 = b[f >> 2] | 0;
                      if (!d2) {
                        break;
                      } else {
                        c2 = d2;
                        a2 = f;
                      }
                    } else {
                      c2 = d2;
                      a2 = f;
                    }
                  }
                  b[a2 >> 2] = 0;
                } else {
                  v3 = b[i + 8 >> 2] | 0;
                  b[v3 + 12 >> 2] = c2;
                  b[c2 + 8 >> 2] = v3;
                }
              } while (0);
              do {
                if (g2) {
                  a2 = b[i + 28 >> 2] | 0;
                  d2 = 23620 + (a2 << 2) | 0;
                  if ((i | 0) == (b[d2 >> 2] | 0)) {
                    b[d2 >> 2] = c2;
                    if (!c2) {
                      e3 = e3 & ~(1 << a2);
                      b[5830] = e3;
                      break;
                    }
                  } else {
                    v3 = g2 + 16 | 0;
                    b[((b[v3 >> 2] | 0) == (i | 0) ? v3 : g2 + 20 | 0) >> 2] = c2;
                    if (!c2) {
                      break;
                    }
                  }
                  b[c2 + 24 >> 2] = g2;
                  a2 = b[i + 16 >> 2] | 0;
                  if (a2 | 0) {
                    b[c2 + 16 >> 2] = a2;
                    b[a2 + 24 >> 2] = c2;
                  }
                  a2 = b[i + 20 >> 2] | 0;
                  if (a2) {
                    b[c2 + 20 >> 2] = a2;
                    b[a2 + 24 >> 2] = c2;
                  }
                }
              } while (0);
              b:
                do {
                  if (h >>> 0 < 16) {
                    v3 = h + k | 0;
                    b[i + 4 >> 2] = v3 | 3;
                    v3 = i + v3 + 4 | 0;
                    b[v3 >> 2] = b[v3 >> 2] | 1;
                  } else {
                    b[i + 4 >> 2] = k | 3;
                    b[l + 4 >> 2] = h | 1;
                    b[l + h >> 2] = h;
                    c2 = h >>> 3;
                    if (h >>> 0 < 256) {
                      d2 = 23356 + (c2 << 1 << 2) | 0;
                      a2 = b[5829] | 0;
                      c2 = 1 << c2;
                      if (!(a2 & c2)) {
                        b[5829] = a2 | c2;
                        c2 = d2;
                        a2 = d2 + 8 | 0;
                      } else {
                        a2 = d2 + 8 | 0;
                        c2 = b[a2 >> 2] | 0;
                      }
                      b[a2 >> 2] = l;
                      b[c2 + 12 >> 2] = l;
                      b[l + 8 >> 2] = c2;
                      b[l + 12 >> 2] = d2;
                      break;
                    }
                    c2 = h >>> 8;
                    if (c2) {
                      if (h >>> 0 > 16777215) {
                        d2 = 31;
                      } else {
                        u5 = (c2 + 1048320 | 0) >>> 16 & 8;
                        v3 = c2 << u5;
                        t4 = (v3 + 520192 | 0) >>> 16 & 4;
                        v3 = v3 << t4;
                        d2 = (v3 + 245760 | 0) >>> 16 & 2;
                        d2 = 14 - (t4 | u5 | d2) + (v3 << d2 >>> 15) | 0;
                        d2 = h >>> (d2 + 7 | 0) & 1 | d2 << 1;
                      }
                    } else {
                      d2 = 0;
                    }
                    c2 = 23620 + (d2 << 2) | 0;
                    b[l + 28 >> 2] = d2;
                    a2 = l + 16 | 0;
                    b[a2 + 4 >> 2] = 0;
                    b[a2 >> 2] = 0;
                    a2 = 1 << d2;
                    if (!(e3 & a2)) {
                      b[5830] = e3 | a2;
                      b[c2 >> 2] = l;
                      b[l + 24 >> 2] = c2;
                      b[l + 12 >> 2] = l;
                      b[l + 8 >> 2] = l;
                      break;
                    }
                    c2 = b[c2 >> 2] | 0;
                    c:
                      do {
                        if ((b[c2 + 4 >> 2] & -8 | 0) != (h | 0)) {
                          e3 = h << ((d2 | 0) == 31 ? 0 : 25 - (d2 >>> 1) | 0);
                          while (1) {
                            d2 = c2 + 16 + (e3 >>> 31 << 2) | 0;
                            a2 = b[d2 >> 2] | 0;
                            if (!a2) {
                              break;
                            }
                            if ((b[a2 + 4 >> 2] & -8 | 0) == (h | 0)) {
                              c2 = a2;
                              break c;
                            } else {
                              e3 = e3 << 1;
                              c2 = a2;
                            }
                          }
                          b[d2 >> 2] = l;
                          b[l + 24 >> 2] = c2;
                          b[l + 12 >> 2] = l;
                          b[l + 8 >> 2] = l;
                          break b;
                        }
                      } while (0);
                    u5 = c2 + 8 | 0;
                    v3 = b[u5 >> 2] | 0;
                    b[v3 + 12 >> 2] = l;
                    b[u5 >> 2] = l;
                    b[l + 8 >> 2] = v3;
                    b[l + 12 >> 2] = c2;
                    b[l + 24 >> 2] = 0;
                  }
                } while (0);
              v3 = i + 8 | 0;
              S = w2;
              return v3 | 0;
            } else {
              m = k;
            }
          } else {
            m = k;
          }
        } else {
          m = -1;
        }
      } while (0);
      d2 = b[5831] | 0;
      if (d2 >>> 0 >= m >>> 0) {
        c2 = d2 - m | 0;
        a2 = b[5834] | 0;
        if (c2 >>> 0 > 15) {
          v3 = a2 + m | 0;
          b[5834] = v3;
          b[5831] = c2;
          b[v3 + 4 >> 2] = c2 | 1;
          b[a2 + d2 >> 2] = c2;
          b[a2 + 4 >> 2] = m | 3;
        } else {
          b[5831] = 0;
          b[5834] = 0;
          b[a2 + 4 >> 2] = d2 | 3;
          v3 = a2 + d2 + 4 | 0;
          b[v3 >> 2] = b[v3 >> 2] | 1;
        }
        v3 = a2 + 8 | 0;
        S = w2;
        return v3 | 0;
      }
      h = b[5832] | 0;
      if (h >>> 0 > m >>> 0) {
        t4 = h - m | 0;
        b[5832] = t4;
        v3 = b[5835] | 0;
        u5 = v3 + m | 0;
        b[5835] = u5;
        b[u5 + 4 >> 2] = t4 | 1;
        b[v3 + 4 >> 2] = m | 3;
        v3 = v3 + 8 | 0;
        S = w2;
        return v3 | 0;
      }
      if (!(b[5947] | 0)) {
        b[5949] = 4096;
        b[5948] = 4096;
        b[5950] = -1;
        b[5951] = -1;
        b[5952] = 0;
        b[5940] = 0;
        b[5947] = n & -16 ^ 1431655768;
        a2 = 4096;
      } else {
        a2 = b[5949] | 0;
      }
      i = m + 48 | 0;
      j = m + 47 | 0;
      g2 = a2 + j | 0;
      f = 0 - a2 | 0;
      k = g2 & f;
      if (k >>> 0 <= m >>> 0) {
        v3 = 0;
        S = w2;
        return v3 | 0;
      }
      a2 = b[5939] | 0;
      if (a2 | 0 ? (l = b[5937] | 0, n = l + k | 0, n >>> 0 <= l >>> 0 | n >>> 0 > a2 >>> 0) : 0) {
        v3 = 0;
        S = w2;
        return v3 | 0;
      }
      d:
        do {
          if (!(b[5940] & 4)) {
            d2 = b[5835] | 0;
            e:
              do {
                if (d2) {
                  e3 = 23764;
                  while (1) {
                    n = b[e3 >> 2] | 0;
                    if (n >>> 0 <= d2 >>> 0 ? (n + (b[e3 + 4 >> 2] | 0) | 0) >>> 0 > d2 >>> 0 : 0) {
                      break;
                    }
                    a2 = b[e3 + 8 >> 2] | 0;
                    if (!a2) {
                      q2 = 128;
                      break e;
                    } else {
                      e3 = a2;
                    }
                  }
                  c2 = g2 - h & f;
                  if (c2 >>> 0 < 2147483647) {
                    a2 = jd(c2 | 0) | 0;
                    if ((a2 | 0) == ((b[e3 >> 2] | 0) + (b[e3 + 4 >> 2] | 0) | 0)) {
                      if ((a2 | 0) != (-1 | 0)) {
                        h = c2;
                        g2 = a2;
                        q2 = 145;
                        break d;
                      }
                    } else {
                      e3 = a2;
                      q2 = 136;
                    }
                  } else {
                    c2 = 0;
                  }
                } else {
                  q2 = 128;
                }
              } while (0);
            do {
              if ((q2 | 0) == 128) {
                d2 = jd(0) | 0;
                if ((d2 | 0) != (-1 | 0) ? (c2 = d2, o = b[5948] | 0, p2 = o + -1 | 0, c2 = ((p2 & c2 | 0) == 0 ? 0 : (p2 + c2 & 0 - o) - c2 | 0) + k | 0, o = b[5937] | 0, p2 = c2 + o | 0, c2 >>> 0 > m >>> 0 & c2 >>> 0 < 2147483647) : 0) {
                  n = b[5939] | 0;
                  if (n | 0 ? p2 >>> 0 <= o >>> 0 | p2 >>> 0 > n >>> 0 : 0) {
                    c2 = 0;
                    break;
                  }
                  a2 = jd(c2 | 0) | 0;
                  if ((a2 | 0) == (d2 | 0)) {
                    h = c2;
                    g2 = d2;
                    q2 = 145;
                    break d;
                  } else {
                    e3 = a2;
                    q2 = 136;
                  }
                } else {
                  c2 = 0;
                }
              }
            } while (0);
            do {
              if ((q2 | 0) == 136) {
                d2 = 0 - c2 | 0;
                if (!(i >>> 0 > c2 >>> 0 & (c2 >>> 0 < 2147483647 & (e3 | 0) != (-1 | 0)))) {
                  if ((e3 | 0) == (-1 | 0)) {
                    c2 = 0;
                    break;
                  } else {
                    h = c2;
                    g2 = e3;
                    q2 = 145;
                    break d;
                  }
                }
                a2 = b[5949] | 0;
                a2 = j - c2 + a2 & 0 - a2;
                if (a2 >>> 0 >= 2147483647) {
                  h = c2;
                  g2 = e3;
                  q2 = 145;
                  break d;
                }
                if ((jd(a2 | 0) | 0) == (-1 | 0)) {
                  jd(d2 | 0) | 0;
                  c2 = 0;
                  break;
                } else {
                  h = a2 + c2 | 0;
                  g2 = e3;
                  q2 = 145;
                  break d;
                }
              }
            } while (0);
            b[5940] = b[5940] | 4;
            q2 = 143;
          } else {
            c2 = 0;
            q2 = 143;
          }
        } while (0);
      if (((q2 | 0) == 143 ? k >>> 0 < 2147483647 : 0) ? (t4 = jd(k | 0) | 0, p2 = jd(0) | 0, r2 = p2 - t4 | 0, s2 = r2 >>> 0 > (m + 40 | 0) >>> 0, !((t4 | 0) == (-1 | 0) | s2 ^ 1 | t4 >>> 0 < p2 >>> 0 & ((t4 | 0) != (-1 | 0) & (p2 | 0) != (-1 | 0)) ^ 1)) : 0) {
        h = s2 ? r2 : c2;
        g2 = t4;
        q2 = 145;
      }
      if ((q2 | 0) == 145) {
        c2 = (b[5937] | 0) + h | 0;
        b[5937] = c2;
        if (c2 >>> 0 > (b[5938] | 0) >>> 0) {
          b[5938] = c2;
        }
        j = b[5835] | 0;
        f:
          do {
            if (j) {
              c2 = 23764;
              while (1) {
                a2 = b[c2 >> 2] | 0;
                d2 = b[c2 + 4 >> 2] | 0;
                if ((g2 | 0) == (a2 + d2 | 0)) {
                  q2 = 154;
                  break;
                }
                e3 = b[c2 + 8 >> 2] | 0;
                if (!e3) {
                  break;
                } else {
                  c2 = e3;
                }
              }
              if (((q2 | 0) == 154 ? (u5 = c2 + 4 | 0, (b[c2 + 12 >> 2] & 8 | 0) == 0) : 0) ? g2 >>> 0 > j >>> 0 & a2 >>> 0 <= j >>> 0 : 0) {
                b[u5 >> 2] = d2 + h;
                v3 = (b[5832] | 0) + h | 0;
                t4 = j + 8 | 0;
                t4 = (t4 & 7 | 0) == 0 ? 0 : 0 - t4 & 7;
                u5 = j + t4 | 0;
                t4 = v3 - t4 | 0;
                b[5835] = u5;
                b[5832] = t4;
                b[u5 + 4 >> 2] = t4 | 1;
                b[j + v3 + 4 >> 2] = 40;
                b[5836] = b[5951];
                break;
              }
              if (g2 >>> 0 < (b[5833] | 0) >>> 0) {
                b[5833] = g2;
              }
              d2 = g2 + h | 0;
              c2 = 23764;
              while (1) {
                if ((b[c2 >> 2] | 0) == (d2 | 0)) {
                  q2 = 162;
                  break;
                }
                a2 = b[c2 + 8 >> 2] | 0;
                if (!a2) {
                  break;
                } else {
                  c2 = a2;
                }
              }
              if ((q2 | 0) == 162 ? (b[c2 + 12 >> 2] & 8 | 0) == 0 : 0) {
                b[c2 >> 2] = g2;
                l = c2 + 4 | 0;
                b[l >> 2] = (b[l >> 2] | 0) + h;
                l = g2 + 8 | 0;
                l = g2 + ((l & 7 | 0) == 0 ? 0 : 0 - l & 7) | 0;
                c2 = d2 + 8 | 0;
                c2 = d2 + ((c2 & 7 | 0) == 0 ? 0 : 0 - c2 & 7) | 0;
                k = l + m | 0;
                i = c2 - l - m | 0;
                b[l + 4 >> 2] = m | 3;
                g:
                  do {
                    if ((j | 0) == (c2 | 0)) {
                      v3 = (b[5832] | 0) + i | 0;
                      b[5832] = v3;
                      b[5835] = k;
                      b[k + 4 >> 2] = v3 | 1;
                    } else {
                      if ((b[5834] | 0) == (c2 | 0)) {
                        v3 = (b[5831] | 0) + i | 0;
                        b[5831] = v3;
                        b[5834] = k;
                        b[k + 4 >> 2] = v3 | 1;
                        b[k + v3 >> 2] = v3;
                        break;
                      }
                      a2 = b[c2 + 4 >> 2] | 0;
                      if ((a2 & 3 | 0) == 1) {
                        h = a2 & -8;
                        e3 = a2 >>> 3;
                        h:
                          do {
                            if (a2 >>> 0 < 256) {
                              a2 = b[c2 + 8 >> 2] | 0;
                              d2 = b[c2 + 12 >> 2] | 0;
                              if ((d2 | 0) == (a2 | 0)) {
                                b[5829] = b[5829] & ~(1 << e3);
                                break;
                              } else {
                                b[a2 + 12 >> 2] = d2;
                                b[d2 + 8 >> 2] = a2;
                                break;
                              }
                            } else {
                              g2 = b[c2 + 24 >> 2] | 0;
                              a2 = b[c2 + 12 >> 2] | 0;
                              do {
                                if ((a2 | 0) == (c2 | 0)) {
                                  d2 = c2 + 16 | 0;
                                  e3 = d2 + 4 | 0;
                                  a2 = b[e3 >> 2] | 0;
                                  if (!a2) {
                                    a2 = b[d2 >> 2] | 0;
                                    if (!a2) {
                                      a2 = 0;
                                      break;
                                    }
                                  } else {
                                    d2 = e3;
                                  }
                                  while (1) {
                                    f = a2 + 20 | 0;
                                    e3 = b[f >> 2] | 0;
                                    if (!e3) {
                                      f = a2 + 16 | 0;
                                      e3 = b[f >> 2] | 0;
                                      if (!e3) {
                                        break;
                                      } else {
                                        a2 = e3;
                                        d2 = f;
                                      }
                                    } else {
                                      a2 = e3;
                                      d2 = f;
                                    }
                                  }
                                  b[d2 >> 2] = 0;
                                } else {
                                  v3 = b[c2 + 8 >> 2] | 0;
                                  b[v3 + 12 >> 2] = a2;
                                  b[a2 + 8 >> 2] = v3;
                                }
                              } while (0);
                              if (!g2) {
                                break;
                              }
                              d2 = b[c2 + 28 >> 2] | 0;
                              e3 = 23620 + (d2 << 2) | 0;
                              do {
                                if ((b[e3 >> 2] | 0) != (c2 | 0)) {
                                  v3 = g2 + 16 | 0;
                                  b[((b[v3 >> 2] | 0) == (c2 | 0) ? v3 : g2 + 20 | 0) >> 2] = a2;
                                  if (!a2) {
                                    break h;
                                  }
                                } else {
                                  b[e3 >> 2] = a2;
                                  if (a2 | 0) {
                                    break;
                                  }
                                  b[5830] = b[5830] & ~(1 << d2);
                                  break h;
                                }
                              } while (0);
                              b[a2 + 24 >> 2] = g2;
                              d2 = c2 + 16 | 0;
                              e3 = b[d2 >> 2] | 0;
                              if (e3 | 0) {
                                b[a2 + 16 >> 2] = e3;
                                b[e3 + 24 >> 2] = a2;
                              }
                              d2 = b[d2 + 4 >> 2] | 0;
                              if (!d2) {
                                break;
                              }
                              b[a2 + 20 >> 2] = d2;
                              b[d2 + 24 >> 2] = a2;
                            }
                          } while (0);
                        c2 = c2 + h | 0;
                        f = h + i | 0;
                      } else {
                        f = i;
                      }
                      c2 = c2 + 4 | 0;
                      b[c2 >> 2] = b[c2 >> 2] & -2;
                      b[k + 4 >> 2] = f | 1;
                      b[k + f >> 2] = f;
                      c2 = f >>> 3;
                      if (f >>> 0 < 256) {
                        d2 = 23356 + (c2 << 1 << 2) | 0;
                        a2 = b[5829] | 0;
                        c2 = 1 << c2;
                        if (!(a2 & c2)) {
                          b[5829] = a2 | c2;
                          c2 = d2;
                          a2 = d2 + 8 | 0;
                        } else {
                          a2 = d2 + 8 | 0;
                          c2 = b[a2 >> 2] | 0;
                        }
                        b[a2 >> 2] = k;
                        b[c2 + 12 >> 2] = k;
                        b[k + 8 >> 2] = c2;
                        b[k + 12 >> 2] = d2;
                        break;
                      }
                      c2 = f >>> 8;
                      do {
                        if (!c2) {
                          e3 = 0;
                        } else {
                          if (f >>> 0 > 16777215) {
                            e3 = 31;
                            break;
                          }
                          u5 = (c2 + 1048320 | 0) >>> 16 & 8;
                          v3 = c2 << u5;
                          t4 = (v3 + 520192 | 0) >>> 16 & 4;
                          v3 = v3 << t4;
                          e3 = (v3 + 245760 | 0) >>> 16 & 2;
                          e3 = 14 - (t4 | u5 | e3) + (v3 << e3 >>> 15) | 0;
                          e3 = f >>> (e3 + 7 | 0) & 1 | e3 << 1;
                        }
                      } while (0);
                      c2 = 23620 + (e3 << 2) | 0;
                      b[k + 28 >> 2] = e3;
                      a2 = k + 16 | 0;
                      b[a2 + 4 >> 2] = 0;
                      b[a2 >> 2] = 0;
                      a2 = b[5830] | 0;
                      d2 = 1 << e3;
                      if (!(a2 & d2)) {
                        b[5830] = a2 | d2;
                        b[c2 >> 2] = k;
                        b[k + 24 >> 2] = c2;
                        b[k + 12 >> 2] = k;
                        b[k + 8 >> 2] = k;
                        break;
                      }
                      c2 = b[c2 >> 2] | 0;
                      i:
                        do {
                          if ((b[c2 + 4 >> 2] & -8 | 0) != (f | 0)) {
                            e3 = f << ((e3 | 0) == 31 ? 0 : 25 - (e3 >>> 1) | 0);
                            while (1) {
                              d2 = c2 + 16 + (e3 >>> 31 << 2) | 0;
                              a2 = b[d2 >> 2] | 0;
                              if (!a2) {
                                break;
                              }
                              if ((b[a2 + 4 >> 2] & -8 | 0) == (f | 0)) {
                                c2 = a2;
                                break i;
                              } else {
                                e3 = e3 << 1;
                                c2 = a2;
                              }
                            }
                            b[d2 >> 2] = k;
                            b[k + 24 >> 2] = c2;
                            b[k + 12 >> 2] = k;
                            b[k + 8 >> 2] = k;
                            break g;
                          }
                        } while (0);
                      u5 = c2 + 8 | 0;
                      v3 = b[u5 >> 2] | 0;
                      b[v3 + 12 >> 2] = k;
                      b[u5 >> 2] = k;
                      b[k + 8 >> 2] = v3;
                      b[k + 12 >> 2] = c2;
                      b[k + 24 >> 2] = 0;
                    }
                  } while (0);
                v3 = l + 8 | 0;
                S = w2;
                return v3 | 0;
              }
              c2 = 23764;
              while (1) {
                a2 = b[c2 >> 2] | 0;
                if (a2 >>> 0 <= j >>> 0 ? (v3 = a2 + (b[c2 + 4 >> 2] | 0) | 0, v3 >>> 0 > j >>> 0) : 0) {
                  break;
                }
                c2 = b[c2 + 8 >> 2] | 0;
              }
              f = v3 + -47 | 0;
              a2 = f + 8 | 0;
              a2 = f + ((a2 & 7 | 0) == 0 ? 0 : 0 - a2 & 7) | 0;
              f = j + 16 | 0;
              a2 = a2 >>> 0 < f >>> 0 ? j : a2;
              c2 = a2 + 8 | 0;
              d2 = h + -40 | 0;
              t4 = g2 + 8 | 0;
              t4 = (t4 & 7 | 0) == 0 ? 0 : 0 - t4 & 7;
              u5 = g2 + t4 | 0;
              t4 = d2 - t4 | 0;
              b[5835] = u5;
              b[5832] = t4;
              b[u5 + 4 >> 2] = t4 | 1;
              b[g2 + d2 + 4 >> 2] = 40;
              b[5836] = b[5951];
              d2 = a2 + 4 | 0;
              b[d2 >> 2] = 27;
              b[c2 >> 2] = b[5941];
              b[c2 + 4 >> 2] = b[5942];
              b[c2 + 8 >> 2] = b[5943];
              b[c2 + 12 >> 2] = b[5944];
              b[5941] = g2;
              b[5942] = h;
              b[5944] = 0;
              b[5943] = c2;
              c2 = a2 + 24 | 0;
              do {
                u5 = c2;
                c2 = c2 + 4 | 0;
                b[c2 >> 2] = 7;
              } while ((u5 + 8 | 0) >>> 0 < v3 >>> 0);
              if ((a2 | 0) != (j | 0)) {
                g2 = a2 - j | 0;
                b[d2 >> 2] = b[d2 >> 2] & -2;
                b[j + 4 >> 2] = g2 | 1;
                b[a2 >> 2] = g2;
                c2 = g2 >>> 3;
                if (g2 >>> 0 < 256) {
                  d2 = 23356 + (c2 << 1 << 2) | 0;
                  a2 = b[5829] | 0;
                  c2 = 1 << c2;
                  if (!(a2 & c2)) {
                    b[5829] = a2 | c2;
                    c2 = d2;
                    a2 = d2 + 8 | 0;
                  } else {
                    a2 = d2 + 8 | 0;
                    c2 = b[a2 >> 2] | 0;
                  }
                  b[a2 >> 2] = j;
                  b[c2 + 12 >> 2] = j;
                  b[j + 8 >> 2] = c2;
                  b[j + 12 >> 2] = d2;
                  break;
                }
                c2 = g2 >>> 8;
                if (c2) {
                  if (g2 >>> 0 > 16777215) {
                    e3 = 31;
                  } else {
                    u5 = (c2 + 1048320 | 0) >>> 16 & 8;
                    v3 = c2 << u5;
                    t4 = (v3 + 520192 | 0) >>> 16 & 4;
                    v3 = v3 << t4;
                    e3 = (v3 + 245760 | 0) >>> 16 & 2;
                    e3 = 14 - (t4 | u5 | e3) + (v3 << e3 >>> 15) | 0;
                    e3 = g2 >>> (e3 + 7 | 0) & 1 | e3 << 1;
                  }
                } else {
                  e3 = 0;
                }
                d2 = 23620 + (e3 << 2) | 0;
                b[j + 28 >> 2] = e3;
                b[j + 20 >> 2] = 0;
                b[f >> 2] = 0;
                c2 = b[5830] | 0;
                a2 = 1 << e3;
                if (!(c2 & a2)) {
                  b[5830] = c2 | a2;
                  b[d2 >> 2] = j;
                  b[j + 24 >> 2] = d2;
                  b[j + 12 >> 2] = j;
                  b[j + 8 >> 2] = j;
                  break;
                }
                c2 = b[d2 >> 2] | 0;
                j:
                  do {
                    if ((b[c2 + 4 >> 2] & -8 | 0) != (g2 | 0)) {
                      e3 = g2 << ((e3 | 0) == 31 ? 0 : 25 - (e3 >>> 1) | 0);
                      while (1) {
                        d2 = c2 + 16 + (e3 >>> 31 << 2) | 0;
                        a2 = b[d2 >> 2] | 0;
                        if (!a2) {
                          break;
                        }
                        if ((b[a2 + 4 >> 2] & -8 | 0) == (g2 | 0)) {
                          c2 = a2;
                          break j;
                        } else {
                          e3 = e3 << 1;
                          c2 = a2;
                        }
                      }
                      b[d2 >> 2] = j;
                      b[j + 24 >> 2] = c2;
                      b[j + 12 >> 2] = j;
                      b[j + 8 >> 2] = j;
                      break f;
                    }
                  } while (0);
                u5 = c2 + 8 | 0;
                v3 = b[u5 >> 2] | 0;
                b[v3 + 12 >> 2] = j;
                b[u5 >> 2] = j;
                b[j + 8 >> 2] = v3;
                b[j + 12 >> 2] = c2;
                b[j + 24 >> 2] = 0;
              }
            } else {
              v3 = b[5833] | 0;
              if ((v3 | 0) == 0 | g2 >>> 0 < v3 >>> 0) {
                b[5833] = g2;
              }
              b[5941] = g2;
              b[5942] = h;
              b[5944] = 0;
              b[5838] = b[5947];
              b[5837] = -1;
              b[5842] = 23356;
              b[5841] = 23356;
              b[5844] = 23364;
              b[5843] = 23364;
              b[5846] = 23372;
              b[5845] = 23372;
              b[5848] = 23380;
              b[5847] = 23380;
              b[5850] = 23388;
              b[5849] = 23388;
              b[5852] = 23396;
              b[5851] = 23396;
              b[5854] = 23404;
              b[5853] = 23404;
              b[5856] = 23412;
              b[5855] = 23412;
              b[5858] = 23420;
              b[5857] = 23420;
              b[5860] = 23428;
              b[5859] = 23428;
              b[5862] = 23436;
              b[5861] = 23436;
              b[5864] = 23444;
              b[5863] = 23444;
              b[5866] = 23452;
              b[5865] = 23452;
              b[5868] = 23460;
              b[5867] = 23460;
              b[5870] = 23468;
              b[5869] = 23468;
              b[5872] = 23476;
              b[5871] = 23476;
              b[5874] = 23484;
              b[5873] = 23484;
              b[5876] = 23492;
              b[5875] = 23492;
              b[5878] = 23500;
              b[5877] = 23500;
              b[5880] = 23508;
              b[5879] = 23508;
              b[5882] = 23516;
              b[5881] = 23516;
              b[5884] = 23524;
              b[5883] = 23524;
              b[5886] = 23532;
              b[5885] = 23532;
              b[5888] = 23540;
              b[5887] = 23540;
              b[5890] = 23548;
              b[5889] = 23548;
              b[5892] = 23556;
              b[5891] = 23556;
              b[5894] = 23564;
              b[5893] = 23564;
              b[5896] = 23572;
              b[5895] = 23572;
              b[5898] = 23580;
              b[5897] = 23580;
              b[5900] = 23588;
              b[5899] = 23588;
              b[5902] = 23596;
              b[5901] = 23596;
              b[5904] = 23604;
              b[5903] = 23604;
              v3 = h + -40 | 0;
              t4 = g2 + 8 | 0;
              t4 = (t4 & 7 | 0) == 0 ? 0 : 0 - t4 & 7;
              u5 = g2 + t4 | 0;
              t4 = v3 - t4 | 0;
              b[5835] = u5;
              b[5832] = t4;
              b[u5 + 4 >> 2] = t4 | 1;
              b[g2 + v3 + 4 >> 2] = 40;
              b[5836] = b[5951];
            }
          } while (0);
        c2 = b[5832] | 0;
        if (c2 >>> 0 > m >>> 0) {
          t4 = c2 - m | 0;
          b[5832] = t4;
          v3 = b[5835] | 0;
          u5 = v3 + m | 0;
          b[5835] = u5;
          b[u5 + 4 >> 2] = t4 | 1;
          b[v3 + 4 >> 2] = m | 3;
          v3 = v3 + 8 | 0;
          S = w2;
          return v3 | 0;
        }
      }
      v3 = Tc() | 0;
      b[v3 >> 2] = 12;
      v3 = 0;
      S = w2;
      return v3 | 0;
    }
    function Xc(a2) {
      a2 = a2 | 0;
      var c2 = 0, d2 = 0, e3 = 0, f = 0, g2 = 0, h = 0, i = 0, j = 0;
      if (!a2) {
        return;
      }
      d2 = a2 + -8 | 0;
      f = b[5833] | 0;
      a2 = b[a2 + -4 >> 2] | 0;
      c2 = a2 & -8;
      j = d2 + c2 | 0;
      do {
        if (!(a2 & 1)) {
          e3 = b[d2 >> 2] | 0;
          if (!(a2 & 3)) {
            return;
          }
          h = d2 + (0 - e3) | 0;
          g2 = e3 + c2 | 0;
          if (h >>> 0 < f >>> 0) {
            return;
          }
          if ((b[5834] | 0) == (h | 0)) {
            a2 = j + 4 | 0;
            c2 = b[a2 >> 2] | 0;
            if ((c2 & 3 | 0) != 3) {
              i = h;
              c2 = g2;
              break;
            }
            b[5831] = g2;
            b[a2 >> 2] = c2 & -2;
            b[h + 4 >> 2] = g2 | 1;
            b[h + g2 >> 2] = g2;
            return;
          }
          d2 = e3 >>> 3;
          if (e3 >>> 0 < 256) {
            a2 = b[h + 8 >> 2] | 0;
            c2 = b[h + 12 >> 2] | 0;
            if ((c2 | 0) == (a2 | 0)) {
              b[5829] = b[5829] & ~(1 << d2);
              i = h;
              c2 = g2;
              break;
            } else {
              b[a2 + 12 >> 2] = c2;
              b[c2 + 8 >> 2] = a2;
              i = h;
              c2 = g2;
              break;
            }
          }
          f = b[h + 24 >> 2] | 0;
          a2 = b[h + 12 >> 2] | 0;
          do {
            if ((a2 | 0) == (h | 0)) {
              c2 = h + 16 | 0;
              d2 = c2 + 4 | 0;
              a2 = b[d2 >> 2] | 0;
              if (!a2) {
                a2 = b[c2 >> 2] | 0;
                if (!a2) {
                  a2 = 0;
                  break;
                }
              } else {
                c2 = d2;
              }
              while (1) {
                e3 = a2 + 20 | 0;
                d2 = b[e3 >> 2] | 0;
                if (!d2) {
                  e3 = a2 + 16 | 0;
                  d2 = b[e3 >> 2] | 0;
                  if (!d2) {
                    break;
                  } else {
                    a2 = d2;
                    c2 = e3;
                  }
                } else {
                  a2 = d2;
                  c2 = e3;
                }
              }
              b[c2 >> 2] = 0;
            } else {
              i = b[h + 8 >> 2] | 0;
              b[i + 12 >> 2] = a2;
              b[a2 + 8 >> 2] = i;
            }
          } while (0);
          if (f) {
            c2 = b[h + 28 >> 2] | 0;
            d2 = 23620 + (c2 << 2) | 0;
            if ((b[d2 >> 2] | 0) == (h | 0)) {
              b[d2 >> 2] = a2;
              if (!a2) {
                b[5830] = b[5830] & ~(1 << c2);
                i = h;
                c2 = g2;
                break;
              }
            } else {
              i = f + 16 | 0;
              b[((b[i >> 2] | 0) == (h | 0) ? i : f + 20 | 0) >> 2] = a2;
              if (!a2) {
                i = h;
                c2 = g2;
                break;
              }
            }
            b[a2 + 24 >> 2] = f;
            c2 = h + 16 | 0;
            d2 = b[c2 >> 2] | 0;
            if (d2 | 0) {
              b[a2 + 16 >> 2] = d2;
              b[d2 + 24 >> 2] = a2;
            }
            c2 = b[c2 + 4 >> 2] | 0;
            if (c2) {
              b[a2 + 20 >> 2] = c2;
              b[c2 + 24 >> 2] = a2;
              i = h;
              c2 = g2;
            } else {
              i = h;
              c2 = g2;
            }
          } else {
            i = h;
            c2 = g2;
          }
        } else {
          i = d2;
          h = d2;
        }
      } while (0);
      if (h >>> 0 >= j >>> 0) {
        return;
      }
      a2 = j + 4 | 0;
      e3 = b[a2 >> 2] | 0;
      if (!(e3 & 1)) {
        return;
      }
      if (!(e3 & 2)) {
        if ((b[5835] | 0) == (j | 0)) {
          j = (b[5832] | 0) + c2 | 0;
          b[5832] = j;
          b[5835] = i;
          b[i + 4 >> 2] = j | 1;
          if ((i | 0) != (b[5834] | 0)) {
            return;
          }
          b[5834] = 0;
          b[5831] = 0;
          return;
        }
        if ((b[5834] | 0) == (j | 0)) {
          j = (b[5831] | 0) + c2 | 0;
          b[5831] = j;
          b[5834] = h;
          b[i + 4 >> 2] = j | 1;
          b[h + j >> 2] = j;
          return;
        }
        f = (e3 & -8) + c2 | 0;
        d2 = e3 >>> 3;
        do {
          if (e3 >>> 0 < 256) {
            c2 = b[j + 8 >> 2] | 0;
            a2 = b[j + 12 >> 2] | 0;
            if ((a2 | 0) == (c2 | 0)) {
              b[5829] = b[5829] & ~(1 << d2);
              break;
            } else {
              b[c2 + 12 >> 2] = a2;
              b[a2 + 8 >> 2] = c2;
              break;
            }
          } else {
            g2 = b[j + 24 >> 2] | 0;
            a2 = b[j + 12 >> 2] | 0;
            do {
              if ((a2 | 0) == (j | 0)) {
                c2 = j + 16 | 0;
                d2 = c2 + 4 | 0;
                a2 = b[d2 >> 2] | 0;
                if (!a2) {
                  a2 = b[c2 >> 2] | 0;
                  if (!a2) {
                    d2 = 0;
                    break;
                  }
                } else {
                  c2 = d2;
                }
                while (1) {
                  e3 = a2 + 20 | 0;
                  d2 = b[e3 >> 2] | 0;
                  if (!d2) {
                    e3 = a2 + 16 | 0;
                    d2 = b[e3 >> 2] | 0;
                    if (!d2) {
                      break;
                    } else {
                      a2 = d2;
                      c2 = e3;
                    }
                  } else {
                    a2 = d2;
                    c2 = e3;
                  }
                }
                b[c2 >> 2] = 0;
                d2 = a2;
              } else {
                d2 = b[j + 8 >> 2] | 0;
                b[d2 + 12 >> 2] = a2;
                b[a2 + 8 >> 2] = d2;
                d2 = a2;
              }
            } while (0);
            if (g2 | 0) {
              a2 = b[j + 28 >> 2] | 0;
              c2 = 23620 + (a2 << 2) | 0;
              if ((b[c2 >> 2] | 0) == (j | 0)) {
                b[c2 >> 2] = d2;
                if (!d2) {
                  b[5830] = b[5830] & ~(1 << a2);
                  break;
                }
              } else {
                e3 = g2 + 16 | 0;
                b[((b[e3 >> 2] | 0) == (j | 0) ? e3 : g2 + 20 | 0) >> 2] = d2;
                if (!d2) {
                  break;
                }
              }
              b[d2 + 24 >> 2] = g2;
              a2 = j + 16 | 0;
              c2 = b[a2 >> 2] | 0;
              if (c2 | 0) {
                b[d2 + 16 >> 2] = c2;
                b[c2 + 24 >> 2] = d2;
              }
              a2 = b[a2 + 4 >> 2] | 0;
              if (a2 | 0) {
                b[d2 + 20 >> 2] = a2;
                b[a2 + 24 >> 2] = d2;
              }
            }
          }
        } while (0);
        b[i + 4 >> 2] = f | 1;
        b[h + f >> 2] = f;
        if ((i | 0) == (b[5834] | 0)) {
          b[5831] = f;
          return;
        }
      } else {
        b[a2 >> 2] = e3 & -2;
        b[i + 4 >> 2] = c2 | 1;
        b[h + c2 >> 2] = c2;
        f = c2;
      }
      a2 = f >>> 3;
      if (f >>> 0 < 256) {
        d2 = 23356 + (a2 << 1 << 2) | 0;
        c2 = b[5829] | 0;
        a2 = 1 << a2;
        if (!(c2 & a2)) {
          b[5829] = c2 | a2;
          a2 = d2;
          c2 = d2 + 8 | 0;
        } else {
          c2 = d2 + 8 | 0;
          a2 = b[c2 >> 2] | 0;
        }
        b[c2 >> 2] = i;
        b[a2 + 12 >> 2] = i;
        b[i + 8 >> 2] = a2;
        b[i + 12 >> 2] = d2;
        return;
      }
      a2 = f >>> 8;
      if (a2) {
        if (f >>> 0 > 16777215) {
          e3 = 31;
        } else {
          h = (a2 + 1048320 | 0) >>> 16 & 8;
          j = a2 << h;
          g2 = (j + 520192 | 0) >>> 16 & 4;
          j = j << g2;
          e3 = (j + 245760 | 0) >>> 16 & 2;
          e3 = 14 - (g2 | h | e3) + (j << e3 >>> 15) | 0;
          e3 = f >>> (e3 + 7 | 0) & 1 | e3 << 1;
        }
      } else {
        e3 = 0;
      }
      a2 = 23620 + (e3 << 2) | 0;
      b[i + 28 >> 2] = e3;
      b[i + 20 >> 2] = 0;
      b[i + 16 >> 2] = 0;
      c2 = b[5830] | 0;
      d2 = 1 << e3;
      a:
        do {
          if (!(c2 & d2)) {
            b[5830] = c2 | d2;
            b[a2 >> 2] = i;
            b[i + 24 >> 2] = a2;
            b[i + 12 >> 2] = i;
            b[i + 8 >> 2] = i;
          } else {
            a2 = b[a2 >> 2] | 0;
            b:
              do {
                if ((b[a2 + 4 >> 2] & -8 | 0) != (f | 0)) {
                  e3 = f << ((e3 | 0) == 31 ? 0 : 25 - (e3 >>> 1) | 0);
                  while (1) {
                    d2 = a2 + 16 + (e3 >>> 31 << 2) | 0;
                    c2 = b[d2 >> 2] | 0;
                    if (!c2) {
                      break;
                    }
                    if ((b[c2 + 4 >> 2] & -8 | 0) == (f | 0)) {
                      a2 = c2;
                      break b;
                    } else {
                      e3 = e3 << 1;
                      a2 = c2;
                    }
                  }
                  b[d2 >> 2] = i;
                  b[i + 24 >> 2] = a2;
                  b[i + 12 >> 2] = i;
                  b[i + 8 >> 2] = i;
                  break a;
                }
              } while (0);
            h = a2 + 8 | 0;
            j = b[h >> 2] | 0;
            b[j + 12 >> 2] = i;
            b[h >> 2] = i;
            b[i + 8 >> 2] = j;
            b[i + 12 >> 2] = a2;
            b[i + 24 >> 2] = 0;
          }
        } while (0);
      j = (b[5837] | 0) + -1 | 0;
      b[5837] = j;
      if (j | 0) {
        return;
      }
      a2 = 23772;
      while (1) {
        a2 = b[a2 >> 2] | 0;
        if (!a2) {
          break;
        } else {
          a2 = a2 + 8 | 0;
        }
      }
      b[5837] = -1;
      return;
    }
    function Yc(a2, c2) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      var d2 = 0;
      if (a2) {
        d2 = B4(c2, a2) | 0;
        if ((c2 | a2) >>> 0 > 65535) {
          d2 = ((d2 >>> 0) / (a2 >>> 0) | 0 | 0) == (c2 | 0) ? d2 : -1;
        }
      } else {
        d2 = 0;
      }
      a2 = Wc(d2) | 0;
      if (!a2) {
        return a2 | 0;
      }
      if (!(b[a2 + -4 >> 2] & 3)) {
        return a2 | 0;
      }
      hd(a2 | 0, 0, d2 | 0) | 0;
      return a2 | 0;
    }
    function Zc(a2, b2, c2, d2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      c2 = a2 + c2 >>> 0;
      return (F(b2 + d2 + (c2 >>> 0 < a2 >>> 0 | 0) >>> 0 | 0), c2 | 0) | 0;
    }
    function _c(a2, b2, c2, d2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      d2 = b2 - d2 - (c2 >>> 0 > a2 >>> 0 | 0) >>> 0;
      return (F(d2 | 0), a2 - c2 >>> 0 | 0) | 0;
    }
    function $c(a2) {
      a2 = a2 | 0;
      return (a2 ? 31 - (D4(a2 ^ a2 - 1) | 0) | 0 : 32) | 0;
    }
    function ad(a2, c2, d2, e3, f) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      e3 = e3 | 0;
      f = f | 0;
      var g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0;
      l = a2;
      j = c2;
      k = j;
      h = d2;
      n = e3;
      i = n;
      if (!k) {
        g2 = (f | 0) != 0;
        if (!i) {
          if (g2) {
            b[f >> 2] = (l >>> 0) % (h >>> 0);
            b[f + 4 >> 2] = 0;
          }
          n = 0;
          f = (l >>> 0) / (h >>> 0) >>> 0;
          return (F(n | 0), f) | 0;
        } else {
          if (!g2) {
            n = 0;
            f = 0;
            return (F(n | 0), f) | 0;
          }
          b[f >> 2] = a2 | 0;
          b[f + 4 >> 2] = c2 & 0;
          n = 0;
          f = 0;
          return (F(n | 0), f) | 0;
        }
      }
      g2 = (i | 0) == 0;
      do {
        if (h) {
          if (!g2) {
            g2 = (D4(i | 0) | 0) - (D4(k | 0) | 0) | 0;
            if (g2 >>> 0 <= 31) {
              m = g2 + 1 | 0;
              i = 31 - g2 | 0;
              c2 = g2 - 31 >> 31;
              h = m;
              a2 = l >>> (m >>> 0) & c2 | k << i;
              c2 = k >>> (m >>> 0) & c2;
              g2 = 0;
              i = l << i;
              break;
            }
            if (!f) {
              n = 0;
              f = 0;
              return (F(n | 0), f) | 0;
            }
            b[f >> 2] = a2 | 0;
            b[f + 4 >> 2] = j | c2 & 0;
            n = 0;
            f = 0;
            return (F(n | 0), f) | 0;
          }
          g2 = h - 1 | 0;
          if (g2 & h | 0) {
            i = (D4(h | 0) | 0) + 33 - (D4(k | 0) | 0) | 0;
            p2 = 64 - i | 0;
            m = 32 - i | 0;
            j = m >> 31;
            o = i - 32 | 0;
            c2 = o >> 31;
            h = i;
            a2 = m - 1 >> 31 & k >>> (o >>> 0) | (k << m | l >>> (i >>> 0)) & c2;
            c2 = c2 & k >>> (i >>> 0);
            g2 = l << p2 & j;
            i = (k << p2 | l >>> (o >>> 0)) & j | l << m & i - 33 >> 31;
            break;
          }
          if (f | 0) {
            b[f >> 2] = g2 & l;
            b[f + 4 >> 2] = 0;
          }
          if ((h | 0) == 1) {
            o = j | c2 & 0;
            p2 = a2 | 0 | 0;
            return (F(o | 0), p2) | 0;
          } else {
            p2 = $c(h | 0) | 0;
            o = k >>> (p2 >>> 0) | 0;
            p2 = k << 32 - p2 | l >>> (p2 >>> 0) | 0;
            return (F(o | 0), p2) | 0;
          }
        } else {
          if (g2) {
            if (f | 0) {
              b[f >> 2] = (k >>> 0) % (h >>> 0);
              b[f + 4 >> 2] = 0;
            }
            o = 0;
            p2 = (k >>> 0) / (h >>> 0) >>> 0;
            return (F(o | 0), p2) | 0;
          }
          if (!l) {
            if (f | 0) {
              b[f >> 2] = 0;
              b[f + 4 >> 2] = (k >>> 0) % (i >>> 0);
            }
            o = 0;
            p2 = (k >>> 0) / (i >>> 0) >>> 0;
            return (F(o | 0), p2) | 0;
          }
          g2 = i - 1 | 0;
          if (!(g2 & i)) {
            if (f | 0) {
              b[f >> 2] = a2 | 0;
              b[f + 4 >> 2] = g2 & k | c2 & 0;
            }
            o = 0;
            p2 = k >>> (($c(i | 0) | 0) >>> 0);
            return (F(o | 0), p2) | 0;
          }
          g2 = (D4(i | 0) | 0) - (D4(k | 0) | 0) | 0;
          if (g2 >>> 0 <= 30) {
            c2 = g2 + 1 | 0;
            i = 31 - g2 | 0;
            h = c2;
            a2 = k << i | l >>> (c2 >>> 0);
            c2 = k >>> (c2 >>> 0);
            g2 = 0;
            i = l << i;
            break;
          }
          if (!f) {
            o = 0;
            p2 = 0;
            return (F(o | 0), p2) | 0;
          }
          b[f >> 2] = a2 | 0;
          b[f + 4 >> 2] = j | c2 & 0;
          o = 0;
          p2 = 0;
          return (F(o | 0), p2) | 0;
        }
      } while (0);
      if (!h) {
        k = i;
        j = 0;
        i = 0;
      } else {
        m = d2 | 0 | 0;
        l = n | e3 & 0;
        k = Zc(m | 0, l | 0, -1, -1) | 0;
        d2 = G() | 0;
        j = i;
        i = 0;
        do {
          e3 = j;
          j = g2 >>> 31 | j << 1;
          g2 = i | g2 << 1;
          e3 = a2 << 1 | e3 >>> 31 | 0;
          n = a2 >>> 31 | c2 << 1 | 0;
          _c(k | 0, d2 | 0, e3 | 0, n | 0) | 0;
          p2 = G() | 0;
          o = p2 >> 31 | ((p2 | 0) < 0 ? -1 : 0) << 1;
          i = o & 1;
          a2 = _c(e3 | 0, n | 0, o & m | 0, (((p2 | 0) < 0 ? -1 : 0) >> 31 | ((p2 | 0) < 0 ? -1 : 0) << 1) & l | 0) | 0;
          c2 = G() | 0;
          h = h - 1 | 0;
        } while ((h | 0) != 0);
        k = j;
        j = 0;
      }
      h = 0;
      if (f | 0) {
        b[f >> 2] = a2;
        b[f + 4 >> 2] = c2;
      }
      o = (g2 | 0) >>> 31 | (k | h) << 1 | (h << 1 | g2 >>> 31) & 0 | j;
      p2 = (g2 << 1 | 0 >>> 31) & -2 | i;
      return (F(o | 0), p2) | 0;
    }
    function bd2(a2, c2, d2, e3) {
      a2 = a2 | 0;
      c2 = c2 | 0;
      d2 = d2 | 0;
      e3 = e3 | 0;
      var f = 0, g2 = 0;
      g2 = S;
      S = S + 16 | 0;
      f = g2 | 0;
      ad(a2, c2, d2, e3, f) | 0;
      S = g2;
      return (F(b[f + 4 >> 2] | 0), b[f >> 2] | 0) | 0;
    }
    function cd2(a2, b2, c2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      c2 = c2 | 0;
      if ((c2 | 0) < 32) {
        F(b2 >>> c2 | 0);
        return a2 >>> c2 | (b2 & (1 << c2) - 1) << 32 - c2;
      }
      F(0);
      return b2 >>> c2 - 32 | 0;
    }
    function dd(a2, b2, c2) {
      a2 = a2 | 0;
      b2 = b2 | 0;
      c2 = c2 | 0;
      if ((c2 | 0) < 32) {
        F(b2 << c2 | (a2 & (1 << c2) - 1 << 32 - c2) >>> 32 - c2 | 0);
        return a2 << c2;
      }
      F(a2 << c2 - 32 | 0);
      return 0;
    }
    function ed(a2, b2) {
      a2 = +a2;
      b2 = +b2;
      if (a2 != a2) {
        return +b2;
      }
      if (b2 != b2) {
        return +a2;
      }
      return +C4(+a2, +b2);
    }
    function fd(a2) {
      a2 = +a2;
      return a2 >= 0 ? +p(a2 + 0.5) : +A6(a2 - 0.5);
    }
    function gd(c2, d2, e3) {
      c2 = c2 | 0;
      d2 = d2 | 0;
      e3 = e3 | 0;
      var f = 0, g2 = 0, h = 0;
      if ((e3 | 0) >= 8192) {
        K3(c2 | 0, d2 | 0, e3 | 0) | 0;
        return c2 | 0;
      }
      h = c2 | 0;
      g2 = c2 + e3 | 0;
      if ((c2 & 3) == (d2 & 3)) {
        while (c2 & 3) {
          if (!e3) {
            return h | 0;
          }
          a[c2 >> 0] = a[d2 >> 0] | 0;
          c2 = c2 + 1 | 0;
          d2 = d2 + 1 | 0;
          e3 = e3 - 1 | 0;
        }
        e3 = g2 & -4 | 0;
        f = e3 - 64 | 0;
        while ((c2 | 0) <= (f | 0)) {
          b[c2 >> 2] = b[d2 >> 2];
          b[c2 + 4 >> 2] = b[d2 + 4 >> 2];
          b[c2 + 8 >> 2] = b[d2 + 8 >> 2];
          b[c2 + 12 >> 2] = b[d2 + 12 >> 2];
          b[c2 + 16 >> 2] = b[d2 + 16 >> 2];
          b[c2 + 20 >> 2] = b[d2 + 20 >> 2];
          b[c2 + 24 >> 2] = b[d2 + 24 >> 2];
          b[c2 + 28 >> 2] = b[d2 + 28 >> 2];
          b[c2 + 32 >> 2] = b[d2 + 32 >> 2];
          b[c2 + 36 >> 2] = b[d2 + 36 >> 2];
          b[c2 + 40 >> 2] = b[d2 + 40 >> 2];
          b[c2 + 44 >> 2] = b[d2 + 44 >> 2];
          b[c2 + 48 >> 2] = b[d2 + 48 >> 2];
          b[c2 + 52 >> 2] = b[d2 + 52 >> 2];
          b[c2 + 56 >> 2] = b[d2 + 56 >> 2];
          b[c2 + 60 >> 2] = b[d2 + 60 >> 2];
          c2 = c2 + 64 | 0;
          d2 = d2 + 64 | 0;
        }
        while ((c2 | 0) < (e3 | 0)) {
          b[c2 >> 2] = b[d2 >> 2];
          c2 = c2 + 4 | 0;
          d2 = d2 + 4 | 0;
        }
      } else {
        e3 = g2 - 4 | 0;
        while ((c2 | 0) < (e3 | 0)) {
          a[c2 >> 0] = a[d2 >> 0] | 0;
          a[c2 + 1 >> 0] = a[d2 + 1 >> 0] | 0;
          a[c2 + 2 >> 0] = a[d2 + 2 >> 0] | 0;
          a[c2 + 3 >> 0] = a[d2 + 3 >> 0] | 0;
          c2 = c2 + 4 | 0;
          d2 = d2 + 4 | 0;
        }
      }
      while ((c2 | 0) < (g2 | 0)) {
        a[c2 >> 0] = a[d2 >> 0] | 0;
        c2 = c2 + 1 | 0;
        d2 = d2 + 1 | 0;
      }
      return h | 0;
    }
    function hd(c2, d2, e3) {
      c2 = c2 | 0;
      d2 = d2 | 0;
      e3 = e3 | 0;
      var f = 0, g2 = 0, h = 0, i = 0;
      h = c2 + e3 | 0;
      d2 = d2 & 255;
      if ((e3 | 0) >= 67) {
        while (c2 & 3) {
          a[c2 >> 0] = d2;
          c2 = c2 + 1 | 0;
        }
        f = h & -4 | 0;
        i = d2 | d2 << 8 | d2 << 16 | d2 << 24;
        g2 = f - 64 | 0;
        while ((c2 | 0) <= (g2 | 0)) {
          b[c2 >> 2] = i;
          b[c2 + 4 >> 2] = i;
          b[c2 + 8 >> 2] = i;
          b[c2 + 12 >> 2] = i;
          b[c2 + 16 >> 2] = i;
          b[c2 + 20 >> 2] = i;
          b[c2 + 24 >> 2] = i;
          b[c2 + 28 >> 2] = i;
          b[c2 + 32 >> 2] = i;
          b[c2 + 36 >> 2] = i;
          b[c2 + 40 >> 2] = i;
          b[c2 + 44 >> 2] = i;
          b[c2 + 48 >> 2] = i;
          b[c2 + 52 >> 2] = i;
          b[c2 + 56 >> 2] = i;
          b[c2 + 60 >> 2] = i;
          c2 = c2 + 64 | 0;
        }
        while ((c2 | 0) < (f | 0)) {
          b[c2 >> 2] = i;
          c2 = c2 + 4 | 0;
        }
      }
      while ((c2 | 0) < (h | 0)) {
        a[c2 >> 0] = d2;
        c2 = c2 + 1 | 0;
      }
      return h - e3 | 0;
    }
    function id(a2) {
      a2 = +a2;
      return a2 >= 0 ? +p(a2 + 0.5) : +A6(a2 - 0.5);
    }
    function jd(a2) {
      a2 = a2 | 0;
      var c2 = 0, d2 = 0, e3 = 0;
      e3 = J() | 0;
      d2 = b[g >> 2] | 0;
      c2 = d2 + a2 | 0;
      if ((a2 | 0) > 0 & (c2 | 0) < (d2 | 0) | (c2 | 0) < 0) {
        M3(c2 | 0) | 0;
        I(12);
        return -1;
      }
      if ((c2 | 0) > (e3 | 0)) {
        if (!(L(c2 | 0) | 0)) {
          I(12);
          return -1;
        }
      }
      b[g >> 2] = c2;
      return d2 | 0;
    }
    return {
      ___uremdi3: bd2,
      _bitshift64Lshr: cd2,
      _bitshift64Shl: dd,
      _calloc: Yc,
      _cellAreaKm2: ub,
      _cellAreaM2: vb,
      _cellAreaRads2: tb,
      _compact: Hb,
      _destroyLinkedPolygon: jc,
      _edgeLengthKm: pb,
      _edgeLengthM: qb,
      _emscripten_replace_memory: V,
      _exactEdgeLengthKm: xb,
      _exactEdgeLengthM: yb,
      _exactEdgeLengthRads: wb,
      _experimentalH3ToLocalIj: oc,
      _experimentalLocalIjToH3: pc,
      _free: Xc,
      _geoToH3: Sb,
      _getDestinationH3IndexFromUnidirectionalEdge: cc2,
      _getH3IndexesFromUnidirectionalEdge: ec,
      _getH3UnidirectionalEdge: ac2,
      _getH3UnidirectionalEdgeBoundary: gc,
      _getH3UnidirectionalEdgesFromHexagon: fc,
      _getOriginH3IndexFromUnidirectionalEdge: bc4,
      _getPentagonIndexes: _b,
      _getRes0Indexes: va,
      _h3Distance: qc,
      _h3GetBaseCell: Ab,
      _h3GetFaces: Yb,
      _h3GetResolution: zb,
      _h3IndexesAreNeighbors: $b,
      _h3IsPentagon: Fb,
      _h3IsResClassIII: Kb,
      _h3IsValid: Bb,
      _h3Line: sc,
      _h3LineSize: rc,
      _h3SetToLinkedGeo: ka,
      _h3ToCenterChild: Gb,
      _h3ToChildren: Eb,
      _h3ToGeo: Vb,
      _h3ToGeoBoundary: Wb,
      _h3ToParent: Cb,
      _h3UnidirectionalEdgeIsValid: dc,
      _hexAreaKm2: nb,
      _hexAreaM2: ob,
      _hexRing: ea2,
      _i64Subtract: _c,
      _kRing: $,
      _kRingDistances: aa2,
      _llvm_minnum_f64: ed,
      _llvm_round_f64: fd,
      _malloc: Wc,
      _maxFaceCount: Xb,
      _maxH3ToChildrenSize: Db,
      _maxKringSize: _,
      _maxPolyfillSize: fa,
      _maxUncompactSize: Jb,
      _memcpy: gd,
      _memset: hd,
      _numHexagons: rb,
      _pentagonIndexCount: Zb,
      _pointDistKm: jb,
      _pointDistM: kb,
      _pointDistRads: ib,
      _polyfill: ga,
      _res0IndexCount: ua,
      _round: id,
      _sbrk: jd,
      _sizeOfCoordIJ: Ec,
      _sizeOfGeoBoundary: Ac,
      _sizeOfGeoCoord: zc,
      _sizeOfGeoPolygon: Cc,
      _sizeOfGeofence: Bc,
      _sizeOfH3Index: yc,
      _sizeOfLinkedGeoPolygon: Dc,
      _uncompact: Ib,
      establishStackSpace: Z,
      stackAlloc: W,
      stackRestore: Y,
      stackSave: X
    };
  }(asmGlobalArg, asmLibraryArg, buffer);
  var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
  var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
  var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
  var _calloc = Module["_calloc"] = asm["_calloc"];
  var _cellAreaKm2 = Module["_cellAreaKm2"] = asm["_cellAreaKm2"];
  var _cellAreaM2 = Module["_cellAreaM2"] = asm["_cellAreaM2"];
  var _cellAreaRads2 = Module["_cellAreaRads2"] = asm["_cellAreaRads2"];
  var _compact = Module["_compact"] = asm["_compact"];
  var _destroyLinkedPolygon = Module["_destroyLinkedPolygon"] = asm["_destroyLinkedPolygon"];
  var _edgeLengthKm = Module["_edgeLengthKm"] = asm["_edgeLengthKm"];
  var _edgeLengthM = Module["_edgeLengthM"] = asm["_edgeLengthM"];
  var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
  var _exactEdgeLengthKm = Module["_exactEdgeLengthKm"] = asm["_exactEdgeLengthKm"];
  var _exactEdgeLengthM = Module["_exactEdgeLengthM"] = asm["_exactEdgeLengthM"];
  var _exactEdgeLengthRads = Module["_exactEdgeLengthRads"] = asm["_exactEdgeLengthRads"];
  var _experimentalH3ToLocalIj = Module["_experimentalH3ToLocalIj"] = asm["_experimentalH3ToLocalIj"];
  var _experimentalLocalIjToH3 = Module["_experimentalLocalIjToH3"] = asm["_experimentalLocalIjToH3"];
  var _free = Module["_free"] = asm["_free"];
  var _geoToH3 = Module["_geoToH3"] = asm["_geoToH3"];
  var _getDestinationH3IndexFromUnidirectionalEdge = Module["_getDestinationH3IndexFromUnidirectionalEdge"] = asm["_getDestinationH3IndexFromUnidirectionalEdge"];
  var _getH3IndexesFromUnidirectionalEdge = Module["_getH3IndexesFromUnidirectionalEdge"] = asm["_getH3IndexesFromUnidirectionalEdge"];
  var _getH3UnidirectionalEdge = Module["_getH3UnidirectionalEdge"] = asm["_getH3UnidirectionalEdge"];
  var _getH3UnidirectionalEdgeBoundary = Module["_getH3UnidirectionalEdgeBoundary"] = asm["_getH3UnidirectionalEdgeBoundary"];
  var _getH3UnidirectionalEdgesFromHexagon = Module["_getH3UnidirectionalEdgesFromHexagon"] = asm["_getH3UnidirectionalEdgesFromHexagon"];
  var _getOriginH3IndexFromUnidirectionalEdge = Module["_getOriginH3IndexFromUnidirectionalEdge"] = asm["_getOriginH3IndexFromUnidirectionalEdge"];
  var _getPentagonIndexes = Module["_getPentagonIndexes"] = asm["_getPentagonIndexes"];
  var _getRes0Indexes = Module["_getRes0Indexes"] = asm["_getRes0Indexes"];
  var _h3Distance = Module["_h3Distance"] = asm["_h3Distance"];
  var _h3GetBaseCell = Module["_h3GetBaseCell"] = asm["_h3GetBaseCell"];
  var _h3GetFaces = Module["_h3GetFaces"] = asm["_h3GetFaces"];
  var _h3GetResolution = Module["_h3GetResolution"] = asm["_h3GetResolution"];
  var _h3IndexesAreNeighbors = Module["_h3IndexesAreNeighbors"] = asm["_h3IndexesAreNeighbors"];
  var _h3IsPentagon = Module["_h3IsPentagon"] = asm["_h3IsPentagon"];
  var _h3IsResClassIII = Module["_h3IsResClassIII"] = asm["_h3IsResClassIII"];
  var _h3IsValid = Module["_h3IsValid"] = asm["_h3IsValid"];
  var _h3Line = Module["_h3Line"] = asm["_h3Line"];
  var _h3LineSize = Module["_h3LineSize"] = asm["_h3LineSize"];
  var _h3SetToLinkedGeo = Module["_h3SetToLinkedGeo"] = asm["_h3SetToLinkedGeo"];
  var _h3ToCenterChild = Module["_h3ToCenterChild"] = asm["_h3ToCenterChild"];
  var _h3ToChildren = Module["_h3ToChildren"] = asm["_h3ToChildren"];
  var _h3ToGeo = Module["_h3ToGeo"] = asm["_h3ToGeo"];
  var _h3ToGeoBoundary = Module["_h3ToGeoBoundary"] = asm["_h3ToGeoBoundary"];
  var _h3ToParent = Module["_h3ToParent"] = asm["_h3ToParent"];
  var _h3UnidirectionalEdgeIsValid = Module["_h3UnidirectionalEdgeIsValid"] = asm["_h3UnidirectionalEdgeIsValid"];
  var _hexAreaKm2 = Module["_hexAreaKm2"] = asm["_hexAreaKm2"];
  var _hexAreaM2 = Module["_hexAreaM2"] = asm["_hexAreaM2"];
  var _hexRing = Module["_hexRing"] = asm["_hexRing"];
  var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
  var _kRing = Module["_kRing"] = asm["_kRing"];
  var _kRingDistances = Module["_kRingDistances"] = asm["_kRingDistances"];
  var _llvm_minnum_f64 = Module["_llvm_minnum_f64"] = asm["_llvm_minnum_f64"];
  var _llvm_round_f64 = Module["_llvm_round_f64"] = asm["_llvm_round_f64"];
  var _malloc = Module["_malloc"] = asm["_malloc"];
  var _maxFaceCount = Module["_maxFaceCount"] = asm["_maxFaceCount"];
  var _maxH3ToChildrenSize = Module["_maxH3ToChildrenSize"] = asm["_maxH3ToChildrenSize"];
  var _maxKringSize = Module["_maxKringSize"] = asm["_maxKringSize"];
  var _maxPolyfillSize = Module["_maxPolyfillSize"] = asm["_maxPolyfillSize"];
  var _maxUncompactSize = Module["_maxUncompactSize"] = asm["_maxUncompactSize"];
  var _memcpy = Module["_memcpy"] = asm["_memcpy"];
  var _memset = Module["_memset"] = asm["_memset"];
  var _numHexagons = Module["_numHexagons"] = asm["_numHexagons"];
  var _pentagonIndexCount = Module["_pentagonIndexCount"] = asm["_pentagonIndexCount"];
  var _pointDistKm = Module["_pointDistKm"] = asm["_pointDistKm"];
  var _pointDistM = Module["_pointDistM"] = asm["_pointDistM"];
  var _pointDistRads = Module["_pointDistRads"] = asm["_pointDistRads"];
  var _polyfill = Module["_polyfill"] = asm["_polyfill"];
  var _res0IndexCount = Module["_res0IndexCount"] = asm["_res0IndexCount"];
  var _round = Module["_round"] = asm["_round"];
  var _sbrk = Module["_sbrk"] = asm["_sbrk"];
  var _sizeOfCoordIJ = Module["_sizeOfCoordIJ"] = asm["_sizeOfCoordIJ"];
  var _sizeOfGeoBoundary = Module["_sizeOfGeoBoundary"] = asm["_sizeOfGeoBoundary"];
  var _sizeOfGeoCoord = Module["_sizeOfGeoCoord"] = asm["_sizeOfGeoCoord"];
  var _sizeOfGeoPolygon = Module["_sizeOfGeoPolygon"] = asm["_sizeOfGeoPolygon"];
  var _sizeOfGeofence = Module["_sizeOfGeofence"] = asm["_sizeOfGeofence"];
  var _sizeOfH3Index = Module["_sizeOfH3Index"] = asm["_sizeOfH3Index"];
  var _sizeOfLinkedGeoPolygon = Module["_sizeOfLinkedGeoPolygon"] = asm["_sizeOfLinkedGeoPolygon"];
  var _uncompact = Module["_uncompact"] = asm["_uncompact"];
  var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
  var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
  var stackRestore = Module["stackRestore"] = asm["stackRestore"];
  var stackSave = Module["stackSave"] = asm["stackSave"];
  Module["asm"] = asm;
  Module["cwrap"] = cwrap;
  Module["setValue"] = setValue;
  Module["getValue"] = getValue;
  Module["getTempRet0"] = getTempRet0;
  if (memoryInitializer) {
    if (!isDataURI(memoryInitializer)) {
      memoryInitializer = locateFile(memoryInitializer);
    }
    {
      addRunDependency("memory initializer");
      var applyMemoryInitializer = function(data) {
        if (data.byteLength) {
          data = new Uint8Array(data);
        }
        HEAPU8.set(data, GLOBAL_BASE);
        if (Module["memoryInitializerRequest"]) {
          delete Module["memoryInitializerRequest"].response;
        }
        removeRunDependency("memory initializer");
      };
      var doBrowserLoad = function() {
        readAsync(memoryInitializer, applyMemoryInitializer, function() {
          throw "could not load memory initializer " + memoryInitializer;
        });
      };
      var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
      if (memoryInitializerBytes) {
        applyMemoryInitializer(memoryInitializerBytes.buffer);
      } else if (Module["memoryInitializerRequest"]) {
        var useRequest = function() {
          var request = Module["memoryInitializerRequest"];
          var response = request.response;
          if (request.status !== 200 && request.status !== 0) {
            var data = tryParseAsDataURI(Module["memoryInitializerRequestURL"]);
            if (data) {
              response = data.buffer;
            } else {
              console.warn("a problem seems to have happened with Module.memoryInitializerRequest, status: " + request.status + ", retrying " + memoryInitializer);
              doBrowserLoad();
              return;
            }
          }
          applyMemoryInitializer(response);
        };
        if (Module["memoryInitializerRequest"].response) {
          setTimeout(useRequest, 0);
        } else {
          Module["memoryInitializerRequest"].addEventListener("load", useRequest);
        }
      } else {
        doBrowserLoad();
      }
    }
  }
  var calledRun;
  dependenciesFulfilled = function runCaller() {
    if (!calledRun) {
      run();
    }
    if (!calledRun) {
      dependenciesFulfilled = runCaller;
    }
  };
  function run(args) {
    args = args || arguments_;
    if (runDependencies > 0) {
      return;
    }
    preRun();
    if (runDependencies > 0) {
      return;
    }
    function doRun() {
      if (calledRun) {
        return;
      }
      calledRun = true;
      if (ABORT) {
        return;
      }
      initRuntime();
      preMain();
      if (Module["onRuntimeInitialized"]) {
        Module["onRuntimeInitialized"]();
      }
      postRun();
    }
    if (Module["setStatus"]) {
      Module["setStatus"]("Running...");
      setTimeout(function() {
        setTimeout(function() {
          Module["setStatus"]("");
        }, 1);
        doRun();
      }, 1);
    } else {
      doRun();
    }
  }
  Module["run"] = run;
  function abort(what) {
    if (Module["onAbort"]) {
      Module["onAbort"](what);
    }
    what += "";
    out(what);
    err(what);
    ABORT = true;
    throw "abort(" + what + "). Build with -s ASSERTIONS=1 for more info.";
  }
  Module["abort"] = abort;
  if (Module["preInit"]) {
    if (typeof Module["preInit"] == "function") {
      Module["preInit"] = [Module["preInit"]];
    }
    while (Module["preInit"].length > 0) {
      Module["preInit"].pop()();
    }
  }
  run();
  return libh32;
}(typeof libh3 === "object" ? libh3 : {});
var NUMBER = "number";
var BOOLEAN = NUMBER;
var H3_LOWER = NUMBER;
var H3_UPPER = NUMBER;
var RESOLUTION = NUMBER;
var POINTER = NUMBER;
var BINDINGS = [
  ["sizeOfH3Index", NUMBER],
  ["sizeOfGeoCoord", NUMBER],
  ["sizeOfGeoBoundary", NUMBER],
  ["sizeOfGeoPolygon", NUMBER],
  ["sizeOfGeofence", NUMBER],
  ["sizeOfLinkedGeoPolygon", NUMBER],
  ["sizeOfCoordIJ", NUMBER],
  ["h3IsValid", BOOLEAN, [H3_LOWER, H3_UPPER]],
  ["geoToH3", H3_LOWER, [NUMBER, NUMBER, RESOLUTION]],
  ["h3ToGeo", null, [H3_LOWER, H3_UPPER, POINTER]],
  ["h3ToGeoBoundary", null, [H3_LOWER, H3_UPPER, POINTER]],
  ["maxKringSize", NUMBER, [NUMBER]],
  ["kRing", null, [H3_LOWER, H3_UPPER, NUMBER, POINTER]],
  ["kRingDistances", null, [H3_LOWER, H3_UPPER, NUMBER, POINTER, POINTER]],
  ["hexRing", null, [H3_LOWER, H3_UPPER, NUMBER, POINTER]],
  ["maxPolyfillSize", NUMBER, [POINTER, RESOLUTION]],
  ["polyfill", null, [POINTER, RESOLUTION, POINTER]],
  ["h3SetToLinkedGeo", null, [POINTER, NUMBER, POINTER]],
  ["destroyLinkedPolygon", null, [POINTER]],
  ["compact", NUMBER, [POINTER, POINTER, NUMBER]],
  ["uncompact", NUMBER, [POINTER, NUMBER, POINTER, NUMBER, RESOLUTION]],
  ["maxUncompactSize", NUMBER, [POINTER, NUMBER, RESOLUTION]],
  ["h3IsPentagon", BOOLEAN, [H3_LOWER, H3_UPPER]],
  ["h3IsResClassIII", BOOLEAN, [H3_LOWER, H3_UPPER]],
  ["h3GetBaseCell", NUMBER, [H3_LOWER, H3_UPPER]],
  ["h3GetResolution", NUMBER, [H3_LOWER, H3_UPPER]],
  ["maxFaceCount", NUMBER, [H3_LOWER, H3_UPPER]],
  ["h3GetFaces", null, [H3_LOWER, H3_UPPER, POINTER]],
  ["h3ToParent", H3_LOWER, [H3_LOWER, H3_UPPER, RESOLUTION]],
  ["h3ToChildren", null, [H3_LOWER, H3_UPPER, RESOLUTION, POINTER]],
  ["h3ToCenterChild", H3_LOWER, [H3_LOWER, H3_UPPER, RESOLUTION]],
  ["maxH3ToChildrenSize", NUMBER, [H3_LOWER, H3_UPPER, RESOLUTION]],
  ["h3IndexesAreNeighbors", BOOLEAN, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER]],
  ["getH3UnidirectionalEdge", H3_LOWER, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER]],
  ["getOriginH3IndexFromUnidirectionalEdge", H3_LOWER, [H3_LOWER, H3_UPPER]],
  ["getDestinationH3IndexFromUnidirectionalEdge", H3_LOWER, [H3_LOWER, H3_UPPER]],
  ["h3UnidirectionalEdgeIsValid", BOOLEAN, [H3_LOWER, H3_UPPER]],
  ["getH3IndexesFromUnidirectionalEdge", null, [H3_LOWER, H3_UPPER, POINTER]],
  ["getH3UnidirectionalEdgesFromHexagon", null, [H3_LOWER, H3_UPPER, POINTER]],
  ["getH3UnidirectionalEdgeBoundary", null, [H3_LOWER, H3_UPPER, POINTER]],
  ["h3Distance", NUMBER, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER]],
  ["h3Line", NUMBER, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER, POINTER]],
  ["h3LineSize", NUMBER, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER]],
  ["experimentalH3ToLocalIj", NUMBER, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER, POINTER]],
  ["experimentalLocalIjToH3", NUMBER, [H3_LOWER, H3_UPPER, POINTER, POINTER]],
  ["hexAreaM2", NUMBER, [RESOLUTION]],
  ["hexAreaKm2", NUMBER, [RESOLUTION]],
  ["edgeLengthM", NUMBER, [RESOLUTION]],
  ["edgeLengthKm", NUMBER, [RESOLUTION]],
  ["pointDistM", NUMBER, [POINTER, POINTER]],
  ["pointDistKm", NUMBER, [POINTER, POINTER]],
  ["pointDistRads", NUMBER, [POINTER, POINTER]],
  ["cellAreaM2", NUMBER, [H3_LOWER, H3_UPPER]],
  ["cellAreaKm2", NUMBER, [H3_LOWER, H3_UPPER]],
  ["cellAreaRads2", NUMBER, [H3_LOWER, H3_UPPER]],
  ["exactEdgeLengthM", NUMBER, [H3_LOWER, H3_UPPER]],
  ["exactEdgeLengthKm", NUMBER, [H3_LOWER, H3_UPPER]],
  ["exactEdgeLengthRads", NUMBER, [H3_LOWER, H3_UPPER]],
  ["numHexagons", NUMBER, [RESOLUTION]],
  ["getRes0Indexes", null, [POINTER]],
  ["res0IndexCount", NUMBER],
  ["getPentagonIndexes", null, [NUMBER, POINTER]],
  ["pentagonIndexCount", NUMBER]
];
var H3 = {};
BINDINGS.forEach(function bind(def) {
  H3[def[0]] = libh3.cwrap.apply(libh3, def);
});
var BASE_16 = 16;
var SZ_INT = 4;
var SZ_DBL = 8;
var SZ_H3INDEX = H3.sizeOfH3Index();
var SZ_GEOCOORD = H3.sizeOfGeoCoord();
var SZ_GEOBOUNDARY = H3.sizeOfGeoBoundary();
var SZ_GEOPOLYGON = H3.sizeOfGeoPolygon();
var SZ_GEOFENCE = H3.sizeOfGeofence();
var SZ_LINKED_GEOPOLYGON = H3.sizeOfLinkedGeoPolygon();
var SZ_COORDIJ = H3.sizeOfCoordIJ();
function validateRes(res) {
  if (typeof res !== "number" || res < 0 || res > 15 || Math.floor(res) !== res) {
    throw new Error("Invalid resolution: " + res);
  }
}
var INVALID_HEXIDECIMAL_CHAR = /[^0-9a-fA-F]/;
function h3IndexToSplitLong(h3Index) {
  if (Array.isArray(h3Index) && h3Index.length === 2 && Number.isInteger(h3Index[0]) && Number.isInteger(h3Index[1])) {
    return h3Index;
  }
  if (typeof h3Index !== "string" || INVALID_HEXIDECIMAL_CHAR.test(h3Index)) {
    return [0, 0];
  }
  var upper = parseInt(h3Index.substring(0, h3Index.length - 8), BASE_16);
  var lower = parseInt(h3Index.substring(h3Index.length - 8), BASE_16);
  return [lower, upper];
}
function hexFrom32Bit(num) {
  if (num >= 0) {
    return num.toString(BASE_16);
  }
  num = num & 2147483647;
  var tempStr = zeroPad(8, num.toString(BASE_16));
  var topNum = (parseInt(tempStr[0], BASE_16) + 8).toString(BASE_16);
  tempStr = topNum + tempStr.substring(1);
  return tempStr;
}
function splitLongToh3Index(lower, upper) {
  return hexFrom32Bit(upper) + zeroPad(8, hexFrom32Bit(lower));
}
function zeroPad(fullLen, numStr) {
  var numZeroes = fullLen - numStr.length;
  var outStr = "";
  for (var i = 0; i < numZeroes; i++) {
    outStr += "0";
  }
  outStr = outStr + numStr;
  return outStr;
}
function polygonArrayToGeofence(polygonArray, geofence, isGeoJson) {
  var numVerts = polygonArray.length;
  var geoCoordArray = libh3._calloc(numVerts, SZ_GEOCOORD);
  var latIndex = isGeoJson ? 1 : 0;
  var lngIndex = isGeoJson ? 0 : 1;
  for (var i = 0; i < numVerts * 2; i += 2) {
    libh3.HEAPF64.set([polygonArray[i / 2][latIndex], polygonArray[i / 2][lngIndex]].map(degsToRads), geoCoordArray / SZ_DBL + i);
  }
  libh3.HEAPU32.set([numVerts, geoCoordArray], geofence / SZ_INT);
  return geofence;
}
function coordinatesToGeoPolygon(coordinates3, isGeoJson) {
  var numHoles = coordinates3.length - 1;
  var geoPolygon = libh3._calloc(SZ_GEOPOLYGON);
  var geofenceOffset = 0;
  var numHolesOffset = geofenceOffset + SZ_GEOFENCE;
  var holesOffset = numHolesOffset + SZ_INT;
  polygonArrayToGeofence(coordinates3[0], geoPolygon + geofenceOffset, isGeoJson);
  var holes;
  if (numHoles > 0) {
    holes = libh3._calloc(numHoles, SZ_GEOFENCE);
    for (var i = 0; i < numHoles; i++) {
      polygonArrayToGeofence(coordinates3[i + 1], holes + SZ_GEOFENCE * i, isGeoJson);
    }
  }
  libh3.setValue(geoPolygon + numHolesOffset, numHoles, "i32");
  libh3.setValue(geoPolygon + holesOffset, holes, "i32");
  return geoPolygon;
}
function destroyGeoPolygon(geoPolygon) {
  var geofenceOffset = 0;
  var numHolesOffset = geofenceOffset + SZ_GEOFENCE;
  var holesOffset = numHolesOffset + SZ_INT;
  var geofenceArrayOffset = SZ_INT;
  libh3._free(libh3.getValue(geoPolygon + geofenceOffset + geofenceArrayOffset, "i8*"));
  var numHoles = libh3.getValue(geoPolygon + numHolesOffset, "i32");
  if (numHoles > 0) {
    var holes = libh3.getValue(geoPolygon + holesOffset, "i32");
    for (var i = 0; i < numHoles; i++) {
      libh3._free(libh3.getValue(holes + SZ_GEOFENCE * i + geofenceArrayOffset, "i8*"));
    }
    libh3._free(holes);
  }
  libh3._free(geoPolygon);
}
function readLong(invocation) {
  var upper = libh3.getTempRet0();
  return [invocation, upper];
}
function readH3Index(invocation) {
  var ref = readLong(invocation);
  var lower = ref[0];
  var upper = ref[1];
  return upper ? splitLongToh3Index(lower, upper) : null;
}
function readH3IndexFromPointer(cAddress, offset) {
  if (offset === void 0)
    offset = 0;
  var lower = libh3.getValue(cAddress + SZ_INT * offset * 2, "i32");
  var upper = libh3.getValue(cAddress + SZ_INT * (offset * 2 + 1), "i32");
  return upper ? splitLongToh3Index(lower, upper) : null;
}
function readArrayOfHexagons(cAddress, maxCount) {
  var out = [];
  for (var i = 0; i < maxCount; i++) {
    var h3Index = readH3IndexFromPointer(cAddress, i);
    if (h3Index !== null) {
      out.push(h3Index);
    }
  }
  return out;
}
function readSingleCoord(cAddress) {
  return radsToDegs(libh3.getValue(cAddress, "double"));
}
function readGeoCoord(cAddress) {
  return [readSingleCoord(cAddress), readSingleCoord(cAddress + SZ_DBL)];
}
function readGeoCoordGeoJson(cAddress) {
  return [readSingleCoord(cAddress + SZ_DBL), readSingleCoord(cAddress)];
}
function readGeoBoundary(geoBoundary, geoJsonCoords, closedLoop) {
  var numVerts = libh3.getValue(geoBoundary, "i32");
  var vertsPos = geoBoundary + SZ_DBL;
  var out = [];
  var readCoord = geoJsonCoords ? readGeoCoordGeoJson : readGeoCoord;
  for (var i = 0; i < numVerts * 2; i += 2) {
    out.push(readCoord(vertsPos + SZ_DBL * i));
  }
  if (closedLoop) {
    out.push(out[0]);
  }
  return out;
}
function geoToH3(lat, lng, res) {
  var latlng = libh3._malloc(SZ_GEOCOORD);
  libh3.HEAPF64.set([lat, lng].map(degsToRads), latlng / SZ_DBL);
  var h3Index = readH3Index(H3.geoToH3(latlng, res));
  libh3._free(latlng);
  return h3Index;
}
function h3ToGeo(h3Index) {
  var latlng = libh3._malloc(SZ_GEOCOORD);
  var ref = h3IndexToSplitLong(h3Index);
  var lower = ref[0];
  var upper = ref[1];
  H3.h3ToGeo(lower, upper, latlng);
  var out = readGeoCoord(latlng);
  libh3._free(latlng);
  return out;
}
function h3ToGeoBoundary(h3Index, formatAsGeoJson) {
  var geoBoundary = libh3._malloc(SZ_GEOBOUNDARY);
  var ref = h3IndexToSplitLong(h3Index);
  var lower = ref[0];
  var upper = ref[1];
  H3.h3ToGeoBoundary(lower, upper, geoBoundary);
  var out = readGeoBoundary(geoBoundary, formatAsGeoJson, formatAsGeoJson);
  libh3._free(geoBoundary);
  return out;
}
function polyfill(coordinates3, res, isGeoJson) {
  validateRes(res);
  isGeoJson = Boolean(isGeoJson);
  if (coordinates3.length === 0 || coordinates3[0].length === 0) {
    return [];
  }
  if (typeof coordinates3[0][0] === "number") {
    coordinates3 = [coordinates3];
  }
  var geoPolygon = coordinatesToGeoPolygon(coordinates3, isGeoJson);
  var arrayLen = H3.maxPolyfillSize(geoPolygon, res);
  var hexagons = libh3._calloc(arrayLen, SZ_H3INDEX);
  H3.polyfill(geoPolygon, res, hexagons);
  var out = readArrayOfHexagons(hexagons, arrayLen);
  libh3._free(hexagons);
  destroyGeoPolygon(geoPolygon);
  return out;
}
function degsToRads(deg) {
  return deg * Math.PI / 180;
}
function radsToDegs(rad) {
  return rad * 180 / Math.PI;
}

// node_modules/three-fatline/dist/three-fatline.module.js
var THREE$2 = window.THREE ? window.THREE : {
  Box3,
  BufferGeometry,
  Float32BufferAttribute,
  InstancedBufferGeometry,
  InstancedInterleavedBuffer,
  InterleavedBufferAttribute,
  Sphere,
  Vector3,
  WireframeGeometry
};
var setAttributeFn$1 = new THREE$2.BufferGeometry().setAttribute ? "setAttribute" : "addAttribute";
var _box$1 = new THREE$2.Box3();
var _vector = new THREE$2.Vector3();
var LineSegmentsGeometry = class extends THREE$2.InstancedBufferGeometry {
  constructor() {
    super();
    this.type = "LineSegmentsGeometry";
    const positions = [-1, 2, 0, 1, 2, 0, -1, 1, 0, 1, 1, 0, -1, 0, 0, 1, 0, 0, -1, -1, 0, 1, -1, 0];
    const uvs = [-1, 2, 1, 2, -1, 1, 1, 1, -1, -1, 1, -1, -1, -2, 1, -2];
    const index6 = [0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5];
    this.setIndex(index6);
    this[setAttributeFn$1]("position", new THREE$2.Float32BufferAttribute(positions, 3));
    this[setAttributeFn$1]("uv", new THREE$2.Float32BufferAttribute(uvs, 2));
  }
  applyMatrix4(matrix) {
    const start = this.attributes.instanceStart;
    const end = this.attributes.instanceEnd;
    if (start !== void 0) {
      start.applyMatrix4(matrix);
      end.applyMatrix4(matrix);
      start.needsUpdate = true;
    }
    if (this.boundingBox !== null) {
      this.computeBoundingBox();
    }
    if (this.boundingSphere !== null) {
      this.computeBoundingSphere();
    }
    return this;
  }
  setPositions(array6) {
    let lineSegments;
    if (array6 instanceof Float32Array) {
      lineSegments = array6;
    } else if (Array.isArray(array6)) {
      lineSegments = new Float32Array(array6);
    }
    const instanceBuffer = new THREE$2.InstancedInterleavedBuffer(lineSegments, 6, 1);
    this[setAttributeFn$1]("instanceStart", new THREE$2.InterleavedBufferAttribute(instanceBuffer, 3, 0));
    this[setAttributeFn$1]("instanceEnd", new THREE$2.InterleavedBufferAttribute(instanceBuffer, 3, 3));
    this.computeBoundingBox();
    this.computeBoundingSphere();
    return this;
  }
  setColors(array6) {
    let colors;
    if (array6 instanceof Float32Array) {
      colors = array6;
    } else if (Array.isArray(array6)) {
      colors = new Float32Array(array6);
    }
    const instanceColorBuffer = new THREE$2.InstancedInterleavedBuffer(colors, 6, 1);
    this[setAttributeFn$1]("instanceColorStart", new THREE$2.InterleavedBufferAttribute(instanceColorBuffer, 3, 0));
    this[setAttributeFn$1]("instanceColorEnd", new THREE$2.InterleavedBufferAttribute(instanceColorBuffer, 3, 3));
    return this;
  }
  fromWireframeGeometry(geometry) {
    this.setPositions(geometry.attributes.position.array);
    return this;
  }
  fromEdgesGeometry(geometry) {
    this.setPositions(geometry.attributes.position.array);
    return this;
  }
  fromMesh(mesh) {
    this.fromWireframeGeometry(new THREE$2.WireframeGeometry(mesh.geometry));
    return this;
  }
  romLineSegments(lineSegments) {
    const geometry = lineSegments.geometry;
    if (geometry.isGeometry) {
      console.error("LineSegmentsGeometry no longer supports Geometry. Use THREE.BufferGeometry instead.");
      return;
    } else if (geometry.isBufferGeometry) {
      this.setPositions(geometry.attributes.position.array);
    }
    return this;
  }
  computeBoundingBox() {
    if (this.boundingBox === null) {
      this.boundingBox = new THREE$2.Box3();
    }
    const start = this.attributes.instanceStart;
    const end = this.attributes.instanceEnd;
    if (start !== void 0 && end !== void 0) {
      this.boundingBox.setFromBufferAttribute(start);
      _box$1.setFromBufferAttribute(end);
      this.boundingBox.union(_box$1);
    }
  }
  computeBoundingSphere() {
    if (this.boundingSphere === null) {
      this.boundingSphere = new THREE$2.Sphere();
    }
    if (this.boundingBox === null) {
      this.computeBoundingBox();
    }
    const start = this.attributes.instanceStart;
    const end = this.attributes.instanceEnd;
    if (start !== void 0 && end !== void 0) {
      const center = this.boundingSphere.center;
      this.boundingBox.getCenter(center);
      let maxRadiusSq = 0;
      for (let i = 0, il = start.count; i < il; i++) {
        _vector.fromBufferAttribute(start, i);
        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));
        _vector.fromBufferAttribute(end, i);
        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));
      }
      this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
      if (isNaN(this.boundingSphere.radius)) {
        console.error("THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.", this);
      }
    }
  }
  toJSON() {
  }
  applyMatrix(matrix) {
    console.warn("THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().");
    return this.applyMatrix4(matrix);
  }
};
LineSegmentsGeometry.prototype.isLineSegmentsGeometry = true;
var THREE$1 = window.THREE ? window.THREE : {
  ShaderLib,
  ShaderMaterial,
  UniformsLib,
  UniformsUtils,
  Vector2
};
THREE$1.UniformsLib.line = {
  linewidth: {
    value: 1
  },
  resolution: {
    value: new Vector2(1, 1)
  },
  dashScale: {
    value: 1
  },
  dashSize: {
    value: 1
  },
  dashOffset: {
    value: 0
  },
  gapSize: {
    value: 1
  },
  opacity: {
    value: 1
  }
};
THREE$1.ShaderLib["line"] = {
  uniforms: THREE$1.UniformsUtils.merge([THREE$1.UniformsLib.common, THREE$1.UniformsLib.fog, THREE$1.UniformsLib.line]),
  vertexShader: `
		#include <common>
		#include <color_pars_vertex>
		#include <fog_pars_vertex>
		#include <logdepthbuf_pars_vertex>
		#include <clipping_planes_pars_vertex>

		uniform float linewidth;
		uniform vec2 resolution;

		attribute vec3 instanceStart;
		attribute vec3 instanceEnd;

		attribute vec3 instanceColorStart;
		attribute vec3 instanceColorEnd;

		varying vec2 vUv;

		#ifdef USE_DASH

			uniform float dashScale;
			attribute float instanceDistanceStart;
			attribute float instanceDistanceEnd;
			varying float vLineDistance;

		#endif

		void trimSegment( const in vec4 start, inout vec4 end ) {

			// trim end segment so it terminates between the camera plane and the near plane

			// conservative estimate of the near plane
			float a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column
			float b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column
			float nearEstimate = - 0.5 * b / a;

			float alpha = ( nearEstimate - start.z ) / ( end.z - start.z );

			end.xyz = mix( start.xyz, end.xyz, alpha );

		}

		void main() {

			#ifdef USE_COLOR

				vColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;

			#endif

			#ifdef USE_DASH

				vLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;

			#endif

			float aspect = resolution.x / resolution.y;

			vUv = uv;

			// camera space
			vec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );
			vec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );

			// special case for perspective projection, and segments that terminate either in, or behind, the camera plane
			// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space
			// but we need to perform ndc-space calculations in the shader, so we must address this issue directly
			// perhaps there is a more elegant solution -- WestLangley

			bool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column

			if ( perspective ) {

				if ( start.z < 0.0 && end.z >= 0.0 ) {

					trimSegment( start, end );

				} else if ( end.z < 0.0 && start.z >= 0.0 ) {

					trimSegment( end, start );

				}

			}

			// clip space
			vec4 clipStart = projectionMatrix * start;
			vec4 clipEnd = projectionMatrix * end;

			// ndc space
			vec2 ndcStart = clipStart.xy / clipStart.w;
			vec2 ndcEnd = clipEnd.xy / clipEnd.w;

			// direction
			vec2 dir = ndcEnd - ndcStart;

			// account for clip-space aspect ratio
			dir.x *= aspect;
			dir = normalize( dir );

			// perpendicular to dir
			vec2 offset = vec2( dir.y, - dir.x );

			// undo aspect ratio adjustment
			dir.x /= aspect;
			offset.x /= aspect;

			// sign flip
			if ( position.x < 0.0 ) offset *= - 1.0;

			// endcaps
			if ( position.y < 0.0 ) {

				offset += - dir;

			} else if ( position.y > 1.0 ) {

				offset += dir;

			}

			// adjust for linewidth
			offset *= linewidth;

			// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...
			offset /= resolution.y;

			// select end
			vec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;

			// back to clip space
			offset *= clip.w;

			clip.xy += offset;

			gl_Position = clip;

			vec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation

			#include <logdepthbuf_vertex>
			#include <clipping_planes_vertex>
			#include <fog_vertex>

		}
		`,
  fragmentShader: `
		uniform vec3 diffuse;
		uniform float opacity;

		#ifdef USE_DASH

			uniform float dashSize;
			uniform float dashOffset;
			uniform float gapSize;

		#endif

		varying float vLineDistance;

		#include <common>
		#include <color_pars_fragment>
		#include <fog_pars_fragment>
		#include <logdepthbuf_pars_fragment>
		#include <clipping_planes_pars_fragment>

		varying vec2 vUv;

		void main() {

			#include <clipping_planes_fragment>

			#ifdef USE_DASH

				if ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps

				if ( mod( vLineDistance + dashOffset, dashSize + gapSize ) > dashSize ) discard; // todo - FIX

			#endif

			if ( abs( vUv.y ) > 1.0 ) {

				float a = vUv.x;
				float b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;
				float len2 = a * a + b * b;

				if ( len2 > 1.0 ) discard;

			}

			vec4 diffuseColor = vec4( diffuse, opacity );

			#include <logdepthbuf_fragment>
			#include <color_fragment>

			gl_FragColor = vec4( diffuseColor.rgb, diffuseColor.a );

			#include <tonemapping_fragment>
			#include <encodings_fragment>
			#include <fog_fragment>
			#include <premultiplied_alpha_fragment>

		}
		`
};
var LineMaterial = class extends THREE$1.ShaderMaterial {
  constructor(parameters) {
    super({
      type: "LineMaterial",
      uniforms: THREE$1.UniformsUtils.clone(THREE$1.ShaderLib["line"].uniforms),
      vertexShader: THREE$1.ShaderLib["line"].vertexShader,
      fragmentShader: THREE$1.ShaderLib["line"].fragmentShader,
      clipping: true
    });
    this.dashed = false;
    Object.defineProperties(this, {
      color: {
        enumerable: true,
        get: function() {
          return this.uniforms.diffuse.value;
        },
        set: function(value) {
          this.uniforms.diffuse.value = value;
        }
      },
      linewidth: {
        enumerable: true,
        get: function() {
          return this.uniforms.linewidth.value;
        },
        set: function(value) {
          this.uniforms.linewidth.value = value;
        }
      },
      dashScale: {
        enumerable: true,
        get: function() {
          return this.uniforms.dashScale.value;
        },
        set: function(value) {
          this.uniforms.dashScale.value = value;
        }
      },
      dashSize: {
        enumerable: true,
        get: function() {
          return this.uniforms.dashSize.value;
        },
        set: function(value) {
          this.uniforms.dashSize.value = value;
        }
      },
      dashOffset: {
        enumerable: true,
        get: function() {
          return this.uniforms.dashOffset.value;
        },
        set: function(value) {
          this.uniforms.dashOffset.value = value;
        }
      },
      gapSize: {
        enumerable: true,
        get: function() {
          return this.uniforms.gapSize.value;
        },
        set: function(value) {
          this.uniforms.gapSize.value = value;
        }
      },
      opacity: {
        enumerable: true,
        get: function() {
          return this.uniforms.opacity.value;
        },
        set: function(value) {
          this.uniforms.opacity.value = value;
        }
      },
      resolution: {
        enumerable: true,
        get: function() {
          return this.uniforms.resolution.value;
        },
        set: function(value) {
          this.uniforms.resolution.value.copy(value);
        }
      },
      alphaToCoverage: {
        enumerable: true,
        get: function() {
          return Boolean("ALPHA_TO_COVERAGE" in this.defines);
        },
        set: function(value) {
          if (Boolean(value) !== Boolean("ALPHA_TO_COVERAGE" in this.defines)) {
            this.needsUpdate = true;
          }
          if (value) {
            this.defines.ALPHA_TO_COVERAGE = "";
            this.extensions.derivatives = true;
          } else {
            delete this.defines.ALPHA_TO_COVERAGE;
            this.extensions.derivatives = false;
          }
        }
      }
    });
    this.setValues(parameters);
  }
};
LineMaterial.prototype.isLineMaterial = true;
var THREE3 = window.THREE ? window.THREE : {
  Box3,
  BufferGeometry,
  InstancedInterleavedBuffer,
  InterleavedBufferAttribute,
  Line3,
  MathUtils,
  Matrix4,
  Mesh,
  Sphere,
  Vector3,
  Vector4
};
var setAttributeFn3 = new THREE3.BufferGeometry().setAttribute ? "setAttribute" : "addAttribute";
var _start = new THREE3.Vector3();
var _end = new THREE3.Vector3();
var _start4 = new THREE3.Vector4();
var _end4 = new THREE3.Vector4();
var _ssOrigin = new THREE3.Vector4();
var _ssOrigin3 = new THREE3.Vector3();
var _mvMatrix = new THREE3.Matrix4();
var _line = new THREE3.Line3();
var _closestPoint = new THREE3.Vector3();
var _box = new THREE3.Box3();
var _sphere = new THREE3.Sphere();
var _clipToWorldVector = new THREE3.Vector4();
var LineSegments2 = class extends THREE3.Mesh {
  constructor(geometry = new LineSegmentsGeometry(), material = new LineMaterial({
    color: Math.random() * 16777215
  })) {
    super(geometry, material);
    this.type = "LineSegments2";
  }
  computeLineDistances() {
    const geometry = this.geometry;
    const instanceStart = geometry.attributes.instanceStart;
    const instanceEnd = geometry.attributes.instanceEnd;
    const lineDistances = new Float32Array(2 * instanceStart.count);
    for (let i = 0, j = 0, l = instanceStart.count; i < l; i++, j += 2) {
      _start.fromBufferAttribute(instanceStart, i);
      _end.fromBufferAttribute(instanceEnd, i);
      lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];
      lineDistances[j + 1] = lineDistances[j] + _start.distanceTo(_end);
    }
    const instanceDistanceBuffer = new THREE3.InstancedInterleavedBuffer(lineDistances, 2, 1);
    geometry[setAttributeFn3]("instanceDistanceStart", new THREE3.InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0));
    geometry[setAttributeFn3]("instanceDistanceEnd", new THREE3.InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1));
    return this;
  }
  raycast(raycaster, intersects) {
    if (raycaster.camera === null) {
      console.error('LineSegments2: "Raycaster.camera" needs to be set in order to raycast against LineSegments2.');
    }
    const threshold3 = raycaster.params.Line2 !== void 0 ? raycaster.params.Line2.threshold || 0 : 0;
    const ray = raycaster.ray;
    const camera = raycaster.camera;
    const projectionMatrix = camera.projectionMatrix;
    const matrixWorld = this.matrixWorld;
    const geometry = this.geometry;
    const material = this.material;
    const resolution2 = material.resolution;
    const lineWidth = material.linewidth + threshold3;
    const instanceStart = geometry.attributes.instanceStart;
    const instanceEnd = geometry.attributes.instanceEnd;
    const near = -camera.near;
    const ssMaxWidth = 2 * Math.max(lineWidth / resolution2.width, lineWidth / resolution2.height);
    if (geometry.boundingSphere === null) {
      geometry.computeBoundingSphere();
    }
    _sphere.copy(geometry.boundingSphere).applyMatrix4(matrixWorld);
    const distanceToSphere = Math.max(camera.near, _sphere.distanceToPoint(ray.origin));
    _clipToWorldVector.set(0, 0, -distanceToSphere, 1).applyMatrix4(camera.projectionMatrix);
    _clipToWorldVector.multiplyScalar(1 / _clipToWorldVector.w);
    _clipToWorldVector.applyMatrix4(camera.projectionMatrixInverse);
    const sphereMargin = Math.abs(ssMaxWidth / _clipToWorldVector.w) * 0.5;
    _sphere.radius += sphereMargin;
    if (raycaster.ray.intersectsSphere(_sphere) === false) {
      return;
    }
    if (geometry.boundingBox === null) {
      geometry.computeBoundingBox();
    }
    _box.copy(geometry.boundingBox).applyMatrix4(matrixWorld);
    const distanceToBox = Math.max(camera.near, _box.distanceToPoint(ray.origin));
    _clipToWorldVector.set(0, 0, -distanceToBox, 1).applyMatrix4(camera.projectionMatrix);
    _clipToWorldVector.multiplyScalar(1 / _clipToWorldVector.w);
    _clipToWorldVector.applyMatrix4(camera.projectionMatrixInverse);
    const boxMargin = Math.abs(ssMaxWidth / _clipToWorldVector.w) * 0.5;
    _box.max.x += boxMargin;
    _box.max.y += boxMargin;
    _box.max.z += boxMargin;
    _box.min.x -= boxMargin;
    _box.min.y -= boxMargin;
    _box.min.z -= boxMargin;
    if (raycaster.ray.intersectsBox(_box) === false) {
      return;
    }
    ray.at(1, _ssOrigin);
    _ssOrigin.w = 1;
    _ssOrigin.applyMatrix4(camera.matrixWorldInverse);
    _ssOrigin.applyMatrix4(projectionMatrix);
    _ssOrigin.multiplyScalar(1 / _ssOrigin.w);
    _ssOrigin.x *= resolution2.x / 2;
    _ssOrigin.y *= resolution2.y / 2;
    _ssOrigin.z = 0;
    _ssOrigin3.copy(_ssOrigin);
    _mvMatrix.multiplyMatrices(camera.matrixWorldInverse, matrixWorld);
    for (let i = 0, l = instanceStart.count; i < l; i++) {
      _start4.fromBufferAttribute(instanceStart, i);
      _end4.fromBufferAttribute(instanceEnd, i);
      _start.w = 1;
      _end.w = 1;
      _start4.applyMatrix4(_mvMatrix);
      _end4.applyMatrix4(_mvMatrix);
      var isBehindCameraNear = _start4.z > near && _end4.z > near;
      if (isBehindCameraNear) {
        continue;
      }
      if (_start4.z > near) {
        const deltaDist = _start4.z - _end4.z;
        const t = (_start4.z - near) / deltaDist;
        _start4.lerp(_end4, t);
      } else if (_end4.z > near) {
        const deltaDist = _end4.z - _start4.z;
        const t = (_end4.z - near) / deltaDist;
        _end4.lerp(_start4, t);
      }
      _start4.applyMatrix4(projectionMatrix);
      _end4.applyMatrix4(projectionMatrix);
      _start4.multiplyScalar(1 / _start4.w);
      _end4.multiplyScalar(1 / _end4.w);
      _start4.x *= resolution2.x / 2;
      _start4.y *= resolution2.y / 2;
      _end4.x *= resolution2.x / 2;
      _end4.y *= resolution2.y / 2;
      _line.start.copy(_start4);
      _line.start.z = 0;
      _line.end.copy(_end4);
      _line.end.z = 0;
      const param = _line.closestPointToPointParameter(_ssOrigin3, true);
      _line.at(param, _closestPoint);
      const zPos = THREE3.MathUtils.lerp(_start4.z, _end4.z, param);
      const isInClipSpace = zPos >= -1 && zPos <= 1;
      const isInside = _ssOrigin3.distanceTo(_closestPoint) < lineWidth * 0.5;
      if (isInClipSpace && isInside) {
        _line.start.fromBufferAttribute(instanceStart, i);
        _line.end.fromBufferAttribute(instanceEnd, i);
        _line.start.applyMatrix4(matrixWorld);
        _line.end.applyMatrix4(matrixWorld);
        const pointOnLine = new THREE3.Vector3();
        const point3 = new THREE3.Vector3();
        ray.distanceSqToSegment(_line.start, _line.end, point3, pointOnLine);
        intersects.push({
          point: point3,
          pointOnLine,
          distance: ray.origin.distanceTo(point3),
          object: this,
          face: null,
          faceIndex: i,
          uv: null,
          uv2: null
        });
      }
    }
  }
};
LineSegments2.prototype.LineSegments2 = true;
var LineGeometry = class extends LineSegmentsGeometry {
  constructor() {
    super();
    this.type = "LineGeometry";
  }
  setPositions(array6) {
    var length = array6.length - 3;
    var points = new Float32Array(2 * length);
    for (var i = 0; i < length; i += 3) {
      points[2 * i] = array6[i];
      points[2 * i + 1] = array6[i + 1];
      points[2 * i + 2] = array6[i + 2];
      points[2 * i + 3] = array6[i + 3];
      points[2 * i + 4] = array6[i + 4];
      points[2 * i + 5] = array6[i + 5];
    }
    super.setPositions(points);
    return this;
  }
  setColors(array6) {
    var length = array6.length - 3;
    var colors = new Float32Array(2 * length);
    for (var i = 0; i < length; i += 3) {
      colors[2 * i] = array6[i];
      colors[2 * i + 1] = array6[i + 1];
      colors[2 * i + 2] = array6[i + 2];
      colors[2 * i + 3] = array6[i + 3];
      colors[2 * i + 4] = array6[i + 4];
      colors[2 * i + 5] = array6[i + 5];
    }
    super.setColors(colors);
    return this;
  }
  fromLine(line) {
    var geometry = line.geometry;
    if (geometry.isGeometry) {
      console.error("LineGeometry no longer supports Geometry. Use THREE.BufferGeometry instead.");
      return;
    } else if (geometry.isBufferGeometry) {
      this.setPositions(geometry.attributes.position.array);
    }
    return this;
  }
  copy() {
    return this;
  }
};
LineGeometry.prototype.isLineGeometry = true;
var Line2 = class extends LineSegments2 {
  constructor(geometry = new LineGeometry(), material = new LineMaterial({
    color: Math.random() * 16777215
  })) {
    super(geometry, material);
    this.type = "Line2";
  }
};
Line2.prototype.isLine2 = true;

// node_modules/three-globe/dist/three-globe.module.js
function ownKeys2(object3, enumerableOnly) {
  var keys = Object.keys(object3);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object3);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object3, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread22(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys2(Object(source), true).forEach(function(key) {
        _defineProperty2(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _classCallCheck4(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _inherits3(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass)
    _setPrototypeOf3(subClass, superClass);
}
function _getPrototypeOf3(o) {
  _getPrototypeOf3 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf4(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf3(o);
}
function _setPrototypeOf3(o, p) {
  _setPrototypeOf3 = Object.setPrototypeOf || function _setPrototypeOf4(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf3(o, p);
}
function _isNativeReflectConstruct3() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct3()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct2(Parent2, args2, Class2) {
      var a = [null];
      a.push.apply(a, args2);
      var Constructor = Function.bind.apply(Parent2, a);
      var instance = new Constructor();
      if (Class2)
        _setPrototypeOf3(instance, Class2.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
function _objectWithoutPropertiesLoose3(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties3(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose3(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _assertThisInitialized3(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _possibleConstructorReturn3(self2, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized3(self2);
}
function _createSuper3(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct3();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf3(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf3(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn3(this, result);
  };
}
function _slicedToArray6(arr, i) {
  return _arrayWithHoles6(arr) || _iterableToArrayLimit6(arr, i) || _unsupportedIterableToArray6(arr, i) || _nonIterableRest6();
}
function _toConsumableArray4(arr) {
  return _arrayWithoutHoles4(arr) || _iterableToArray4(arr) || _unsupportedIterableToArray6(arr) || _nonIterableSpread4();
}
function _arrayWithoutHoles4(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray6(arr);
}
function _arrayWithHoles6(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArray4(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _iterableToArrayLimit6(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _unsupportedIterableToArray6(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray6(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray6(o, minLen);
}
function _arrayLikeToArray6(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread4() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableRest6() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var materialDispose = function materialDispose2(material) {
  if (material instanceof Array) {
    material.forEach(materialDispose2);
  } else {
    if (material.map) {
      material.map.dispose();
    }
    material.dispose();
  }
};
var deallocate = function deallocate2(obj) {
  if (obj.geometry) {
    obj.geometry.dispose();
  }
  if (obj.material) {
    materialDispose(obj.material);
  }
  if (obj.texture) {
    obj.texture.dispose();
  }
  if (obj.children) {
    obj.children.forEach(deallocate2);
  }
};
var emptyObject = function emptyObject2(obj) {
  while (obj.children.length) {
    var childObj = obj.children[0];
    obj.remove(childObj);
    deallocate(childObj);
  }
};
function linkKapsule(kapsulePropName, kapsuleType) {
  var dummyK = new kapsuleType();
  return {
    linkProp: function linkProp(prop) {
      return {
        "default": dummyK[prop](),
        onChange: function onChange6(v2, state) {
          state[kapsulePropName][prop](v2);
        },
        triggerUpdate: false
      };
    },
    linkMethod: function linkMethod(method) {
      return function(state) {
        var kapsuleInstance = state[kapsulePropName];
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        var returnVal = kapsuleInstance[method].apply(kapsuleInstance, args);
        return returnVal === kapsuleInstance ? this : returnVal;
      };
    }
  };
}
var GLOBE_RADIUS = 100;
function polar2Cartesian3(lat, lng) {
  var relAltitude = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
  var phi = (90 - lat) * Math.PI / 180;
  var theta = (90 - lng) * Math.PI / 180;
  var r = GLOBE_RADIUS * (1 + relAltitude);
  return {
    x: r * Math.sin(phi) * Math.cos(theta),
    y: r * Math.cos(phi),
    z: r * Math.sin(phi) * Math.sin(theta)
  };
}
function cartesian2Polar(_ref) {
  var x = _ref.x, y = _ref.y, z = _ref.z;
  var r = Math.sqrt(x * x + y * y + z * z);
  var phi = Math.acos(y / r);
  var theta = Math.atan2(z, x);
  return {
    lat: 90 - phi * 180 / Math.PI,
    lng: 90 - theta * 180 / Math.PI - (theta < -Math.PI / 2 ? 360 : 0),
    altitude: r / GLOBE_RADIUS - 1
  };
}
var THREE$b = window.THREE ? window.THREE : {
  BackSide,
  BufferAttribute,
  Color,
  Mesh,
  ShaderMaterial
};
var fragmentShader = "\nuniform vec3 color;\nuniform float coefficient;\nuniform float power;\nvarying vec3 vVertexNormal;\nvarying vec3 vVertexWorldPosition;\nvoid main() {\n  vec3 worldCameraToVertex = vVertexWorldPosition - cameraPosition;\n  vec3 viewCameraToVertex	= (viewMatrix * vec4(worldCameraToVertex, 0.0)).xyz;\n  viewCameraToVertex = normalize(viewCameraToVertex);\n  float intensity	= pow(\n    coefficient + dot(vVertexNormal, viewCameraToVertex),\n    power\n  );\n  gl_FragColor = vec4(color, intensity);\n}";
var vertexShader = "\nvarying vec3 vVertexWorldPosition;\nvarying vec3 vVertexNormal;\nvoid main() {\n  vVertexNormal	= normalize(normalMatrix * normal);\n  vVertexWorldPosition = (modelMatrix * vec4(position, 1.0)).xyz;\n  gl_Position	= projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n";
var defaultOptions = {
  backside: true,
  coefficient: 0.5,
  color: "gold",
  size: 2,
  power: 1
};
function createGlowMaterial(coefficient, color3, power) {
  return new THREE$b.ShaderMaterial({
    depthWrite: false,
    fragmentShader,
    transparent: true,
    uniforms: {
      coefficient: {
        value: coefficient
      },
      color: {
        value: new THREE$b.Color(color3)
      },
      power: {
        value: power
      }
    },
    vertexShader
  });
}
function createGlowGeometry(geometry, size) {
  var glowGeometry = geometry.clone();
  var position = new Float32Array(geometry.attributes.position.count * 3);
  for (var idx = 0, len = position.length; idx < len; idx++) {
    var normal = geometry.attributes.normal.array[idx];
    var curPos = geometry.attributes.position.array[idx];
    position[idx] = curPos + normal * size;
  }
  glowGeometry.setAttribute("position", new THREE$b.BufferAttribute(position, 3));
  return glowGeometry;
}
function createGlowMesh(geometry) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultOptions;
  var backside = options.backside, coefficient = options.coefficient, color3 = options.color, size = options.size, power = options.power;
  var glowGeometry = createGlowGeometry(geometry, size);
  var glowMaterial = createGlowMaterial(coefficient, color3, power);
  if (backside) {
    glowMaterial.side = THREE$b.BackSide;
  }
  return new THREE$b.Mesh(glowGeometry, glowMaterial);
}
var THREE$a = window.THREE ? window.THREE : {
  Color,
  LineBasicMaterial,
  LineSegments,
  Mesh,
  MeshPhongMaterial,
  SphereBufferGeometry,
  TextureLoader
};
var GlobeLayerKapsule = kapsule_module_default({
  props: {
    globeImageUrl: {},
    bumpImageUrl: {},
    showGlobe: {
      "default": true,
      onChange: function onChange(showGlobe, state) {
        state.globeObj.visible = !!showGlobe;
      },
      triggerUpdate: false
    },
    showGraticules: {
      "default": false,
      onChange: function onChange2(showGraticules, state) {
        state.graticulesObj.visible = !!showGraticules;
      },
      triggerUpdate: false
    },
    showAtmosphere: {
      "default": true,
      onChange: function onChange3(showAtmosphere, state) {
        state.atmosphereObj && (state.atmosphereObj.visible = !!showAtmosphere);
      },
      triggerUpdate: false
    },
    atmosphereColor: {
      "default": "lightskyblue"
    },
    atmosphereAltitude: {
      "default": 0.15
    },
    onReady: {
      "default": function _default() {
      },
      triggerUpdate: false
    }
  },
  methods: {
    globeMaterial: function globeMaterial(state, _globeMaterial) {
      if (_globeMaterial !== void 0) {
        state.globeObj.material = _globeMaterial || state.defaultGlobeMaterial;
        return this;
      }
      return state.globeObj.material;
    }
  },
  stateInit: function stateInit() {
    var globeGeometry = new THREE$a.SphereBufferGeometry(GLOBE_RADIUS, 75, 75);
    var defaultGlobeMaterial = new THREE$a.MeshPhongMaterial({
      color: 0,
      transparent: true
    });
    var globeObj = new THREE$a.Mesh(globeGeometry, defaultGlobeMaterial);
    globeObj.rotation.y = -Math.PI / 2;
    globeObj.__globeObjType = "globe";
    var graticulesObj = new THREE$a.LineSegments(new GeoJsonGeometry(graticule10(), GLOBE_RADIUS, 2), new THREE$a.LineBasicMaterial({
      color: "lightgrey",
      transparent: true,
      opacity: 0.1
    }));
    return {
      globeObj,
      graticulesObj,
      defaultGlobeMaterial
    };
  },
  init: function init(threeObj, state) {
    emptyObject(threeObj);
    state.scene = threeObj;
    state.scene.add(state.globeObj);
    state.scene.add(state.graticulesObj);
    state.ready = false;
  },
  update: function update2(state, changedProps) {
    var globeMaterial2 = state.globeObj.material;
    if (changedProps.hasOwnProperty("globeImageUrl")) {
      if (!state.globeImageUrl) {
        !globeMaterial2.color && (globeMaterial2.color = new THREE$a.Color(0));
      } else {
        new THREE$a.TextureLoader().load(state.globeImageUrl, function(texture) {
          globeMaterial2.map = texture;
          globeMaterial2.color = null;
          globeMaterial2.needsUpdate = true;
          !state.ready && (state.ready = true) && setTimeout(state.onReady);
        });
      }
    }
    if (changedProps.hasOwnProperty("bumpImageUrl")) {
      if (!state.bumpImageUrl) {
        globeMaterial2.bumpMap = null;
        globeMaterial2.needsUpdate = true;
      } else {
        state.bumpImageUrl && new THREE$a.TextureLoader().load(state.bumpImageUrl, function(texture) {
          globeMaterial2.bumpMap = texture;
          globeMaterial2.needsUpdate = true;
        });
      }
    }
    if (changedProps.hasOwnProperty("atmosphereColor") || changedProps.hasOwnProperty("atmosphereAltitude")) {
      if (state.atmosphereObj) {
        state.scene.remove(state.atmosphereObj);
        emptyObject(state.atmosphereObj);
      }
      if (state.atmosphereColor && state.atmosphereAltitude) {
        var obj = state.atmosphereObj = createGlowMesh(state.globeObj.geometry, {
          backside: true,
          color: state.atmosphereColor,
          size: GLOBE_RADIUS * state.atmosphereAltitude,
          power: 3.5,
          coefficient: 0.1
        });
        obj.visible = !!state.showAtmosphere;
        obj.__globeObjType = "atmosphere";
        state.scene.add(obj);
      }
    }
    if (!state.ready && !state.globeImageUrl) {
      state.ready = true;
      state.onReady();
    }
  }
});
var colorStr2Hex = function colorStr2Hex2(str) {
  return isNaN(str) ? parseInt((0, import_tinycolor2.default)(str).toHex(), 16) : str;
};
var colorAlpha = function colorAlpha2(str) {
  return isNaN(str) ? (0, import_tinycolor2.default)(str).getAlpha() : 1;
};
var color2ShaderArr = function color2ShaderArr2(str) {
  var includeAlpha = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  var rgba3 = (0, import_tinycolor2.default)(str).toRgb();
  var rgbArr = ["r", "g", "b"].map(function(d) {
    return rgba3[d] / 255;
  });
  return includeAlpha ? [].concat(_toConsumableArray4(rgbArr), [rgba3.a]) : rgbArr;
};
function threeDigest(data, scene) {
  var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  return data_joint_module_default(data, scene.children, function(obj) {
    return scene.add(obj);
  }, function(obj) {
    scene.remove(obj);
    emptyObject(obj);
    obj.hasOwnProperty("__data") && delete obj.__data.__currentTargetD;
  }, _objectSpread22({
    objBindAttr: "__threeObj"
  }, options));
}
var THREE$9 = window.THREE ? window.THREE : {
  BufferAttribute,
  BufferGeometry,
  Color,
  CylinderBufferGeometry,
  Matrix4,
  Mesh,
  MeshBasicMaterial,
  MeshLambertMaterial,
  Object3D,
  Vector3
};
var applyMatrix4Fn$1 = new THREE$9.BufferGeometry().applyMatrix4 ? "applyMatrix4" : "applyMatrix";
var PointsLayerKapsule = kapsule_module_default({
  props: {
    pointsData: {
      "default": []
    },
    pointLat: {
      "default": "lat"
    },
    pointLng: {
      "default": "lng"
    },
    pointColor: {
      "default": function _default2() {
        return "#ffffaa";
      }
    },
    pointAltitude: {
      "default": 0.1
    },
    pointRadius: {
      "default": 0.25
    },
    pointResolution: {
      "default": 12,
      triggerUpdate: false
    },
    pointsMerge: {
      "default": false
    },
    pointsTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    }
  },
  init: function init2(threeObj, state) {
    emptyObject(threeObj);
    state.scene = threeObj;
  },
  update: function update3(state) {
    var latAccessor = accessor_fn_module_default(state.pointLat);
    var lngAccessor = accessor_fn_module_default(state.pointLng);
    var altitudeAccessor = accessor_fn_module_default(state.pointAltitude);
    var radiusAccessor = accessor_fn_module_default(state.pointRadius);
    var colorAccessor = accessor_fn_module_default(state.pointColor);
    var pointGeometry = new THREE$9.CylinderBufferGeometry(1, 1, 1, state.pointResolution);
    pointGeometry[applyMatrix4Fn$1](new THREE$9.Matrix4().makeRotationX(Math.PI / 2));
    pointGeometry[applyMatrix4Fn$1](new THREE$9.Matrix4().makeTranslation(0, 0, -0.5));
    var pxPerDeg = 2 * Math.PI * GLOBE_RADIUS / 360;
    var pointMaterials = {};
    var scene = state.pointsMerge ? new THREE$9.Object3D() : state.scene;
    threeDigest(state.pointsData, scene, {
      createObj,
      updateObj
    });
    if (state.pointsMerge) {
      var pointsGeometry = !state.pointsData.length ? new THREE$9.BufferGeometry() : BufferGeometryUtils.mergeBufferGeometries(state.pointsData.map(function(d) {
        var obj = d.__threeObj;
        d.__threeObj = void 0;
        var geom = obj.geometry.clone();
        obj.updateMatrix();
        geom[applyMatrix4Fn$1](obj.matrix);
        var color3 = new THREE$9.Color(colorAccessor(d));
        var nVertices = geom.attributes.position.count;
        var colors = new Float32Array(nVertices * 3);
        for (var i = 0, len = nVertices; i < len; i++) {
          var idx = i * 3;
          colors[idx] = color3.r;
          colors[idx + 1] = color3.g;
          colors[idx + 2] = color3.b;
        }
        geom.setAttribute("color", new THREE$9.BufferAttribute(colors, 3));
        return geom;
      }));
      var points = new THREE$9.Mesh(pointsGeometry, new THREE$9.MeshBasicMaterial({
        color: 16777215,
        vertexColors: true,
        morphTargets: false
      }));
      points.__globeObjType = "points";
      points.__data = state.pointsData;
      emptyObject(state.scene);
      state.scene.add(points);
    }
    function createObj() {
      var obj = new THREE$9.Mesh(pointGeometry);
      obj.__globeObjType = "point";
      return obj;
    }
    function updateObj(obj, d) {
      var applyUpdate = function applyUpdate2(td) {
        var _obj$__currentTargetD = obj.__currentTargetD = td, r = _obj$__currentTargetD.r, alt = _obj$__currentTargetD.alt, lat = _obj$__currentTargetD.lat, lng = _obj$__currentTargetD.lng;
        Object.assign(obj.position, polar2Cartesian3(lat, lng));
        var globeCenter = state.pointsMerge ? new THREE$9.Vector3(0, 0, 0) : state.scene.localToWorld(new THREE$9.Vector3(0, 0, 0));
        obj.lookAt(globeCenter);
        obj.scale.x = obj.scale.y = Math.min(30, r) * pxPerDeg;
        obj.scale.z = Math.max(alt * GLOBE_RADIUS, 0.1);
      };
      var targetD = {
        alt: +altitudeAccessor(d),
        r: +radiusAccessor(d),
        lat: +latAccessor(d),
        lng: +lngAccessor(d)
      };
      var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {
        alt: -1e-3
      });
      if (Object.keys(targetD).some(function(k) {
        return currentTargetD[k] !== targetD[k];
      })) {
        if (state.pointsMerge || !state.pointsTransitionDuration || state.pointsTransitionDuration < 0) {
          applyUpdate(targetD);
        } else {
          new tween_esm_default.Tween(currentTargetD).to(targetD, state.pointsTransitionDuration).easing(tween_esm_default.Easing.Quadratic.InOut).onUpdate(applyUpdate).start();
        }
      }
      if (!state.pointsMerge) {
        var color3 = colorAccessor(d);
        var opacity = colorAlpha(color3);
        if (!pointMaterials.hasOwnProperty(color3)) {
          pointMaterials[color3] = new THREE$9.MeshLambertMaterial({
            color: colorStr2Hex(color3),
            transparent: opacity < 1,
            opacity
          });
        }
        obj.material = pointMaterials[color3];
      }
    }
  }
});
var _excluded = ["stroke"];
var THREE$8 = window.THREE ? window.THREE : {
  BufferGeometry,
  CubicBezierCurve3,
  Curve,
  Float32BufferAttribute,
  Group,
  Line,
  Mesh,
  NormalBlending,
  QuadraticBezierCurve3,
  ShaderMaterial,
  TubeBufferGeometry,
  Vector3
};
var setAttributeFn$12 = new THREE$8.BufferGeometry().setAttribute ? "setAttribute" : "addAttribute";
var gradientShaders$1 = {
  uniforms: {
    dashOffset: {
      value: 0
    },
    dashSize: {
      value: 1
    },
    gapSize: {
      value: 0
    },
    dashTranslate: {
      value: 0
    }
  },
  vertexShader: "\n    uniform float dashTranslate; \n\n    attribute vec4 vertexColor;\n    varying vec4 vColor;\n    \n    attribute float vertexRelDistance;\n    varying float vRelDistance;\n\n    void main() {\n      // pass through colors and distances\n      vColor = vertexColor;\n      vRelDistance = vertexRelDistance + dashTranslate;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  ",
  fragmentShader: "\n    uniform float dashOffset; \n    uniform float dashSize;\n    uniform float gapSize; \n    \n    varying vec4 vColor;\n    varying float vRelDistance;\n    \n    void main() {\n      // ignore pixels in the gap\n      if (vRelDistance < dashOffset) discard;\n      if (mod(vRelDistance - dashOffset, dashSize + gapSize) > dashSize) discard;\n    \n      // set px color: [r, g, b, a], interpolated between vertices \n      gl_FragColor = vColor; \n    }\n  "
};
var ArcsLayerKapsule = kapsule_module_default({
  props: {
    arcsData: {
      "default": []
    },
    arcStartLat: {
      "default": "startLat"
    },
    arcStartLng: {
      "default": "startLng"
    },
    arcEndLat: {
      "default": "endLat"
    },
    arcEndLng: {
      "default": "endLng"
    },
    arcColor: {
      "default": function _default3() {
        return "#ffffaa";
      }
    },
    arcAltitude: {},
    arcAltitudeAutoScale: {
      "default": 0.5
    },
    arcStroke: {},
    arcCurveResolution: {
      "default": 64,
      triggerUpdate: false
    },
    arcCircularResolution: {
      "default": 6,
      triggerUpdate: false
    },
    arcDashLength: {
      "default": 1
    },
    arcDashGap: {
      "default": 0
    },
    arcDashInitialGap: {
      "default": 0
    },
    arcDashAnimateTime: {
      "default": 0
    },
    arcsTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    }
  },
  init: function init3(threeObj, state) {
    emptyObject(threeObj);
    state.scene = threeObj;
    new import_frame_ticker.default().onTick.add(function(_, timeDelta) {
      state.arcsData.filter(function(d) {
        return d.__threeObj && d.__threeObj.children.length && d.__threeObj.children[0].material && d.__threeObj.children[0].__dashAnimateStep;
      }).forEach(function(d) {
        var obj = d.__threeObj.children[0];
        var step = obj.__dashAnimateStep * timeDelta;
        var curTranslate = obj.material.uniforms.dashTranslate.value % 1e9;
        obj.material.uniforms.dashTranslate.value = curTranslate + step;
      });
    });
  },
  update: function update4(state) {
    var startLatAccessor = accessor_fn_module_default(state.arcStartLat);
    var startLngAccessor = accessor_fn_module_default(state.arcStartLng);
    var endLatAccessor = accessor_fn_module_default(state.arcEndLat);
    var endLngAccessor = accessor_fn_module_default(state.arcEndLng);
    var altitudeAccessor = accessor_fn_module_default(state.arcAltitude);
    var altitudeAutoScaleAccessor = accessor_fn_module_default(state.arcAltitudeAutoScale);
    var strokeAccessor = accessor_fn_module_default(state.arcStroke);
    var colorAccessor = accessor_fn_module_default(state.arcColor);
    var dashLengthAccessor = accessor_fn_module_default(state.arcDashLength);
    var dashGapAccessor = accessor_fn_module_default(state.arcDashGap);
    var dashInitialGapAccessor = accessor_fn_module_default(state.arcDashInitialGap);
    var dashAnimateTimeAccessor = accessor_fn_module_default(state.arcDashAnimateTime);
    var sharedMaterial = new THREE$8.ShaderMaterial(_objectSpread22(_objectSpread22({}, gradientShaders$1), {}, {
      transparent: true,
      blending: THREE$8.NormalBlending
    }));
    threeDigest(state.arcsData, state.scene, {
      createObj: function createObj() {
        var obj = new THREE$8.Group();
        obj.__globeObjType = "arc";
        return obj;
      },
      updateObj: function updateObj(group3, arc) {
        var stroke = strokeAccessor(arc);
        var useTube = stroke !== null && stroke !== void 0;
        if (!group3.children.length || useTube !== (group3.children[0].type === "Mesh")) {
          emptyObject(group3);
          var _obj = useTube ? new THREE$8.Mesh() : new THREE$8.Line(new THREE$8.BufferGeometry());
          _obj.material = sharedMaterial.clone();
          group3.add(_obj);
        }
        var obj = group3.children[0];
        Object.assign(obj.material.uniforms, {
          dashSize: {
            value: dashLengthAccessor(arc)
          },
          gapSize: {
            value: dashGapAccessor(arc)
          },
          dashOffset: {
            value: dashInitialGapAccessor(arc)
          }
        });
        var dashAnimateTime = dashAnimateTimeAccessor(arc);
        obj.__dashAnimateStep = dashAnimateTime > 0 ? 1e3 / dashAnimateTime : 0;
        var vertexColorArray = calcColorVertexArray(colorAccessor(arc), state.arcCurveResolution, useTube ? state.arcCircularResolution + 1 : 1);
        var vertexRelDistanceArray = calcVertexRelDistances(state.arcCurveResolution, useTube ? state.arcCircularResolution + 1 : 1, true);
        obj.geometry[setAttributeFn$12]("vertexColor", vertexColorArray);
        obj.geometry[setAttributeFn$12]("vertexRelDistance", vertexRelDistanceArray);
        var applyUpdate = function applyUpdate2(td) {
          var _arc$__currentTargetD = arc.__currentTargetD = td, stroke2 = _arc$__currentTargetD.stroke, curveD = _objectWithoutProperties3(_arc$__currentTargetD, _excluded);
          var curve = calcCurve(curveD);
          if (useTube) {
            obj.geometry && obj.geometry.dispose();
            obj.geometry = new THREE$8.TubeBufferGeometry(curve, state.arcCurveResolution, stroke2 / 2, state.arcCircularResolution);
            obj.geometry[setAttributeFn$12]("vertexColor", vertexColorArray);
            obj.geometry[setAttributeFn$12]("vertexRelDistance", vertexRelDistanceArray);
          } else {
            obj.geometry.setFromPoints(curve.getPoints(state.arcCurveResolution));
          }
        };
        var targetD = {
          stroke,
          alt: altitudeAccessor(arc),
          altAutoScale: +altitudeAutoScaleAccessor(arc),
          startLat: +startLatAccessor(arc),
          startLng: +startLngAccessor(arc),
          endLat: +endLatAccessor(arc),
          endLng: +endLngAccessor(arc)
        };
        var currentTargetD = arc.__currentTargetD || Object.assign({}, targetD, {
          altAutoScale: -1e-3
        });
        if (Object.keys(targetD).some(function(k) {
          return currentTargetD[k] !== targetD[k];
        })) {
          if (!state.arcsTransitionDuration || state.arcsTransitionDuration < 0) {
            applyUpdate(targetD);
          } else {
            new tween_esm_default.Tween(currentTargetD).to(targetD, state.arcsTransitionDuration).easing(tween_esm_default.Easing.Quadratic.InOut).onUpdate(applyUpdate).start();
          }
        }
      }
    });
    function calcCurve(_ref) {
      var alt = _ref.alt, altAutoScale = _ref.altAutoScale, startLat = _ref.startLat, startLng = _ref.startLng, endLat = _ref.endLat, endLng = _ref.endLng;
      var getVec = function getVec2(_ref2) {
        var _ref3 = _slicedToArray6(_ref2, 3), lng = _ref3[0], lat = _ref3[1], alt2 = _ref3[2];
        var _polar2Cartesian = polar2Cartesian3(lat, lng, alt2), x = _polar2Cartesian.x, y = _polar2Cartesian.y, z = _polar2Cartesian.z;
        return new THREE$8.Vector3(x, y, z);
      };
      var startPnt = [startLng, startLat];
      var endPnt = [endLng, endLat];
      var altitude = alt;
      (altitude === null || altitude === void 0) && (altitude = distance_default(startPnt, endPnt) / 2 * altAutoScale);
      if (altitude) {
        var interpolate = interpolate_default(startPnt, endPnt);
        var _map = [0.25, 0.75].map(function(t) {
          return [].concat(_toConsumableArray4(interpolate(t)), [altitude * 1.5]);
        }), _map2 = _slicedToArray6(_map, 2), m1Pnt = _map2[0], m2Pnt = _map2[1];
        var curve = _construct(THREE$8.CubicBezierCurve3, _toConsumableArray4([startPnt, m1Pnt, m2Pnt, endPnt].map(getVec)));
        return curve;
      } else {
        var _alt = 1e-3;
        return calcSphereArc.apply(void 0, _toConsumableArray4([[].concat(startPnt, [_alt]), [].concat(endPnt, [_alt])].map(getVec)));
      }
      function calcSphereArc(startVec, endVec) {
        var angle2 = startVec.angleTo(endVec);
        var getGreatCirclePoint = function getGreatCirclePoint2(t) {
          return new THREE$8.Vector3().addVectors(startVec.clone().multiplyScalar(Math.sin((1 - t) * angle2)), endVec.clone().multiplyScalar(Math.sin(t * angle2))).divideScalar(Math.sin(angle2));
        };
        var sphereArc = new THREE$8.Curve();
        sphereArc.getPoint = getGreatCirclePoint;
        return sphereArc;
      }
    }
    function calcColorVertexArray(colors, numSegments) {
      var numVerticesPerSegment = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
      var numVerticesGroup = numSegments + 1;
      var getVertexColor;
      if (colors instanceof Array) {
        var colorScale = linear2().domain(colors.map(function(_, idx) {
          return idx / (colors.length - 1);
        })).range(colors);
        getVertexColor = function getVertexColor2(t) {
          return color2ShaderArr(colorScale(t));
        };
      } else {
        var vertexColor = color2ShaderArr(colors);
        getVertexColor = function getVertexColor2() {
          return vertexColor;
        };
      }
      var vertexColorArray = new THREE$8.Float32BufferAttribute(numVerticesGroup * 4 * numVerticesPerSegment, 4);
      for (var v2 = 0, l = numVerticesGroup; v2 < l; v2++) {
        var _vertexColor = getVertexColor(v2 / (l - 1));
        for (var s = 0; s < numVerticesPerSegment; s++) {
          vertexColorArray.set(_vertexColor, (v2 * numVerticesPerSegment + s) * 4);
        }
      }
      return vertexColorArray;
    }
    function calcVertexRelDistances(numSegments) {
      var numVerticesPerSegment = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      var invert = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var numVerticesGroup = numSegments + 1;
      var arrLen = numVerticesGroup * numVerticesPerSegment;
      var vertexDistanceArray = new THREE$8.Float32BufferAttribute(arrLen, 1);
      for (var v2 = 0, l = numVerticesGroup; v2 < l; v2++) {
        var relDistance = v2 / (l - 1);
        for (var s = 0; s < numVerticesPerSegment; s++) {
          var idx = v2 * numVerticesPerSegment + s;
          var pos = invert ? arrLen - 1 - idx : idx;
          vertexDistanceArray.setX(pos, relDistance);
        }
      }
      return vertexDistanceArray;
    }
  }
});
var THREE$7 = window.THREE ? window.THREE : {
  BufferAttribute,
  BufferGeometry,
  Color,
  DoubleSide,
  Mesh,
  MeshBasicMaterial,
  MeshLambertMaterial,
  Object3D
};
var applyMatrix4Fn = new THREE$7.BufferGeometry().applyMatrix4 ? "applyMatrix4" : "applyMatrix";
var HexBinLayerKapsule = kapsule_module_default({
  props: {
    hexBinPointsData: {
      "default": []
    },
    hexBinPointLat: {
      "default": "lat"
    },
    hexBinPointLng: {
      "default": "lng"
    },
    hexBinPointWeight: {
      "default": 1
    },
    hexBinResolution: {
      "default": 4
    },
    hexMargin: {
      "default": 0.2
    },
    hexTopCurvatureResolution: {
      "default": 5
    },
    hexTopColor: {
      "default": function _default4() {
        return "#ffffaa";
      }
    },
    hexSideColor: {
      "default": function _default5() {
        return "#ffffaa";
      }
    },
    hexAltitude: {
      "default": function _default6(_ref) {
        var sumWeight = _ref.sumWeight;
        return sumWeight * 0.01;
      }
    },
    hexBinMerge: {
      "default": false
    },
    hexTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    }
  },
  init: function init4(threeObj, state) {
    emptyObject(threeObj);
    state.scene = threeObj;
  },
  update: function update5(state) {
    var latAccessor = accessor_fn_module_default(state.hexBinPointLat);
    var lngAccessor = accessor_fn_module_default(state.hexBinPointLng);
    var weightAccessor = accessor_fn_module_default(state.hexBinPointWeight);
    var altitudeAccessor = accessor_fn_module_default(state.hexAltitude);
    var topColorAccessor = accessor_fn_module_default(state.hexTopColor);
    var sideColorAccessor = accessor_fn_module_default(state.hexSideColor);
    var marginAccessor = accessor_fn_module_default(state.hexMargin);
    var byH3Idx = index_array_by_module_default(state.hexBinPointsData.map(function(d) {
      return _objectSpread22(_objectSpread22({}, d), {}, {
        h3Idx: geoToH3(latAccessor(d), lngAccessor(d), state.hexBinResolution)
      });
    }), "h3Idx");
    var hexBins = Object.entries(byH3Idx).map(function(_ref2) {
      var _ref3 = _slicedToArray6(_ref2, 2), h3Idx = _ref3[0], points = _ref3[1];
      return {
        h3Idx,
        points,
        sumWeight: points.reduce(function(agg, d) {
          return agg + +weightAccessor(d);
        }, 0)
      };
    });
    var hexMaterials = {};
    var scene = state.hexBinMerge ? new THREE$7.Object3D() : state.scene;
    threeDigest(hexBins, scene, {
      createObj,
      updateObj,
      idAccessor: function idAccessor(d) {
        return d.h3Idx;
      }
    });
    if (state.hexBinMerge) {
      var hexPointsGeometry = !hexBins.length ? new THREE$7.BufferGeometry() : BufferGeometryUtils.mergeBufferGeometries(hexBins.map(function(d) {
        var obj = d.__threeObj;
        d.__threeObj = void 0;
        var geom = obj.geometry.toNonIndexed();
        obj.updateMatrix();
        geom[applyMatrix4Fn](obj.matrix);
        var topColor = new THREE$7.Color(topColorAccessor(d));
        var sideColor = new THREE$7.Color(sideColorAccessor(d));
        var nVertices = geom.attributes.position.count;
        var topFaceIdx = geom.groups[0].count;
        var colors = new Float32Array(nVertices * 3);
        for (var i = 0, len = nVertices; i < len; i++) {
          var idx = i * 3;
          var c = i >= topFaceIdx ? topColor : sideColor;
          colors[idx] = c.r;
          colors[idx + 1] = c.g;
          colors[idx + 2] = c.b;
        }
        geom.setAttribute("color", new THREE$7.BufferAttribute(colors, 3));
        return geom;
      }));
      var hexPoints = new THREE$7.Mesh(hexPointsGeometry, new THREE$7.MeshBasicMaterial({
        color: 16777215,
        vertexColors: true,
        morphTargets: false,
        side: THREE$7.DoubleSide
      }));
      hexPoints.__globeObjType = "hexBinPoints";
      hexPoints.__data = hexBins;
      emptyObject(state.scene);
      state.scene.add(hexPoints);
    }
    function createObj(d) {
      var obj = new THREE$7.Mesh();
      obj.__hexCenter = h3ToGeo(d.h3Idx);
      obj.__hexGeoJson = h3ToGeoBoundary(d.h3Idx, true).reverse();
      var centerLng = obj.__hexCenter[1];
      obj.__hexGeoJson.forEach(function(d2) {
        var edgeLng = d2[0];
        if (Math.abs(centerLng - edgeLng) > 170) {
          d2[0] += centerLng > edgeLng ? 360 : -360;
        }
      });
      obj.__globeObjType = "hexbin";
      return obj;
    }
    function updateObj(obj, d) {
      var relNum = function relNum2(st, end, rat) {
        return st - (st - end) * rat;
      };
      var margin = Math.max(0, Math.min(1, +marginAccessor(d)));
      var _obj$__hexCenter = _slicedToArray6(obj.__hexCenter, 2), clat = _obj$__hexCenter[0], clng = _obj$__hexCenter[1];
      var geoJson = margin === 0 ? obj.__hexGeoJson : obj.__hexGeoJson.map(function(_ref4) {
        var _ref5 = _slicedToArray6(_ref4, 2), elng = _ref5[0], elat = _ref5[1];
        return [[elng, clng], [elat, clat]].map(function(_ref6) {
          var _ref7 = _slicedToArray6(_ref6, 2), st = _ref7[0], end = _ref7[1];
          return relNum(st, end, margin);
        });
      });
      var topCurvatureResolution = state.hexTopCurvatureResolution;
      obj.geometry = new ConicPolygonBufferGeometry([geoJson], 0, GLOBE_RADIUS, false, true, true, topCurvatureResolution);
      var targetD = {
        alt: +altitudeAccessor(d)
      };
      var applyUpdate = function applyUpdate2(td) {
        var _obj$__currentTargetD = obj.__currentTargetD = td, alt = _obj$__currentTargetD.alt;
        obj.scale.x = obj.scale.y = obj.scale.z = 1 + alt;
      };
      var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {
        alt: -1e-3
      });
      if (Object.keys(targetD).some(function(k) {
        return currentTargetD[k] !== targetD[k];
      })) {
        if (state.hexBinMerge || !state.hexTransitionDuration || state.hexTransitionDuration < 0) {
          applyUpdate(targetD);
        } else {
          new tween_esm_default.Tween(currentTargetD).to(targetD, state.hexTransitionDuration).easing(tween_esm_default.Easing.Quadratic.InOut).onUpdate(applyUpdate).start();
        }
      }
      if (!state.hexBinMerge) {
        var sideColor = sideColorAccessor(d);
        var topColor = topColorAccessor(d);
        [sideColor, topColor].forEach(function(color3) {
          if (!hexMaterials.hasOwnProperty(color3)) {
            var opacity = colorAlpha(color3);
            hexMaterials[color3] = new THREE$7.MeshLambertMaterial({
              color: colorStr2Hex(color3),
              transparent: opacity < 1,
              opacity,
              side: THREE$7.DoubleSide
            });
          }
        });
        obj.material = [sideColor, topColor].map(function(color3) {
          return hexMaterials[color3];
        });
      }
    }
  }
});
var THREE$6 = window.THREE ? window.THREE : {
  DoubleSide,
  Group,
  Line,
  LineBasicMaterial,
  Mesh,
  MeshBasicMaterial
};
var PolygonsLayerKapsule = kapsule_module_default({
  props: {
    polygonsData: {
      "default": []
    },
    polygonGeoJsonGeometry: {
      "default": "geometry"
    },
    polygonSideColor: {
      "default": function _default7() {
        return "#ffffaa";
      }
    },
    polygonSideMaterial: {},
    polygonCapColor: {
      "default": function _default8() {
        return "#ffffaa";
      }
    },
    polygonCapMaterial: {},
    polygonStrokeColor: {},
    polygonAltitude: {
      "default": 0.01
    },
    polygonCapCurvatureResolution: {
      "default": 5
    },
    polygonsTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    }
  },
  init: function init5(threeObj, state) {
    emptyObject(threeObj);
    state.scene = threeObj;
  },
  update: function update6(state) {
    var geoJsonAccessor = accessor_fn_module_default(state.polygonGeoJsonGeometry);
    var altitudeAccessor = accessor_fn_module_default(state.polygonAltitude);
    var capCurvatureResolutionAccessor = accessor_fn_module_default(state.polygonCapCurvatureResolution);
    var capColorAccessor = accessor_fn_module_default(state.polygonCapColor);
    var capMaterialAccessor = accessor_fn_module_default(state.polygonCapMaterial);
    var sideColorAccessor = accessor_fn_module_default(state.polygonSideColor);
    var sideMaterialAccessor = accessor_fn_module_default(state.polygonSideMaterial);
    var strokeColorAccessor = accessor_fn_module_default(state.polygonStrokeColor);
    var singlePolygons = [];
    state.polygonsData.forEach(function(polygon) {
      var objAttrs = {
        data: polygon,
        capColor: capColorAccessor(polygon),
        capMaterial: capMaterialAccessor(polygon),
        sideColor: sideColorAccessor(polygon),
        sideMaterial: sideMaterialAccessor(polygon),
        strokeColor: strokeColorAccessor(polygon),
        altitude: +altitudeAccessor(polygon),
        capCurvatureResolution: +capCurvatureResolutionAccessor(polygon)
      };
      var geoJson = geoJsonAccessor(polygon);
      var geoId = polygon.__id || "".concat(Math.round(Math.random() * 1e9));
      polygon.__id = geoId;
      if (geoJson.type === "Polygon") {
        singlePolygons.push(_objectSpread22({
          id: "".concat(geoId, "_0"),
          coords: geoJson.coordinates
        }, objAttrs));
      } else if (geoJson.type === "MultiPolygon") {
        singlePolygons.push.apply(singlePolygons, _toConsumableArray4(geoJson.coordinates.map(function(coords, idx) {
          return _objectSpread22({
            id: "".concat(geoId, "_").concat(idx),
            coords
          }, objAttrs);
        })));
      } else {
        console.warn("Unsupported GeoJson geometry type: ".concat(geoJson.type, ". Skipping geometry..."));
      }
    });
    threeDigest(singlePolygons, state.scene, {
      idAccessor: function idAccessor(d) {
        return d.id;
      },
      createObj: function createObj() {
        var obj = new THREE$6.Group();
        obj.__defaultSideMaterial = new THREE$6.MeshBasicMaterial({
          side: THREE$6.DoubleSide,
          depthWrite: true
        });
        obj.__defaultCapMaterial = new THREE$6.MeshBasicMaterial({
          side: THREE$6.DoubleSide,
          depthWrite: true
        });
        obj.add(new THREE$6.Mesh(void 0, [
          obj.__defaultSideMaterial,
          obj.__defaultCapMaterial
        ]));
        obj.add(new THREE$6.Line(void 0, new THREE$6.LineBasicMaterial()));
        obj.__globeObjType = "polygon";
        return obj;
      },
      updateObj: function updateObj(obj, _ref) {
        var coords = _ref.coords, capColor = _ref.capColor, capMaterial = _ref.capMaterial, sideColor = _ref.sideColor, sideMaterial = _ref.sideMaterial, strokeColor = _ref.strokeColor, altitude = _ref.altitude, capCurvatureResolution = _ref.capCurvatureResolution;
        var _obj$children = _slicedToArray6(obj.children, 2), conicObj = _obj$children[0], strokeObj = _obj$children[1];
        var addStroke = !!strokeColor;
        strokeObj.visible = addStroke;
        !objMatch(conicObj.geometry.parameters || {}, {
          polygonGeoJson: coords,
          curvatureResolution: capCurvatureResolution
        }) && (conicObj.geometry = new ConicPolygonBufferGeometry(coords, 0, GLOBE_RADIUS, false, true, true, capCurvatureResolution));
        addStroke && (!strokeObj.geometry.parameters || strokeObj.geometry.parameters.geoJson.coordinates !== coords || strokeObj.geometry.parameters.resolution !== capCurvatureResolution) && (strokeObj.geometry = new GeoJsonGeometry({
          type: "Polygon",
          coordinates: coords
        }, GLOBE_RADIUS, capCurvatureResolution));
        conicObj.material[0] = sideMaterial || obj.__defaultSideMaterial;
        conicObj.material[1] = capMaterial || obj.__defaultCapMaterial;
        [!sideMaterial && sideColor, !capMaterial && capColor].forEach(function(color3, materialIdx) {
          if (!color3)
            return;
          var material2 = conicObj.material[materialIdx];
          var opacity2 = colorAlpha(color3);
          material2.color.set(colorStr2Hex(color3));
          material2.transparent = opacity2 < 1;
          material2.opacity = opacity2;
        });
        if (addStroke) {
          var material = strokeObj.material;
          var opacity = colorAlpha(strokeColor);
          material.color.set(colorStr2Hex(strokeColor));
          material.transparent = opacity < 1;
          material.opacity = opacity;
        }
        var targetD = {
          alt: altitude
        };
        var applyUpdate = function applyUpdate2(td) {
          var _obj$__currentTargetD = obj.__currentTargetD = td, alt = _obj$__currentTargetD.alt;
          conicObj.scale.x = conicObj.scale.y = conicObj.scale.z = 1 + alt;
          addStroke && (strokeObj.scale.x = strokeObj.scale.y = strokeObj.scale.z = 1 + alt + 1e-4);
        };
        var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {
          alt: -1e-3
        });
        if (Object.keys(targetD).some(function(k) {
          return currentTargetD[k] !== targetD[k];
        })) {
          if (!state.polygonsTransitionDuration || state.polygonsTransitionDuration < 0 || currentTargetD.alt === targetD.alt) {
            applyUpdate(targetD);
          } else {
            new tween_esm_default.Tween(currentTargetD).to(targetD, state.polygonsTransitionDuration).easing(tween_esm_default.Easing.Quadratic.InOut).onUpdate(applyUpdate).start();
          }
        }
      }
    });
  }
});
function objMatch(obj, attrs) {
  var compFn = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function() {
    return function(a, b) {
      return a === b;
    };
  };
  return Object.entries(attrs).every(function(_ref2) {
    var _ref3 = _slicedToArray6(_ref2, 2), k = _ref3[0], v2 = _ref3[1];
    return obj.hasOwnProperty(k) && compFn(k)(obj[k], v2);
  });
}
var THREE$5 = window.THREE ? window.THREE : {
  BufferGeometry,
  DoubleSide,
  Mesh,
  MeshLambertMaterial
};
var HexedPolygonsLayerKapsule = kapsule_module_default({
  props: {
    hexPolygonsData: {
      "default": []
    },
    hexPolygonGeoJsonGeometry: {
      "default": "geometry"
    },
    hexPolygonColor: {
      "default": function _default9() {
        return "#ffffaa";
      }
    },
    hexPolygonAltitude: {
      "default": 1e-3
    },
    hexPolygonResolution: {
      "default": 3
    },
    hexPolygonMargin: {
      "default": 0.2
    },
    hexPolygonCurvatureResolution: {
      "default": 5
    },
    hexPolygonsTransitionDuration: {
      "default": 0,
      triggerUpdate: false
    }
  },
  init: function init6(threeObj, state) {
    emptyObject(threeObj);
    state.scene = threeObj;
  },
  update: function update7(state) {
    var geoJsonAccessor = accessor_fn_module_default(state.hexPolygonGeoJsonGeometry);
    var colorAccessor = accessor_fn_module_default(state.hexPolygonColor);
    var altitudeAccessor = accessor_fn_module_default(state.hexPolygonAltitude);
    var resolutionAccessor = accessor_fn_module_default(state.hexPolygonResolution);
    var marginAccessor = accessor_fn_module_default(state.hexPolygonMargin);
    var curvatureResolutionAccessor = accessor_fn_module_default(state.hexPolygonCurvatureResolution);
    threeDigest(state.hexPolygonsData, state.scene, {
      createObj: function createObj(d) {
        var obj = new THREE$5.Mesh(void 0, new THREE$5.MeshLambertMaterial({
          side: THREE$5.DoubleSide
        }));
        obj.__globeObjType = "hexPolygon";
        return obj;
      },
      updateObj: function updateObj(obj, d) {
        var geoJson = geoJsonAccessor(d);
        var h3Res = resolutionAccessor(d);
        var alt = altitudeAccessor(d);
        var margin = Math.max(0, Math.min(1, +marginAccessor(d)));
        var curvatureResolution = curvatureResolutionAccessor(d);
        var color3 = colorAccessor(d);
        var opacity = colorAlpha(color3);
        obj.material.color.set(colorStr2Hex(color3));
        obj.material.transparent = opacity < 1;
        obj.material.opacity = opacity;
        var h3Idxs = [];
        if (geoJson.type === "Polygon") {
          h3Idxs.push.apply(h3Idxs, _toConsumableArray4(polyfill(geoJson.coordinates, h3Res, true)));
        } else if (geoJson.type === "MultiPolygon") {
          geoJson.coordinates.forEach(function(coords) {
            return h3Idxs.push.apply(h3Idxs, _toConsumableArray4(polyfill(coords, h3Res, true)));
          });
        } else {
          console.warn("Unsupported GeoJson geometry type: ".concat(geoJson.type, ". Skipping geometry..."));
        }
        var hexBins = h3Idxs.map(function(h3Idx) {
          var hexCenter = h3ToGeo(h3Idx);
          var hexGeoJson = h3ToGeoBoundary(h3Idx, true).reverse();
          var centerLng = hexCenter[1];
          hexGeoJson.forEach(function(d2) {
            var edgeLng = d2[0];
            if (Math.abs(centerLng - edgeLng) > 170) {
              d2[0] += centerLng > edgeLng ? 360 : -360;
            }
          });
          return {
            h3Idx,
            hexCenter,
            hexGeoJson
          };
        });
        var targetD = {
          alt,
          margin,
          curvatureResolution
        };
        var applyUpdate = function applyUpdate2(td) {
          var _obj$__currentTargetD = obj.__currentTargetD = td, alt2 = _obj$__currentTargetD.alt, margin2 = _obj$__currentTargetD.margin, curvatureResolution2 = _obj$__currentTargetD.curvatureResolution;
          obj.geometry = !hexBins.length ? new THREE$5.BufferGeometry() : BufferGeometryUtils.mergeBufferGeometries(hexBins.map(function(h) {
            var relNum = function relNum2(st, end, rat) {
              return st - (st - end) * rat;
            };
            var _h$hexCenter = _slicedToArray6(h.hexCenter, 2), clat = _h$hexCenter[0], clng = _h$hexCenter[1];
            var geoJson2 = margin2 === 0 ? h.hexGeoJson : h.hexGeoJson.map(function(_ref) {
              var _ref2 = _slicedToArray6(_ref, 2), elng = _ref2[0], elat = _ref2[1];
              return [[elng, clng], [elat, clat]].map(function(_ref3) {
                var _ref4 = _slicedToArray6(_ref3, 2), st = _ref4[0], end = _ref4[1];
                return relNum(st, end, margin2);
              });
            });
            return new ConicPolygonBufferGeometry([geoJson2], GLOBE_RADIUS, GLOBE_RADIUS * (1 + alt2), false, true, false, curvatureResolution2);
          }));
        };
        var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {
          alt: -1e-3
        });
        if (Object.keys(targetD).some(function(k) {
          return currentTargetD[k] !== targetD[k];
        })) {
          if (!state.hexPolygonsTransitionDuration || state.hexPolygonsTransitionDuration < 0) {
            applyUpdate(targetD);
          } else {
            new tween_esm_default.Tween(currentTargetD).to(targetD, state.hexPolygonsTransitionDuration).easing(tween_esm_default.Easing.Quadratic.InOut).onUpdate(applyUpdate).start();
          }
        }
      }
    });
  }
});
var THREE$4 = window.THREE ? window.THREE : {
  Vector3
};
function interpolateVectors(fromPnts, toPnts) {
  var extendArr = function extendArr2(arr, length) {
    var repeatItem = arr[arr.length - 1];
    return [].concat(_toConsumableArray4(arr), _toConsumableArray4(_toConsumableArray4(new Array(length - arr.length)).map(function() {
      return repeatItem;
    })));
  };
  var arrLength = Math.max(fromPnts.length, toPnts.length);
  var interpolator = array_default.apply(void 0, _toConsumableArray4([fromPnts, toPnts].map(function(pnts) {
    return pnts.map(function(_ref) {
      var x = _ref.x, y = _ref.y, z = _ref.z;
      return [x, y, z];
    });
  }).map(function(arr) {
    return extendArr(arr, arrLength);
  })));
  return function(k) {
    return k === 0 ? fromPnts : k === 1 ? toPnts : interpolator(k).map(function(_ref2) {
      var _ref3 = _slicedToArray6(_ref2, 3), x = _ref3[0], y = _ref3[1], z = _ref3[2];
      return new THREE$4.Vector3(x, y, z);
    });
  };
}
var THREE$3 = window.THREE ? window.THREE : {
  BufferGeometry,
  Color,
  Float32BufferAttribute,
  Group,
  Line,
  NoColors,
  NormalBlending,
  ShaderMaterial,
  Vector3,
  VertexColors
};
var setAttributeFn4 = new THREE$3.BufferGeometry().setAttribute ? "setAttribute" : "addAttribute";
var gradientShaders = {
  uniforms: {
    dashOffset: {
      value: 0
    },
    dashSize: {
      value: 1
    },
    gapSize: {
      value: 0
    },
    dashTranslate: {
      value: 0
    }
  },
  vertexShader: "\n    uniform float dashTranslate;\n\n    attribute vec4 vertexColor;\n    varying vec4 vColor;\n\n    attribute float vertexRelDistance;\n    varying float vRelDistance;\n\n    void main() {\n      // pass through colors and distances\n      vColor = vertexColor;\n      vRelDistance = vertexRelDistance + dashTranslate;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  ",
  fragmentShader: "\n    uniform float dashOffset;\n    uniform float dashSize;\n    uniform float gapSize;\n\n    varying vec4 vColor;\n    varying float vRelDistance;\n\n    void main() {\n      // ignore pixels in the gap\n      if (vRelDistance < dashOffset) discard;\n      if (mod(vRelDistance - dashOffset, dashSize + gapSize) > dashSize) discard;\n\n      // set px color: [r, g, b, a], interpolated between vertices\n      gl_FragColor = vColor;\n    }\n  "
};
var PathsLayerKapsule = kapsule_module_default({
  props: {
    pathsData: {
      "default": []
    },
    pathPoints: {
      "default": function _default10(pnts) {
        return pnts;
      }
    },
    pathPointLat: {
      "default": function _default11(arr) {
        return arr[0];
      }
    },
    pathPointLng: {
      "default": function _default12(arr) {
        return arr[1];
      }
    },
    pathPointAlt: {
      "default": 1e-3
    },
    pathResolution: {
      "default": 2
    },
    pathColor: {
      "default": function _default13() {
        return "#ffffaa";
      }
    },
    pathStroke: {},
    pathDashLength: {
      "default": 1
    },
    pathDashGap: {
      "default": 0
    },
    pathDashInitialGap: {
      "default": 0
    },
    pathDashAnimateTime: {
      "default": 0
    },
    pathTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    },
    rendererSize: {}
  },
  init: function init7(threeObj, state) {
    emptyObject(threeObj);
    state.scene = threeObj;
    new import_frame_ticker.default().onTick.add(function(_, timeDelta) {
      state.pathsData.filter(function(d) {
        return d.__threeObj && d.__threeObj.children.length && d.__threeObj.children[0].material && d.__threeObj.children[0].__dashAnimateStep;
      }).forEach(function(d) {
        var obj = d.__threeObj.children[0];
        var step = obj.__dashAnimateStep * timeDelta;
        if (obj.type === "Line") {
          var curTranslate = obj.material.uniforms.dashTranslate.value % 1e9;
          obj.material.uniforms.dashTranslate.value = curTranslate + step;
        } else if (obj.type === "Line2") {
          var offset = obj.material.dashOffset - step;
          var dashLength = obj.material.dashSize + obj.material.gapSize;
          while (offset <= -dashLength) {
            offset += dashLength;
          }
          obj.material.dashOffset = offset;
        }
      });
    });
  },
  update: function update8(state) {
    var pointsAccessor = accessor_fn_module_default(state.pathPoints);
    var pointLatAccessor = accessor_fn_module_default(state.pathPointLat);
    var pointLngAccessor = accessor_fn_module_default(state.pathPointLng);
    var pointAltAccessor = accessor_fn_module_default(state.pathPointAlt);
    var strokeAccessor = accessor_fn_module_default(state.pathStroke);
    var colorAccessor = accessor_fn_module_default(state.pathColor);
    var dashLengthAccessor = accessor_fn_module_default(state.pathDashLength);
    var dashGapAccessor = accessor_fn_module_default(state.pathDashGap);
    var dashInitialGapAccessor = accessor_fn_module_default(state.pathDashInitialGap);
    var dashAnimateTimeAccessor = accessor_fn_module_default(state.pathDashAnimateTime);
    var sharedShaderMaterial = new THREE$3.ShaderMaterial(_objectSpread22(_objectSpread22({}, gradientShaders), {}, {
      transparent: true,
      blending: THREE$3.NormalBlending
    }));
    threeDigest(state.pathsData, state.scene, {
      createObj: function createObj() {
        var obj = new THREE$3.Group();
        obj.__globeObjType = "path";
        return obj;
      },
      updateObj: function updateObj(group3, path) {
        var stroke = strokeAccessor(path);
        var useFatLine = stroke !== null && stroke !== void 0;
        if (!group3.children.length || useFatLine === (group3.children[0].type === "Line")) {
          emptyObject(group3);
          var _obj = useFatLine ? new Line2(new LineGeometry(), new LineMaterial()) : new THREE$3.Line(new THREE$3.BufferGeometry(), sharedShaderMaterial.clone());
          group3.add(_obj);
        }
        var obj = group3.children[0];
        var points = calcPath(pointsAccessor(path), pointLatAccessor, pointLngAccessor, pointAltAccessor, state.pathResolution);
        var dashAnimateTime = dashAnimateTimeAccessor(path);
        obj.__dashAnimateStep = dashAnimateTime > 0 ? 1e3 / dashAnimateTime : 0;
        if (!useFatLine) {
          Object.assign(obj.material.uniforms, {
            dashSize: {
              value: dashLengthAccessor(path)
            },
            gapSize: {
              value: dashGapAccessor(path)
            },
            dashOffset: {
              value: dashInitialGapAccessor(path)
            }
          });
          var vertexColorArray = calcColorVertexArray(colorAccessor(path), points.length);
          var vertexRelDistanceArray = calcVertexRelDistances(points.length, 1, true);
          obj.geometry[setAttributeFn4]("vertexColor", vertexColorArray);
          obj.geometry[setAttributeFn4]("vertexRelDistance", vertexRelDistanceArray);
        } else {
          obj.material.resolution = state.rendererSize;
          {
            var dashLength = dashLengthAccessor(path);
            var dashGap = dashGapAccessor(path);
            var dashInitialGap = dashInitialGapAccessor(path);
            obj.material.dashed = dashGap > 0;
            obj.material.dashed ? obj.material.defines.USE_DASH = "" : delete obj.material.defines.USE_DASH;
            if (obj.material.dashed) {
              obj.material.dashScale = 1 / calcLineDistance(points);
              obj.material.dashSize = dashLength;
              obj.material.gapSize = dashGap;
              obj.material.dashOffset = -dashInitialGap;
            }
          }
          {
            var colors = colorAccessor(path);
            if (colors instanceof Array) {
              var _vertexColorArray = calcColorVertexArray(colorAccessor(path), points.length - 1, 1, false);
              obj.geometry.setColors(_vertexColorArray.array);
              obj.material.vertexColors = THREE$3.VertexColors;
            } else {
              var color3 = colors;
              var opacity = colorAlpha(color3);
              obj.material.color = new THREE$3.Color(colorStr2Hex(color3));
              obj.material.transparent = opacity < 1;
              obj.material.opacity = opacity;
              obj.material.vertexColors = THREE$3.NoColors;
            }
          }
          obj.material.needsUpdate = true;
        }
        var pointsInterpolator = interpolateVectors(path.__currentTargetD && path.__currentTargetD.points || [points[0]], points);
        var applyUpdate = function applyUpdate2(td) {
          var _path$__currentTarget = path.__currentTargetD = td, stroke2 = _path$__currentTarget.stroke, interpolK = _path$__currentTarget.interpolK;
          var kPoints = path.__currentTargetD.points = pointsInterpolator(interpolK);
          if (useFatLine) {
            var _ref;
            obj.geometry.setPositions((_ref = []).concat.apply(_ref, _toConsumableArray4(kPoints.map(function(_ref2) {
              var x = _ref2.x, y = _ref2.y, z = _ref2.z;
              return [x, y, z];
            }))));
            obj.material.linewidth = stroke2;
            obj.material.dashed && obj.computeLineDistances();
          } else {
            obj.geometry.setFromPoints(kPoints);
            obj.geometry.computeBoundingSphere();
          }
        };
        var targetD = {
          stroke,
          interpolK: 1
        };
        var currentTargetD = Object.assign({}, path.__currentTargetD || targetD, {
          interpolK: 0
        });
        if (Object.keys(targetD).some(function(k) {
          return currentTargetD[k] !== targetD[k];
        })) {
          if (!state.pathTransitionDuration || state.pathTransitionDuration < 0) {
            applyUpdate(targetD);
          } else {
            new tween_esm_default.Tween(currentTargetD).to(targetD, state.pathTransitionDuration).easing(tween_esm_default.Easing.Quadratic.InOut).onUpdate(applyUpdate).start();
          }
        }
      }
    });
    function calcLineDistance(pnts) {
      var totalDist = 0;
      var prevPnt;
      pnts.forEach(function(pnt) {
        prevPnt && (totalDist += prevPnt.distanceTo(pnt));
        prevPnt = pnt;
      });
      return totalDist;
    }
    function calcPath(points, latAccessor, lngAccessor, altAccessor, angularResolution) {
      var getInterpolatedVals = function getInterpolatedVals2(start, end, numPnts) {
        var result = [];
        for (var i = 1; i <= numPnts; i++) {
          result.push(start + (end - start) * i / (numPnts + 1));
        }
        return result;
      };
      var interpolateLine3 = function interpolateLine4() {
        var lineCoords = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
        var maxDegDistance = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
        var result = [];
        var prevPnt = null;
        lineCoords.forEach(function(pnt) {
          if (prevPnt) {
            while (Math.abs(prevPnt[1] - pnt[1]) > 180) {
              prevPnt[1] += 360 * (prevPnt[1] < pnt[1] ? 1 : -1);
            }
            var dist3 = Math.sqrt(Math.pow(pnt[0] - prevPnt[0], 2) + Math.pow(pnt[1] - prevPnt[1], 2));
            if (dist3 > maxDegDistance) {
              var numAdditionalPnts = Math.floor(dist3 / maxDegDistance);
              var lats = getInterpolatedVals(prevPnt[0], pnt[0], numAdditionalPnts);
              var lngs = getInterpolatedVals(prevPnt[1], pnt[1], numAdditionalPnts);
              var alts = getInterpolatedVals(prevPnt[2], pnt[2], numAdditionalPnts);
              for (var i = 0, len = lats.length; i < len; i++) {
                result.push([lats[i], lngs[i], alts[i]]);
              }
            }
          }
          result.push(prevPnt = pnt);
        });
        return result;
      };
      var getVec = function getVec2(_ref3) {
        var _ref4 = _slicedToArray6(_ref3, 3), lat = _ref4[0], lng = _ref4[1], alt = _ref4[2];
        var _polar2Cartesian = polar2Cartesian3(lat, lng, alt), x = _polar2Cartesian.x, y = _polar2Cartesian.y, z = _polar2Cartesian.z;
        return new THREE$3.Vector3(x, y, z);
      };
      return interpolateLine3(points.map(function(pnt) {
        return [latAccessor(pnt), lngAccessor(pnt), altAccessor(pnt)];
      }), angularResolution).map(getVec);
    }
    function calcColorVertexArray(colors, numSegments) {
      var numVerticesPerSegment = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
      var includeAlpha = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
      var numVerticesGroup = numSegments + 1;
      var getVertexColor;
      if (colors instanceof Array) {
        var colorScale = linear2().domain(colors.map(function(_, idx) {
          return idx / (colors.length - 1);
        })).range(colors);
        getVertexColor = function getVertexColor2(t) {
          return color2ShaderArr(colorScale(t), includeAlpha);
        };
      } else {
        var vertexColor = color2ShaderArr(colors, includeAlpha);
        getVertexColor = function getVertexColor2() {
          return vertexColor;
        };
      }
      var numArgs = includeAlpha ? 4 : 3;
      var vertexColorArray = new THREE$3.Float32BufferAttribute(numVerticesGroup * numArgs * numVerticesPerSegment, numArgs);
      for (var v2 = 0, l = numVerticesGroup; v2 < l; v2++) {
        var _vertexColor = getVertexColor(v2 / (l - 1));
        for (var s = 0; s < numVerticesPerSegment; s++) {
          vertexColorArray.set(_vertexColor, (v2 * numVerticesPerSegment + s) * numArgs);
        }
      }
      return vertexColorArray;
    }
    function calcVertexRelDistances(numSegments) {
      var numVerticesPerSegment = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      var invert = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var numVerticesGroup = numSegments + 1;
      var arrLen = numVerticesGroup * numVerticesPerSegment;
      var vertexDistanceArray = new THREE$3.Float32BufferAttribute(arrLen, 1);
      for (var v2 = 0, l = numVerticesGroup; v2 < l; v2++) {
        var relDistance = v2 / (l - 1);
        for (var s = 0; s < numVerticesPerSegment; s++) {
          var idx = v2 * numVerticesPerSegment + s;
          var pos = invert ? arrLen - 1 - idx : idx;
          vertexDistanceArray.setX(pos, relDistance);
        }
      }
      return vertexDistanceArray;
    }
  }
});
var THREE$22 = window.THREE ? window.THREE : {
  Euler,
  Mesh,
  MeshLambertMaterial,
  SphereBufferGeometry
};
var TilesLayerKapsule = kapsule_module_default({
  props: {
    tilesData: {
      "default": []
    },
    tileLat: {
      "default": "lat"
    },
    tileLng: {
      "default": "lng"
    },
    tileAltitude: {
      "default": 0.01
    },
    tileWidth: {
      "default": 1
    },
    tileHeight: {
      "default": 1
    },
    tileUseGlobeProjection: {
      "default": true
    },
    tileMaterial: {
      "default": function _default14() {
        return new THREE$22.MeshLambertMaterial({
          color: "#ffbb88",
          opacity: 0.4,
          transparent: true
        });
      }
    },
    tileCurvatureResolution: {
      "default": 5
    },
    tilesTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    }
  },
  init: function init8(threeObj, state) {
    emptyObject(threeObj);
    state.scene = threeObj;
  },
  update: function update9(state) {
    var latAccessor = accessor_fn_module_default(state.tileLat);
    var lngAccessor = accessor_fn_module_default(state.tileLng);
    var altitudeAccessor = accessor_fn_module_default(state.tileAltitude);
    var widthAccessor = accessor_fn_module_default(state.tileWidth);
    var heightAccessor = accessor_fn_module_default(state.tileHeight);
    var useGlobeProjectionAccessor = accessor_fn_module_default(state.tileUseGlobeProjection);
    var materialAccessor = accessor_fn_module_default(state.tileMaterial);
    var curvatureResolutionAccessor = accessor_fn_module_default(state.tileCurvatureResolution);
    threeDigest(state.tilesData, state.scene, {
      createObj: function createObj() {
        var obj = new THREE$22.Mesh();
        obj.__globeObjType = "tile";
        return obj;
      },
      updateObj: function updateObj(obj, d) {
        obj.material = materialAccessor(d);
        var useGlobeProjection = useGlobeProjectionAccessor(d);
        var curvatureResolution = curvatureResolutionAccessor(d);
        var applyPosition = function applyPosition2(td) {
          var _obj$__currentTargetD = obj.__currentTargetD = td, lat = _obj$__currentTargetD.lat, lng = _obj$__currentTargetD.lng, alt = _obj$__currentTargetD.alt, width = _obj$__currentTargetD.width, height = _obj$__currentTargetD.height;
          var rotLng = deg2Rad(lng);
          var rotLat = deg2Rad(-lat);
          obj.geometry = new THREE$22.SphereBufferGeometry(GLOBE_RADIUS * (1 + alt), Math.ceil(width / (curvatureResolution || -1)), Math.ceil(height / (curvatureResolution || -1)), deg2Rad(90 - width / 2) + (useGlobeProjection ? rotLng : 0), deg2Rad(width), deg2Rad(90 - height / 2) + (useGlobeProjection ? rotLat : 0), deg2Rad(height));
          if (!useGlobeProjection) {
            obj.setRotationFromEuler(new THREE$22.Euler(rotLat, rotLng, 0, "YXZ"));
          }
        };
        var targetD = {
          lat: +latAccessor(d),
          lng: +lngAccessor(d),
          alt: +altitudeAccessor(d),
          width: +widthAccessor(d),
          height: +heightAccessor(d)
        };
        var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {
          width: 0,
          height: 0
        });
        if (Object.keys(targetD).some(function(k) {
          return currentTargetD[k] !== targetD[k];
        })) {
          if (!state.tilesTransitionDuration || state.tilesTransitionDuration < 0) {
            applyPosition(targetD);
          } else {
            new tween_esm_default.Tween(currentTargetD).to(targetD, state.tilesTransitionDuration).easing(tween_esm_default.Easing.Quadratic.InOut).onUpdate(applyPosition).start();
          }
        }
      }
    });
  }
});
var deg2Rad = function deg2Rad2(deg) {
  return deg * Math.PI / 180;
};
var glyphs = { "0": { x_min: 73, x_max: 715, ha: 792, o: "m 394 -29 q 153 129 242 -29 q 73 479 73 272 q 152 829 73 687 q 394 989 241 989 q 634 829 545 989 q 715 479 715 684 q 635 129 715 270 q 394 -29 546 -29 m 394 89 q 546 211 489 89 q 598 479 598 322 q 548 748 598 640 q 394 871 491 871 q 241 748 298 871 q 190 479 190 637 q 239 211 190 319 q 394 89 296 89 " }, "1": { x_min: 215.671875, x_max: 574, ha: 792, o: "m 574 0 l 442 0 l 442 697 l 215 697 l 215 796 q 386 833 330 796 q 475 986 447 875 l 574 986 l 574 0 " }, "2": { x_min: 59, x_max: 731, ha: 792, o: "m 731 0 l 59 0 q 197 314 59 188 q 457 487 199 315 q 598 691 598 580 q 543 819 598 772 q 411 867 488 867 q 272 811 328 867 q 209 630 209 747 l 81 630 q 182 901 81 805 q 408 986 271 986 q 629 909 536 986 q 731 694 731 826 q 613 449 731 541 q 378 316 495 383 q 201 122 235 234 l 731 122 l 731 0 " }, "3": { x_min: 54, x_max: 737, ha: 792, o: "m 737 284 q 635 55 737 141 q 399 -25 541 -25 q 156 52 248 -25 q 54 308 54 140 l 185 308 q 245 147 185 202 q 395 96 302 96 q 539 140 484 96 q 602 280 602 190 q 510 429 602 390 q 324 454 451 454 l 324 565 q 487 584 441 565 q 565 719 565 617 q 515 835 565 791 q 395 879 466 879 q 255 824 307 879 q 203 661 203 769 l 78 661 q 166 909 78 822 q 387 992 250 992 q 603 921 513 992 q 701 723 701 844 q 669 607 701 656 q 578 524 637 558 q 696 434 655 499 q 737 284 737 369 " }, "4": { x_min: 48, x_max: 742.453125, ha: 792, o: "m 742 243 l 602 243 l 602 0 l 476 0 l 476 243 l 48 243 l 48 368 l 476 958 l 602 958 l 602 354 l 742 354 l 742 243 m 476 354 l 476 792 l 162 354 l 476 354 " }, "5": { x_min: 54.171875, x_max: 738, ha: 792, o: "m 738 314 q 626 60 738 153 q 382 -23 526 -23 q 155 47 248 -23 q 54 256 54 125 l 183 256 q 259 132 204 174 q 382 91 314 91 q 533 149 471 91 q 602 314 602 213 q 538 469 602 411 q 386 528 475 528 q 284 506 332 528 q 197 439 237 484 l 81 439 l 159 958 l 684 958 l 684 840 l 254 840 l 214 579 q 306 627 258 612 q 407 643 354 643 q 636 552 540 643 q 738 314 738 457 " }, "6": { x_min: 53, x_max: 739, ha: 792, o: "m 739 312 q 633 62 739 162 q 400 -31 534 -31 q 162 78 257 -31 q 53 439 53 206 q 178 859 53 712 q 441 986 284 986 q 643 912 559 986 q 732 713 732 833 l 601 713 q 544 830 594 786 q 426 875 494 875 q 268 793 331 875 q 193 517 193 697 q 301 597 240 570 q 427 624 362 624 q 643 540 552 624 q 739 312 739 451 m 603 298 q 540 461 603 400 q 404 516 484 516 q 268 461 323 516 q 207 300 207 401 q 269 137 207 198 q 405 83 325 83 q 541 137 486 83 q 603 298 603 197 " }, "7": { x_min: 58.71875, x_max: 730.953125, ha: 792, o: "m 730 839 q 469 448 560 641 q 335 0 378 255 l 192 0 q 328 441 235 252 q 593 830 421 630 l 58 830 l 58 958 l 730 958 l 730 839 " }, "8": { x_min: 55, x_max: 736, ha: 792, o: "m 571 527 q 694 424 652 491 q 736 280 736 358 q 648 71 736 158 q 395 -26 551 -26 q 142 69 238 -26 q 55 279 55 157 q 96 425 55 359 q 220 527 138 491 q 120 615 153 562 q 88 726 88 668 q 171 904 88 827 q 395 986 261 986 q 618 905 529 986 q 702 727 702 830 q 670 616 702 667 q 571 527 638 565 m 394 565 q 519 610 475 565 q 563 717 563 655 q 521 823 563 781 q 392 872 474 872 q 265 824 312 872 q 224 720 224 783 q 265 613 224 656 q 394 565 312 565 m 395 91 q 545 150 488 91 q 597 280 597 204 q 546 408 597 355 q 395 465 492 465 q 244 408 299 465 q 194 280 194 356 q 244 150 194 203 q 395 91 299 91 " }, "9": { x_min: 53, x_max: 739, ha: 792, o: "m 739 524 q 619 94 739 241 q 362 -32 516 -32 q 150 47 242 -32 q 59 244 59 126 l 191 244 q 246 129 191 176 q 373 82 301 82 q 526 161 466 82 q 597 440 597 255 q 363 334 501 334 q 130 432 216 334 q 53 650 53 521 q 134 880 53 786 q 383 986 226 986 q 659 841 566 986 q 739 524 739 719 m 388 449 q 535 514 480 449 q 585 658 585 573 q 535 805 585 744 q 388 873 480 873 q 242 809 294 873 q 191 658 191 745 q 239 514 191 572 q 388 449 292 449 " }, "\u03BF": { x_min: 0, x_max: 712, ha: 815, o: "m 356 -25 q 96 88 192 -25 q 0 368 0 201 q 92 642 0 533 q 356 761 192 761 q 617 644 517 761 q 712 368 712 533 q 619 91 712 201 q 356 -25 520 -25 m 356 85 q 527 175 465 85 q 583 369 583 255 q 528 562 583 484 q 356 651 466 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 356 85 250 85 " }, S: { x_min: 0, x_max: 788, ha: 890, o: "m 788 291 q 662 54 788 144 q 397 -26 550 -26 q 116 68 226 -26 q 0 337 0 168 l 131 337 q 200 152 131 220 q 384 85 269 85 q 557 129 479 85 q 650 270 650 183 q 490 429 650 379 q 194 513 341 470 q 33 739 33 584 q 142 964 33 881 q 388 1041 242 1041 q 644 957 543 1041 q 756 716 756 867 l 625 716 q 561 874 625 816 q 395 933 497 933 q 243 891 309 933 q 164 759 164 841 q 325 609 164 656 q 625 526 475 568 q 788 291 788 454 " }, "\xA6": { x_min: 343, x_max: 449, ha: 792, o: "m 449 462 l 343 462 l 343 986 l 449 986 l 449 462 m 449 -242 l 343 -242 l 343 280 l 449 280 l 449 -242 " }, "/": { x_min: 183.25, x_max: 608.328125, ha: 792, o: "m 608 1041 l 266 -129 l 183 -129 l 520 1041 l 608 1041 " }, "\u03A4": { x_min: -0.4375, x_max: 777.453125, ha: 839, o: "m 777 893 l 458 893 l 458 0 l 319 0 l 319 892 l 0 892 l 0 1013 l 777 1013 l 777 893 " }, y: { x_min: 0, x_max: 684.78125, ha: 771, o: "m 684 738 l 388 -83 q 311 -216 356 -167 q 173 -279 252 -279 q 97 -266 133 -279 l 97 -149 q 132 -155 109 -151 q 168 -160 155 -160 q 240 -114 213 -160 q 274 -26 248 -98 l 0 738 l 137 737 l 341 139 l 548 737 l 684 738 " }, "\u03A0": { x_min: 0, x_max: 803, ha: 917, o: "m 803 0 l 667 0 l 667 886 l 140 886 l 140 0 l 0 0 l 0 1012 l 803 1012 l 803 0 " }, "\u0390": { x_min: -111, x_max: 339, ha: 361, o: "m 339 800 l 229 800 l 229 925 l 339 925 l 339 800 m -1 800 l -111 800 l -111 925 l -1 925 l -1 800 m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 737 l 167 737 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 103 239 101 q 284 112 257 104 l 284 3 m 302 1040 l 113 819 l 30 819 l 165 1040 l 302 1040 " }, g: { x_min: 0, x_max: 686, ha: 838, o: "m 686 34 q 586 -213 686 -121 q 331 -306 487 -306 q 131 -252 216 -306 q 31 -84 31 -190 l 155 -84 q 228 -174 166 -138 q 345 -207 284 -207 q 514 -109 454 -207 q 564 89 564 -27 q 461 6 521 36 q 335 -23 401 -23 q 88 100 184 -23 q 0 370 0 215 q 87 634 0 522 q 330 758 183 758 q 457 728 398 758 q 564 644 515 699 l 564 737 l 686 737 l 686 34 m 582 367 q 529 560 582 481 q 358 652 468 652 q 189 561 250 652 q 135 369 135 482 q 189 176 135 255 q 361 85 251 85 q 529 176 468 85 q 582 367 582 255 " }, "\xB2": { x_min: 0, x_max: 442, ha: 539, o: "m 442 383 l 0 383 q 91 566 0 492 q 260 668 176 617 q 354 798 354 727 q 315 875 354 845 q 227 905 277 905 q 136 869 173 905 q 99 761 99 833 l 14 761 q 82 922 14 864 q 232 974 141 974 q 379 926 316 974 q 442 797 442 878 q 351 635 442 704 q 183 539 321 611 q 92 455 92 491 l 442 455 l 442 383 " }, "\u2013": { x_min: 0, x_max: 705.5625, ha: 803, o: "m 705 334 l 0 334 l 0 410 l 705 410 l 705 334 " }, "\u039A": { x_min: 0, x_max: 819.5625, ha: 893, o: "m 819 0 l 650 0 l 294 509 l 139 356 l 139 0 l 0 0 l 0 1013 l 139 1013 l 139 526 l 626 1013 l 809 1013 l 395 600 l 819 0 " }, "\u0192": { x_min: -46.265625, x_max: 392, ha: 513, o: "m 392 651 l 259 651 l 79 -279 l -46 -278 l 134 651 l 14 651 l 14 751 l 135 751 q 151 948 135 900 q 304 1041 185 1041 q 334 1040 319 1041 q 392 1034 348 1039 l 392 922 q 337 931 360 931 q 271 883 287 931 q 260 793 260 853 l 260 751 l 392 751 l 392 651 " }, e: { x_min: 0, x_max: 714, ha: 813, o: "m 714 326 l 140 326 q 200 157 140 227 q 359 87 260 87 q 488 130 431 87 q 561 245 545 174 l 697 245 q 577 48 670 123 q 358 -26 484 -26 q 97 85 195 -26 q 0 363 0 197 q 94 642 0 529 q 358 765 195 765 q 626 627 529 765 q 714 326 714 503 m 576 429 q 507 583 564 522 q 355 650 445 650 q 206 583 266 650 q 140 429 152 522 l 576 429 " }, "\u03CC": { x_min: 0, x_max: 712, ha: 815, o: "m 356 -25 q 94 91 194 -25 q 0 368 0 202 q 92 642 0 533 q 356 761 192 761 q 617 644 517 761 q 712 368 712 533 q 619 91 712 201 q 356 -25 520 -25 m 356 85 q 527 175 465 85 q 583 369 583 255 q 528 562 583 484 q 356 651 466 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 356 85 250 85 m 576 1040 l 387 819 l 303 819 l 438 1040 l 576 1040 " }, J: { x_min: 0, x_max: 588, ha: 699, o: "m 588 279 q 287 -26 588 -26 q 58 73 126 -26 q 0 327 0 158 l 133 327 q 160 172 133 227 q 288 96 198 96 q 426 171 391 96 q 449 336 449 219 l 449 1013 l 588 1013 l 588 279 " }, "\xBB": { x_min: -1, x_max: 503, ha: 601, o: "m 503 302 l 280 136 l 281 256 l 429 373 l 281 486 l 280 608 l 503 440 l 503 302 m 221 302 l 0 136 l 0 255 l 145 372 l 0 486 l -1 608 l 221 440 l 221 302 " }, "\xA9": { x_min: -3, x_max: 1008, ha: 1106, o: "m 502 -7 q 123 151 263 -7 q -3 501 -3 294 q 123 851 -3 706 q 502 1011 263 1011 q 881 851 739 1011 q 1008 501 1008 708 q 883 151 1008 292 q 502 -7 744 -7 m 502 60 q 830 197 709 60 q 940 501 940 322 q 831 805 940 681 q 502 944 709 944 q 174 805 296 944 q 65 501 65 680 q 173 197 65 320 q 502 60 294 60 m 741 394 q 661 246 731 302 q 496 190 591 190 q 294 285 369 190 q 228 497 228 370 q 295 714 228 625 q 499 813 370 813 q 656 762 588 813 q 733 625 724 711 l 634 625 q 589 704 629 673 q 498 735 550 735 q 377 666 421 735 q 334 504 334 597 q 374 340 334 408 q 490 272 415 272 q 589 304 549 272 q 638 394 628 337 l 741 394 " }, "\u03CE": { x_min: 0, x_max: 922, ha: 1030, o: "m 687 1040 l 498 819 l 415 819 l 549 1040 l 687 1040 m 922 339 q 856 97 922 203 q 650 -26 780 -26 q 538 9 587 -26 q 461 103 489 44 q 387 12 436 46 q 277 -22 339 -22 q 69 97 147 -22 q 0 338 0 202 q 45 551 0 444 q 161 737 84 643 l 302 737 q 175 552 219 647 q 124 336 124 446 q 155 179 124 248 q 275 88 197 88 q 375 163 341 88 q 400 294 400 219 l 400 572 l 524 572 l 524 294 q 561 135 524 192 q 643 88 591 88 q 762 182 719 88 q 797 341 797 257 q 745 555 797 450 q 619 737 705 637 l 760 737 q 874 551 835 640 q 922 339 922 444 " }, "^": { x_min: 193.0625, x_max: 598.609375, ha: 792, o: "m 598 772 l 515 772 l 395 931 l 277 772 l 193 772 l 326 1013 l 462 1013 l 598 772 " }, "\xAB": { x_min: 0, x_max: 507.203125, ha: 604, o: "m 506 136 l 284 302 l 284 440 l 506 608 l 507 485 l 360 371 l 506 255 l 506 136 m 222 136 l 0 302 l 0 440 l 222 608 l 221 486 l 73 373 l 222 256 l 222 136 " }, D: { x_min: 0, x_max: 828, ha: 935, o: "m 389 1013 q 714 867 593 1013 q 828 521 828 729 q 712 161 828 309 q 382 0 587 0 l 0 0 l 0 1013 l 389 1013 m 376 124 q 607 247 523 124 q 681 510 681 355 q 607 771 681 662 q 376 896 522 896 l 139 896 l 139 124 l 376 124 " }, "\u2219": { x_min: 0, x_max: 142, ha: 239, o: "m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 " }, "\xFF": { x_min: 0, x_max: 47, ha: 125, o: "m 47 3 q 37 -7 47 -7 q 28 0 30 -7 q 39 -4 32 -4 q 45 3 45 -1 l 37 0 q 28 9 28 0 q 39 19 28 19 l 47 16 l 47 19 l 47 3 m 37 1 q 44 8 44 1 q 37 16 44 16 q 30 8 30 16 q 37 1 30 1 m 26 1 l 23 22 l 14 0 l 3 22 l 3 3 l 0 25 l 13 1 l 22 25 l 26 1 " }, w: { x_min: 0, x_max: 1009.71875, ha: 1100, o: "m 1009 738 l 783 0 l 658 0 l 501 567 l 345 0 l 222 0 l 0 738 l 130 738 l 284 174 l 432 737 l 576 738 l 721 173 l 881 737 l 1009 738 " }, $: { x_min: 0, x_max: 700, ha: 793, o: "m 664 717 l 542 717 q 490 825 531 785 q 381 872 450 865 l 381 551 q 620 446 540 522 q 700 241 700 370 q 618 45 700 116 q 381 -25 536 -25 l 381 -152 l 307 -152 l 307 -25 q 81 62 162 -25 q 0 297 0 149 l 124 297 q 169 146 124 204 q 307 81 215 89 l 307 441 q 80 536 148 469 q 13 725 13 603 q 96 910 13 839 q 307 982 180 982 l 307 1077 l 381 1077 l 381 982 q 574 917 494 982 q 664 717 664 845 m 307 565 l 307 872 q 187 831 233 872 q 142 724 142 791 q 180 618 142 656 q 307 565 218 580 m 381 76 q 562 237 562 96 q 517 361 562 313 q 381 423 472 409 l 381 76 " }, "\\": { x_min: -0.015625, x_max: 425.0625, ha: 522, o: "m 425 -129 l 337 -129 l 0 1041 l 83 1041 l 425 -129 " }, "\xB5": { x_min: 0, x_max: 697.21875, ha: 747, o: "m 697 -4 q 629 -14 658 -14 q 498 97 513 -14 q 422 9 470 41 q 313 -23 374 -23 q 207 4 258 -23 q 119 81 156 32 l 119 -278 l 0 -278 l 0 738 l 124 738 l 124 343 q 165 173 124 246 q 308 83 216 83 q 452 178 402 83 q 493 359 493 255 l 493 738 l 617 738 l 617 214 q 623 136 617 160 q 673 92 637 92 q 697 96 684 92 l 697 -4 " }, "\u0399": { x_min: 42, x_max: 181, ha: 297, o: "m 181 0 l 42 0 l 42 1013 l 181 1013 l 181 0 " }, "\u038E": { x_min: 0, x_max: 1144.5, ha: 1214, o: "m 1144 1012 l 807 416 l 807 0 l 667 0 l 667 416 l 325 1012 l 465 1012 l 736 533 l 1004 1012 l 1144 1012 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 " }, "\u2019": { x_min: 0, x_max: 139, ha: 236, o: "m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 " }, "\u039D": { x_min: 0, x_max: 801, ha: 915, o: "m 801 0 l 651 0 l 131 822 l 131 0 l 0 0 l 0 1013 l 151 1013 l 670 191 l 670 1013 l 801 1013 l 801 0 " }, "-": { x_min: 8.71875, x_max: 350.390625, ha: 478, o: "m 350 317 l 8 317 l 8 428 l 350 428 l 350 317 " }, Q: { x_min: 0, x_max: 968, ha: 1072, o: "m 954 5 l 887 -79 l 744 35 q 622 -11 687 2 q 483 -26 556 -26 q 127 130 262 -26 q 0 504 0 279 q 127 880 0 728 q 484 1041 262 1041 q 841 884 708 1041 q 968 507 968 735 q 933 293 968 398 q 832 104 899 188 l 954 5 m 723 191 q 802 330 777 248 q 828 499 828 412 q 744 790 828 673 q 483 922 650 922 q 228 791 322 922 q 142 505 142 673 q 227 221 142 337 q 487 91 323 91 q 632 123 566 91 l 520 215 l 587 301 l 723 191 " }, "\u03C2": { x_min: 1, x_max: 676.28125, ha: 740, o: "m 676 460 l 551 460 q 498 595 542 546 q 365 651 448 651 q 199 578 263 651 q 136 401 136 505 q 266 178 136 241 q 508 106 387 142 q 640 -50 640 62 q 625 -158 640 -105 q 583 -278 611 -211 l 465 -278 q 498 -182 490 -211 q 515 -80 515 -126 q 381 12 515 -15 q 134 91 197 51 q 1 388 1 179 q 100 651 1 542 q 354 761 199 761 q 587 680 498 761 q 676 460 676 599 " }, M: { x_min: 0, x_max: 954, ha: 1067, o: "m 954 0 l 819 0 l 819 869 l 537 0 l 405 0 l 128 866 l 128 0 l 0 0 l 0 1013 l 200 1013 l 472 160 l 757 1013 l 954 1013 l 954 0 " }, "\u03A8": { x_min: 0, x_max: 1006, ha: 1094, o: "m 1006 678 q 914 319 1006 429 q 571 200 814 200 l 571 0 l 433 0 l 433 200 q 92 319 194 200 q 0 678 0 429 l 0 1013 l 139 1013 l 139 679 q 191 417 139 492 q 433 326 255 326 l 433 1013 l 571 1013 l 571 326 l 580 326 q 813 423 747 326 q 868 679 868 502 l 868 1013 l 1006 1013 l 1006 678 " }, C: { x_min: 0, x_max: 886, ha: 944, o: "m 886 379 q 760 87 886 201 q 455 -26 634 -26 q 112 136 236 -26 q 0 509 0 283 q 118 882 0 737 q 469 1041 245 1041 q 748 955 630 1041 q 879 708 879 859 l 745 708 q 649 862 724 805 q 473 920 573 920 q 219 791 312 920 q 136 509 136 675 q 217 229 136 344 q 470 99 311 99 q 672 179 591 99 q 753 379 753 259 l 886 379 " }, "!": { x_min: 0, x_max: 138, ha: 236, o: "m 138 684 q 116 409 138 629 q 105 244 105 299 l 33 244 q 16 465 33 313 q 0 684 0 616 l 0 1013 l 138 1013 l 138 684 m 138 0 l 0 0 l 0 151 l 138 151 l 138 0 " }, "{": { x_min: 0, x_max: 480.5625, ha: 578, o: "m 480 -286 q 237 -213 303 -286 q 187 -45 187 -159 q 194 48 187 -15 q 201 141 201 112 q 164 264 201 225 q 0 314 118 314 l 0 417 q 164 471 119 417 q 201 605 201 514 q 199 665 201 644 q 193 772 193 769 q 241 941 193 887 q 480 1015 308 1015 l 480 915 q 336 866 375 915 q 306 742 306 828 q 310 662 306 717 q 314 577 314 606 q 288 452 314 500 q 176 365 256 391 q 289 275 257 337 q 314 143 314 226 q 313 84 314 107 q 310 -11 310 -5 q 339 -131 310 -94 q 480 -182 377 -182 l 480 -286 " }, X: { x_min: -0.015625, x_max: 854.15625, ha: 940, o: "m 854 0 l 683 0 l 423 409 l 166 0 l 0 0 l 347 519 l 18 1013 l 186 1013 l 428 637 l 675 1013 l 836 1013 l 504 520 l 854 0 " }, "#": { x_min: 0, x_max: 963.890625, ha: 1061, o: "m 963 690 l 927 590 l 719 590 l 655 410 l 876 410 l 840 310 l 618 310 l 508 -3 l 393 -2 l 506 309 l 329 310 l 215 -2 l 102 -3 l 212 310 l 0 310 l 36 410 l 248 409 l 312 590 l 86 590 l 120 690 l 347 690 l 459 1006 l 573 1006 l 462 690 l 640 690 l 751 1006 l 865 1006 l 754 690 l 963 690 m 606 590 l 425 590 l 362 410 l 543 410 l 606 590 " }, "\u03B9": { x_min: 42, x_max: 284, ha: 361, o: "m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 738 l 167 738 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 103 239 101 q 284 112 257 104 l 284 3 " }, "\u0386": { x_min: 0, x_max: 906.953125, ha: 982, o: "m 283 1040 l 88 799 l 5 799 l 145 1040 l 283 1040 m 906 0 l 756 0 l 650 303 l 251 303 l 143 0 l 0 0 l 376 1012 l 529 1012 l 906 0 m 609 421 l 452 866 l 293 421 l 609 421 " }, ")": { x_min: 0, x_max: 318, ha: 415, o: "m 318 365 q 257 25 318 191 q 87 -290 197 -141 l 0 -290 q 140 21 93 -128 q 193 360 193 189 q 141 704 193 537 q 0 1024 97 850 l 87 1024 q 257 706 197 871 q 318 365 318 542 " }, "\u03B5": { x_min: 0, x_max: 634.71875, ha: 714, o: "m 634 234 q 527 38 634 110 q 300 -25 433 -25 q 98 29 183 -25 q 0 204 0 93 q 37 314 0 265 q 128 390 67 353 q 56 460 82 419 q 26 555 26 505 q 114 712 26 654 q 295 763 191 763 q 499 700 416 763 q 589 515 589 631 l 478 515 q 419 618 464 580 q 307 657 374 657 q 207 630 253 657 q 151 547 151 598 q 238 445 151 469 q 389 434 280 434 l 389 331 l 349 331 q 206 315 255 331 q 125 210 125 287 q 183 107 125 145 q 302 76 233 76 q 436 117 379 76 q 509 234 493 159 l 634 234 " }, "\u0394": { x_min: 0, x_max: 952.78125, ha: 1028, o: "m 952 0 l 0 0 l 400 1013 l 551 1013 l 952 0 m 762 124 l 476 867 l 187 124 l 762 124 " }, "}": { x_min: 0, x_max: 481, ha: 578, o: "m 481 314 q 318 262 364 314 q 282 136 282 222 q 284 65 282 97 q 293 -58 293 -48 q 241 -217 293 -166 q 0 -286 174 -286 l 0 -182 q 143 -130 105 -182 q 171 -2 171 -93 q 168 81 171 22 q 165 144 165 140 q 188 275 165 229 q 306 365 220 339 q 191 455 224 391 q 165 588 165 505 q 168 681 165 624 q 171 742 171 737 q 141 865 171 827 q 0 915 102 915 l 0 1015 q 243 942 176 1015 q 293 773 293 888 q 287 675 293 741 q 282 590 282 608 q 318 466 282 505 q 481 417 364 417 l 481 314 " }, "\u2030": { x_min: -3, x_max: 1672, ha: 1821, o: "m 846 0 q 664 76 732 0 q 603 244 603 145 q 662 412 603 344 q 846 489 729 489 q 1027 412 959 489 q 1089 244 1089 343 q 1029 76 1089 144 q 846 0 962 0 m 845 103 q 945 143 910 103 q 981 243 981 184 q 947 340 981 301 q 845 385 910 385 q 745 342 782 385 q 709 243 709 300 q 742 147 709 186 q 845 103 781 103 m 888 986 l 284 -25 l 199 -25 l 803 986 l 888 986 m 241 468 q 58 545 126 468 q -3 715 -3 615 q 56 881 -3 813 q 238 958 124 958 q 421 881 353 958 q 483 712 483 813 q 423 544 483 612 q 241 468 356 468 m 241 855 q 137 811 175 855 q 100 710 100 768 q 136 612 100 653 q 240 572 172 572 q 344 614 306 572 q 382 713 382 656 q 347 810 382 771 q 241 855 308 855 m 1428 0 q 1246 76 1314 0 q 1185 244 1185 145 q 1244 412 1185 344 q 1428 489 1311 489 q 1610 412 1542 489 q 1672 244 1672 343 q 1612 76 1672 144 q 1428 0 1545 0 m 1427 103 q 1528 143 1492 103 q 1564 243 1564 184 q 1530 340 1564 301 q 1427 385 1492 385 q 1327 342 1364 385 q 1291 243 1291 300 q 1324 147 1291 186 q 1427 103 1363 103 " }, a: { x_min: 0, x_max: 698.609375, ha: 794, o: "m 698 0 q 661 -12 679 -7 q 615 -17 643 -17 q 536 12 564 -17 q 500 96 508 41 q 384 6 456 37 q 236 -25 312 -25 q 65 31 130 -25 q 0 194 0 88 q 118 390 0 334 q 328 435 180 420 q 488 483 476 451 q 495 523 495 504 q 442 619 495 584 q 325 654 389 654 q 209 617 257 654 q 152 513 161 580 l 33 513 q 123 705 33 633 q 332 772 207 772 q 528 712 448 772 q 617 531 617 645 l 617 163 q 624 108 617 126 q 664 90 632 90 l 698 94 l 698 0 m 491 262 l 491 372 q 272 329 350 347 q 128 201 128 294 q 166 113 128 144 q 264 83 205 83 q 414 130 346 83 q 491 262 491 183 " }, "\u2014": { x_min: 0, x_max: 941.671875, ha: 1039, o: "m 941 334 l 0 334 l 0 410 l 941 410 l 941 334 " }, "=": { x_min: 8.71875, x_max: 780.953125, ha: 792, o: "m 780 510 l 8 510 l 8 606 l 780 606 l 780 510 m 780 235 l 8 235 l 8 332 l 780 332 l 780 235 " }, N: { x_min: 0, x_max: 801, ha: 914, o: "m 801 0 l 651 0 l 131 823 l 131 0 l 0 0 l 0 1013 l 151 1013 l 670 193 l 670 1013 l 801 1013 l 801 0 " }, "\u03C1": { x_min: 0, x_max: 712, ha: 797, o: "m 712 369 q 620 94 712 207 q 362 -26 521 -26 q 230 2 292 -26 q 119 83 167 30 l 119 -278 l 0 -278 l 0 362 q 91 643 0 531 q 355 764 190 764 q 617 647 517 764 q 712 369 712 536 m 583 366 q 530 559 583 480 q 359 651 469 651 q 190 562 252 651 q 135 370 135 483 q 189 176 135 257 q 359 85 250 85 q 528 175 466 85 q 583 366 583 254 " }, "\xAF": { x_min: 0, x_max: 941.671875, ha: 938, o: "m 941 1033 l 0 1033 l 0 1109 l 941 1109 l 941 1033 " }, Z: { x_min: 0, x_max: 779, ha: 849, o: "m 779 0 l 0 0 l 0 113 l 621 896 l 40 896 l 40 1013 l 779 1013 l 778 887 l 171 124 l 779 124 l 779 0 " }, u: { x_min: 0, x_max: 617, ha: 729, o: "m 617 0 l 499 0 l 499 110 q 391 10 460 45 q 246 -25 322 -25 q 61 58 127 -25 q 0 258 0 136 l 0 738 l 125 738 l 125 284 q 156 148 125 202 q 273 82 197 82 q 433 165 369 82 q 493 340 493 243 l 493 738 l 617 738 l 617 0 " }, k: { x_min: 0, x_max: 612.484375, ha: 697, o: "m 612 738 l 338 465 l 608 0 l 469 0 l 251 382 l 121 251 l 121 0 l 0 0 l 0 1013 l 121 1013 l 121 402 l 456 738 l 612 738 " }, "\u0397": { x_min: 0, x_max: 803, ha: 917, o: "m 803 0 l 667 0 l 667 475 l 140 475 l 140 0 l 0 0 l 0 1013 l 140 1013 l 140 599 l 667 599 l 667 1013 l 803 1013 l 803 0 " }, "\u0391": { x_min: 0, x_max: 906.953125, ha: 985, o: "m 906 0 l 756 0 l 650 303 l 251 303 l 143 0 l 0 0 l 376 1013 l 529 1013 l 906 0 m 609 421 l 452 866 l 293 421 l 609 421 " }, s: { x_min: 0, x_max: 604, ha: 697, o: "m 604 217 q 501 36 604 104 q 292 -23 411 -23 q 86 43 166 -23 q 0 238 0 114 l 121 237 q 175 122 121 164 q 300 85 223 85 q 415 112 363 85 q 479 207 479 147 q 361 309 479 276 q 140 372 141 370 q 21 544 21 426 q 111 708 21 647 q 298 761 190 761 q 492 705 413 761 q 583 531 583 643 l 462 531 q 412 625 462 594 q 298 657 363 657 q 199 636 242 657 q 143 558 143 608 q 262 454 143 486 q 484 394 479 397 q 604 217 604 341 " }, B: { x_min: 0, x_max: 778, ha: 876, o: "m 580 546 q 724 469 670 535 q 778 311 778 403 q 673 83 778 171 q 432 0 575 0 l 0 0 l 0 1013 l 411 1013 q 629 957 541 1013 q 732 768 732 892 q 691 633 732 693 q 580 546 650 572 m 393 899 l 139 899 l 139 588 l 379 588 q 521 624 462 588 q 592 744 592 667 q 531 859 592 819 q 393 899 471 899 m 419 124 q 566 169 504 124 q 635 303 635 219 q 559 436 635 389 q 402 477 494 477 l 139 477 l 139 124 l 419 124 " }, "\u2026": { x_min: 0, x_max: 614, ha: 708, o: "m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 m 378 0 l 236 0 l 236 151 l 378 151 l 378 0 m 614 0 l 472 0 l 472 151 l 614 151 l 614 0 " }, "?": { x_min: 0, x_max: 607, ha: 704, o: "m 607 777 q 543 599 607 674 q 422 474 482 537 q 357 272 357 391 l 236 272 q 297 487 236 395 q 411 619 298 490 q 474 762 474 691 q 422 885 474 838 q 301 933 371 933 q 179 880 228 933 q 124 706 124 819 l 0 706 q 94 963 0 872 q 302 1044 177 1044 q 511 973 423 1044 q 607 777 607 895 m 370 0 l 230 0 l 230 151 l 370 151 l 370 0 " }, H: { x_min: 0, x_max: 803, ha: 915, o: "m 803 0 l 667 0 l 667 475 l 140 475 l 140 0 l 0 0 l 0 1013 l 140 1013 l 140 599 l 667 599 l 667 1013 l 803 1013 l 803 0 " }, "\u03BD": { x_min: 0, x_max: 675, ha: 761, o: "m 675 738 l 404 0 l 272 0 l 0 738 l 133 738 l 340 147 l 541 738 l 675 738 " }, c: { x_min: 1, x_max: 701.390625, ha: 775, o: "m 701 264 q 584 53 681 133 q 353 -26 487 -26 q 91 91 188 -26 q 1 370 1 201 q 92 645 1 537 q 353 761 190 761 q 572 688 479 761 q 690 493 666 615 l 556 493 q 487 606 545 562 q 356 650 428 650 q 186 563 246 650 q 134 372 134 487 q 188 179 134 258 q 359 88 250 88 q 492 136 437 88 q 566 264 548 185 l 701 264 " }, "\xB6": { x_min: 0, x_max: 566.671875, ha: 678, o: "m 21 892 l 52 892 l 98 761 l 145 892 l 176 892 l 178 741 l 157 741 l 157 867 l 108 741 l 88 741 l 40 871 l 40 741 l 21 741 l 21 892 m 308 854 l 308 731 q 252 691 308 691 q 227 691 240 691 q 207 696 213 695 l 207 712 l 253 706 q 288 733 288 706 l 288 763 q 244 741 279 741 q 193 797 193 741 q 261 860 193 860 q 287 860 273 860 q 308 854 302 855 m 288 842 l 263 843 q 213 796 213 843 q 248 756 213 756 q 288 796 288 756 l 288 842 m 566 988 l 502 988 l 502 -1 l 439 -1 l 439 988 l 317 988 l 317 -1 l 252 -1 l 252 602 q 81 653 155 602 q 0 805 0 711 q 101 989 0 918 q 309 1053 194 1053 l 566 1053 l 566 988 " }, "\u03B2": { x_min: 0, x_max: 660, ha: 745, o: "m 471 550 q 610 450 561 522 q 660 280 660 378 q 578 64 660 151 q 367 -22 497 -22 q 239 5 299 -22 q 126 82 178 32 l 126 -278 l 0 -278 l 0 593 q 54 903 0 801 q 318 1042 127 1042 q 519 964 436 1042 q 603 771 603 887 q 567 644 603 701 q 471 550 532 586 m 337 79 q 476 138 418 79 q 535 279 535 198 q 427 437 535 386 q 226 477 344 477 l 226 583 q 398 620 329 583 q 486 762 486 668 q 435 884 486 833 q 312 935 384 935 q 169 861 219 935 q 126 698 126 797 l 126 362 q 170 169 126 242 q 337 79 224 79 " }, "\u039C": { x_min: 0, x_max: 954, ha: 1068, o: "m 954 0 l 819 0 l 819 868 l 537 0 l 405 0 l 128 865 l 128 0 l 0 0 l 0 1013 l 199 1013 l 472 158 l 758 1013 l 954 1013 l 954 0 " }, "\u038C": { x_min: 0.109375, x_max: 1120, ha: 1217, o: "m 1120 505 q 994 132 1120 282 q 642 -29 861 -29 q 290 130 422 -29 q 167 505 167 280 q 294 883 167 730 q 650 1046 430 1046 q 999 882 868 1046 q 1120 505 1120 730 m 977 504 q 896 784 977 669 q 644 915 804 915 q 391 785 484 915 q 307 504 307 669 q 391 224 307 339 q 644 95 486 95 q 894 224 803 95 q 977 504 977 339 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 " }, "\u0389": { x_min: 0, x_max: 1158, ha: 1275, o: "m 1158 0 l 1022 0 l 1022 475 l 496 475 l 496 0 l 356 0 l 356 1012 l 496 1012 l 496 599 l 1022 599 l 1022 1012 l 1158 1012 l 1158 0 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 " }, "\u2022": { x_min: 0, x_max: 663.890625, ha: 775, o: "m 663 529 q 566 293 663 391 q 331 196 469 196 q 97 294 194 196 q 0 529 0 393 q 96 763 0 665 q 331 861 193 861 q 566 763 469 861 q 663 529 663 665 " }, "\xA5": { x_min: 0.1875, x_max: 819.546875, ha: 886, o: "m 563 561 l 697 561 l 696 487 l 520 487 l 482 416 l 482 380 l 697 380 l 695 308 l 482 308 l 482 0 l 342 0 l 342 308 l 125 308 l 125 380 l 342 380 l 342 417 l 303 487 l 125 487 l 125 561 l 258 561 l 0 1013 l 140 1013 l 411 533 l 679 1013 l 819 1013 l 563 561 " }, "(": { x_min: 0, x_max: 318.0625, ha: 415, o: "m 318 -290 l 230 -290 q 61 23 122 -142 q 0 365 0 190 q 62 712 0 540 q 230 1024 119 869 l 318 1024 q 175 705 219 853 q 125 360 125 542 q 176 22 125 187 q 318 -290 223 -127 " }, U: { x_min: 0, x_max: 796, ha: 904, o: "m 796 393 q 681 93 796 212 q 386 -25 566 -25 q 101 95 208 -25 q 0 393 0 211 l 0 1013 l 138 1013 l 138 391 q 204 191 138 270 q 394 107 276 107 q 586 191 512 107 q 656 391 656 270 l 656 1013 l 796 1013 l 796 393 " }, "\u03B3": { x_min: 0.5, x_max: 744.953125, ha: 822, o: "m 744 737 l 463 54 l 463 -278 l 338 -278 l 338 54 l 154 495 q 104 597 124 569 q 13 651 67 651 l 0 651 l 0 751 l 39 753 q 168 711 121 753 q 242 594 207 676 l 403 208 l 617 737 l 744 737 " }, "\u03B1": { x_min: 0, x_max: 765.5625, ha: 809, o: "m 765 -4 q 698 -14 726 -14 q 564 97 586 -14 q 466 7 525 40 q 337 -26 407 -26 q 88 98 186 -26 q 0 369 0 212 q 88 637 0 525 q 337 760 184 760 q 465 728 407 760 q 563 637 524 696 l 563 739 l 685 739 l 685 222 q 693 141 685 168 q 748 94 708 94 q 765 96 760 94 l 765 -4 m 584 371 q 531 562 584 485 q 360 653 470 653 q 192 566 254 653 q 135 379 135 489 q 186 181 135 261 q 358 84 247 84 q 528 176 465 84 q 584 371 584 260 " }, F: { x_min: 0, x_max: 683.328125, ha: 717, o: "m 683 888 l 140 888 l 140 583 l 613 583 l 613 458 l 140 458 l 140 0 l 0 0 l 0 1013 l 683 1013 l 683 888 " }, "\xAD": { x_min: 0, x_max: 705.5625, ha: 803, o: "m 705 334 l 0 334 l 0 410 l 705 410 l 705 334 " }, ":": { x_min: 0, x_max: 142, ha: 239, o: "m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 " }, "\u03A7": { x_min: 0, x_max: 854.171875, ha: 935, o: "m 854 0 l 683 0 l 423 409 l 166 0 l 0 0 l 347 519 l 18 1013 l 186 1013 l 427 637 l 675 1013 l 836 1013 l 504 521 l 854 0 " }, "*": { x_min: 116, x_max: 674, ha: 792, o: "m 674 768 l 475 713 l 610 544 l 517 477 l 394 652 l 272 478 l 178 544 l 314 713 l 116 766 l 153 876 l 341 812 l 342 1013 l 446 1013 l 446 811 l 635 874 l 674 768 " }, "\u2020": { x_min: 0, x_max: 777, ha: 835, o: "m 458 804 l 777 804 l 777 683 l 458 683 l 458 0 l 319 0 l 319 681 l 0 683 l 0 804 l 319 804 l 319 1015 l 458 1013 l 458 804 " }, "\xB0": { x_min: 0, x_max: 347, ha: 444, o: "m 173 802 q 43 856 91 802 q 0 977 0 905 q 45 1101 0 1049 q 173 1153 90 1153 q 303 1098 255 1153 q 347 977 347 1049 q 303 856 347 905 q 173 802 256 802 m 173 884 q 238 910 214 884 q 262 973 262 937 q 239 1038 262 1012 q 173 1064 217 1064 q 108 1037 132 1064 q 85 973 85 1010 q 108 910 85 937 q 173 884 132 884 " }, V: { x_min: 0, x_max: 862.71875, ha: 940, o: "m 862 1013 l 505 0 l 361 0 l 0 1013 l 143 1013 l 434 165 l 718 1012 l 862 1013 " }, "\u039E": { x_min: 0, x_max: 734.71875, ha: 763, o: "m 723 889 l 9 889 l 9 1013 l 723 1013 l 723 889 m 673 463 l 61 463 l 61 589 l 673 589 l 673 463 m 734 0 l 0 0 l 0 124 l 734 124 l 734 0 " }, "\xA0": { x_min: 0, x_max: 0, ha: 853 }, "\u03AB": { x_min: 0.328125, x_max: 819.515625, ha: 889, o: "m 588 1046 l 460 1046 l 460 1189 l 588 1189 l 588 1046 m 360 1046 l 232 1046 l 232 1189 l 360 1189 l 360 1046 m 819 1012 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1012 l 140 1012 l 411 533 l 679 1012 l 819 1012 " }, "\u201D": { x_min: 0, x_max: 347, ha: 454, o: "m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 m 347 851 q 310 737 347 784 q 208 669 273 690 l 208 734 q 267 787 250 741 q 280 873 280 821 l 208 873 l 208 1013 l 347 1013 l 347 851 " }, "@": { x_min: 0, x_max: 1260, ha: 1357, o: "m 1098 -45 q 877 -160 1001 -117 q 633 -203 752 -203 q 155 -29 327 -203 q 0 360 0 127 q 176 802 0 616 q 687 1008 372 1008 q 1123 854 969 1008 q 1260 517 1260 718 q 1155 216 1260 341 q 868 82 1044 82 q 772 106 801 82 q 737 202 737 135 q 647 113 700 144 q 527 82 594 82 q 367 147 420 82 q 314 312 314 212 q 401 565 314 452 q 639 690 498 690 q 810 588 760 690 l 849 668 l 938 668 q 877 441 900 532 q 833 226 833 268 q 853 182 833 198 q 902 167 873 167 q 1088 272 1012 167 q 1159 512 1159 372 q 1051 793 1159 681 q 687 925 925 925 q 248 747 415 925 q 97 361 97 586 q 226 26 97 159 q 627 -122 370 -122 q 856 -87 737 -122 q 1061 8 976 -53 l 1098 -45 m 786 488 q 738 580 777 545 q 643 615 700 615 q 483 517 548 615 q 425 322 425 430 q 457 203 425 250 q 552 156 490 156 q 722 273 665 156 q 786 488 738 309 " }, "\u038A": { x_min: 0, x_max: 499, ha: 613, o: "m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 m 499 0 l 360 0 l 360 1012 l 499 1012 l 499 0 " }, i: { x_min: 14, x_max: 136, ha: 275, o: "m 136 873 l 14 873 l 14 1013 l 136 1013 l 136 873 m 136 0 l 14 0 l 14 737 l 136 737 l 136 0 " }, "\u0392": { x_min: 0, x_max: 778, ha: 877, o: "m 580 545 q 724 468 671 534 q 778 310 778 402 q 673 83 778 170 q 432 0 575 0 l 0 0 l 0 1013 l 411 1013 q 629 957 541 1013 q 732 768 732 891 q 691 632 732 692 q 580 545 650 571 m 393 899 l 139 899 l 139 587 l 379 587 q 521 623 462 587 q 592 744 592 666 q 531 859 592 819 q 393 899 471 899 m 419 124 q 566 169 504 124 q 635 302 635 219 q 559 435 635 388 q 402 476 494 476 l 139 476 l 139 124 l 419 124 " }, "\u03C5": { x_min: 0, x_max: 617, ha: 725, o: "m 617 352 q 540 94 617 199 q 308 -24 455 -24 q 76 94 161 -24 q 0 352 0 199 l 0 739 l 126 739 l 126 355 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 355 492 257 l 492 739 l 617 739 l 617 352 " }, "]": { x_min: 0, x_max: 275, ha: 372, o: "m 275 -281 l 0 -281 l 0 -187 l 151 -187 l 151 920 l 0 920 l 0 1013 l 275 1013 l 275 -281 " }, m: { x_min: 0, x_max: 1019, ha: 1128, o: "m 1019 0 l 897 0 l 897 454 q 860 591 897 536 q 739 660 816 660 q 613 586 659 660 q 573 436 573 522 l 573 0 l 447 0 l 447 455 q 412 591 447 535 q 294 657 372 657 q 165 586 213 657 q 122 437 122 521 l 122 0 l 0 0 l 0 738 l 117 738 l 117 640 q 202 730 150 697 q 316 763 254 763 q 437 730 381 763 q 525 642 494 697 q 621 731 559 700 q 753 763 682 763 q 943 694 867 763 q 1019 512 1019 625 l 1019 0 " }, "\u03C7": { x_min: 8.328125, x_max: 780.5625, ha: 815, o: "m 780 -278 q 715 -294 747 -294 q 616 -257 663 -294 q 548 -175 576 -227 l 379 133 l 143 -277 l 9 -277 l 313 254 l 163 522 q 127 586 131 580 q 36 640 91 640 q 8 637 27 640 l 8 752 l 52 757 q 162 719 113 757 q 236 627 200 690 l 383 372 l 594 737 l 726 737 l 448 250 l 625 -69 q 670 -153 647 -110 q 743 -188 695 -188 q 780 -184 759 -188 l 780 -278 " }, "\u03AF": { x_min: 42, x_max: 326.71875, ha: 361, o: "m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 737 l 167 737 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 102 239 101 q 284 112 257 104 l 284 3 m 326 1040 l 137 819 l 54 819 l 189 1040 l 326 1040 " }, "\u0396": { x_min: 0, x_max: 779.171875, ha: 850, o: "m 779 0 l 0 0 l 0 113 l 620 896 l 40 896 l 40 1013 l 779 1013 l 779 887 l 170 124 l 779 124 l 779 0 " }, R: { x_min: 0, x_max: 781.953125, ha: 907, o: "m 781 0 l 623 0 q 587 242 590 52 q 407 433 585 433 l 138 433 l 138 0 l 0 0 l 0 1013 l 396 1013 q 636 946 539 1013 q 749 731 749 868 q 711 597 749 659 q 608 502 674 534 q 718 370 696 474 q 729 207 722 352 q 781 26 736 62 l 781 0 m 373 551 q 533 594 465 551 q 614 731 614 645 q 532 859 614 815 q 373 896 465 896 l 138 896 l 138 551 l 373 551 " }, o: { x_min: 0, x_max: 713, ha: 821, o: "m 357 -25 q 94 91 194 -25 q 0 368 0 202 q 93 642 0 533 q 357 761 193 761 q 618 644 518 761 q 713 368 713 533 q 619 91 713 201 q 357 -25 521 -25 m 357 85 q 528 175 465 85 q 584 369 584 255 q 529 562 584 484 q 357 651 467 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 357 85 250 85 " }, K: { x_min: 0, x_max: 819.46875, ha: 906, o: "m 819 0 l 649 0 l 294 509 l 139 355 l 139 0 l 0 0 l 0 1013 l 139 1013 l 139 526 l 626 1013 l 809 1013 l 395 600 l 819 0 " }, ",": { x_min: 0, x_max: 142, ha: 239, o: "m 142 -12 q 105 -132 142 -82 q 0 -205 68 -182 l 0 -138 q 57 -82 40 -124 q 70 0 70 -51 l 0 0 l 0 151 l 142 151 l 142 -12 " }, d: { x_min: 0, x_max: 683, ha: 796, o: "m 683 0 l 564 0 l 564 93 q 456 6 516 38 q 327 -25 395 -25 q 87 100 181 -25 q 0 365 0 215 q 90 639 0 525 q 343 763 187 763 q 564 647 486 763 l 564 1013 l 683 1013 l 683 0 m 582 373 q 529 562 582 484 q 361 653 468 653 q 190 561 253 653 q 135 365 135 479 q 189 175 135 254 q 358 85 251 85 q 529 178 468 85 q 582 373 582 258 " }, "\xA8": { x_min: -109, x_max: 247, ha: 232, o: "m 247 1046 l 119 1046 l 119 1189 l 247 1189 l 247 1046 m 19 1046 l -109 1046 l -109 1189 l 19 1189 l 19 1046 " }, E: { x_min: 0, x_max: 736.109375, ha: 789, o: "m 736 0 l 0 0 l 0 1013 l 725 1013 l 725 889 l 139 889 l 139 585 l 677 585 l 677 467 l 139 467 l 139 125 l 736 125 l 736 0 " }, Y: { x_min: 0, x_max: 820, ha: 886, o: "m 820 1013 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1013 l 140 1013 l 411 534 l 679 1012 l 820 1013 " }, '"': { x_min: 0, x_max: 299, ha: 396, o: "m 299 606 l 203 606 l 203 988 l 299 988 l 299 606 m 96 606 l 0 606 l 0 988 l 96 988 l 96 606 " }, "\u2039": { x_min: 17.984375, x_max: 773.609375, ha: 792, o: "m 773 40 l 18 376 l 17 465 l 773 799 l 773 692 l 159 420 l 773 149 l 773 40 " }, "\u201E": { x_min: 0, x_max: 364, ha: 467, o: "m 141 -12 q 104 -132 141 -82 q 0 -205 67 -182 l 0 -138 q 56 -82 40 -124 q 69 0 69 -51 l 0 0 l 0 151 l 141 151 l 141 -12 m 364 -12 q 327 -132 364 -82 q 222 -205 290 -182 l 222 -138 q 279 -82 262 -124 q 292 0 292 -51 l 222 0 l 222 151 l 364 151 l 364 -12 " }, "\u03B4": { x_min: 1, x_max: 710, ha: 810, o: "m 710 360 q 616 87 710 196 q 356 -28 518 -28 q 99 82 197 -28 q 1 356 1 192 q 100 606 1 509 q 355 703 199 703 q 180 829 288 754 q 70 903 124 866 l 70 1012 l 643 1012 l 643 901 l 258 901 q 462 763 422 794 q 636 592 577 677 q 710 360 710 485 m 584 365 q 552 501 584 447 q 451 602 521 555 q 372 611 411 611 q 197 541 258 611 q 136 355 136 472 q 190 171 136 245 q 358 85 252 85 q 528 173 465 85 q 584 365 584 252 " }, "\u03AD": { x_min: 0, x_max: 634.71875, ha: 714, o: "m 634 234 q 527 38 634 110 q 300 -25 433 -25 q 98 29 183 -25 q 0 204 0 93 q 37 313 0 265 q 128 390 67 352 q 56 459 82 419 q 26 555 26 505 q 114 712 26 654 q 295 763 191 763 q 499 700 416 763 q 589 515 589 631 l 478 515 q 419 618 464 580 q 307 657 374 657 q 207 630 253 657 q 151 547 151 598 q 238 445 151 469 q 389 434 280 434 l 389 331 l 349 331 q 206 315 255 331 q 125 210 125 287 q 183 107 125 145 q 302 76 233 76 q 436 117 379 76 q 509 234 493 159 l 634 234 m 520 1040 l 331 819 l 248 819 l 383 1040 l 520 1040 " }, "\u03C9": { x_min: 0, x_max: 922, ha: 1031, o: "m 922 339 q 856 97 922 203 q 650 -26 780 -26 q 538 9 587 -26 q 461 103 489 44 q 387 12 436 46 q 277 -22 339 -22 q 69 97 147 -22 q 0 339 0 203 q 45 551 0 444 q 161 738 84 643 l 302 738 q 175 553 219 647 q 124 336 124 446 q 155 179 124 249 q 275 88 197 88 q 375 163 341 88 q 400 294 400 219 l 400 572 l 524 572 l 524 294 q 561 135 524 192 q 643 88 591 88 q 762 182 719 88 q 797 342 797 257 q 745 556 797 450 q 619 738 705 638 l 760 738 q 874 551 835 640 q 922 339 922 444 " }, "\xB4": { x_min: 0, x_max: 96, ha: 251, o: "m 96 606 l 0 606 l 0 988 l 96 988 l 96 606 " }, "\xB1": { x_min: 11, x_max: 781, ha: 792, o: "m 781 490 l 446 490 l 446 255 l 349 255 l 349 490 l 11 490 l 11 586 l 349 586 l 349 819 l 446 819 l 446 586 l 781 586 l 781 490 m 781 21 l 11 21 l 11 115 l 781 115 l 781 21 " }, "|": { x_min: 343, x_max: 449, ha: 792, o: "m 449 462 l 343 462 l 343 986 l 449 986 l 449 462 m 449 -242 l 343 -242 l 343 280 l 449 280 l 449 -242 " }, "\u03CB": { x_min: 0, x_max: 617, ha: 725, o: "m 482 800 l 372 800 l 372 925 l 482 925 l 482 800 m 239 800 l 129 800 l 129 925 l 239 925 l 239 800 m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 " }, "\xA7": { x_min: 0, x_max: 593, ha: 690, o: "m 593 425 q 554 312 593 369 q 467 233 516 254 q 537 83 537 172 q 459 -74 537 -12 q 288 -133 387 -133 q 115 -69 184 -133 q 47 96 47 -6 l 166 96 q 199 7 166 40 q 288 -26 232 -26 q 371 -5 332 -26 q 420 60 420 21 q 311 201 420 139 q 108 309 210 255 q 0 490 0 383 q 33 602 0 551 q 124 687 66 654 q 75 743 93 712 q 58 812 58 773 q 133 984 58 920 q 300 1043 201 1043 q 458 987 394 1043 q 529 814 529 925 l 411 814 q 370 908 404 877 q 289 939 336 939 q 213 911 246 939 q 180 841 180 883 q 286 720 180 779 q 484 612 480 615 q 593 425 593 534 m 467 409 q 355 544 467 473 q 196 630 228 612 q 146 587 162 609 q 124 525 124 558 q 239 387 124 462 q 398 298 369 315 q 448 345 429 316 q 467 409 467 375 " }, b: { x_min: 0, x_max: 685, ha: 783, o: "m 685 372 q 597 99 685 213 q 347 -25 501 -25 q 219 5 277 -25 q 121 93 161 36 l 121 0 l 0 0 l 0 1013 l 121 1013 l 121 634 q 214 723 157 692 q 341 754 272 754 q 591 637 493 754 q 685 372 685 526 m 554 356 q 499 550 554 470 q 328 644 437 644 q 162 556 223 644 q 108 369 108 478 q 160 176 108 256 q 330 83 221 83 q 498 169 435 83 q 554 356 554 245 " }, q: { x_min: 0, x_max: 683, ha: 876, o: "m 683 -278 l 564 -278 l 564 97 q 474 8 533 39 q 345 -23 415 -23 q 91 93 188 -23 q 0 364 0 203 q 87 635 0 522 q 337 760 184 760 q 466 727 408 760 q 564 637 523 695 l 564 737 l 683 737 l 683 -278 m 582 375 q 527 564 582 488 q 358 652 466 652 q 190 565 253 652 q 135 377 135 488 q 189 179 135 261 q 361 84 251 84 q 530 179 469 84 q 582 375 582 260 " }, "\u03A9": { x_min: -0.171875, x_max: 969.5625, ha: 1068, o: "m 969 0 l 555 0 l 555 123 q 744 308 675 194 q 814 558 814 423 q 726 812 814 709 q 484 922 633 922 q 244 820 334 922 q 154 567 154 719 q 223 316 154 433 q 412 123 292 199 l 412 0 l 0 0 l 0 124 l 217 124 q 68 327 122 210 q 15 572 15 444 q 144 911 15 781 q 484 1041 274 1041 q 822 909 691 1041 q 953 569 953 777 q 899 326 953 443 q 750 124 846 210 l 969 124 l 969 0 " }, "\u03CD": { x_min: 0, x_max: 617, ha: 725, o: "m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 m 535 1040 l 346 819 l 262 819 l 397 1040 l 535 1040 " }, z: { x_min: -0.015625, x_max: 613.890625, ha: 697, o: "m 613 0 l 0 0 l 0 100 l 433 630 l 20 630 l 20 738 l 594 738 l 593 636 l 163 110 l 613 110 l 613 0 " }, "\u2122": { x_min: 0, x_max: 894, ha: 1e3, o: "m 389 951 l 229 951 l 229 503 l 160 503 l 160 951 l 0 951 l 0 1011 l 389 1011 l 389 951 m 894 503 l 827 503 l 827 939 l 685 503 l 620 503 l 481 937 l 481 503 l 417 503 l 417 1011 l 517 1011 l 653 580 l 796 1010 l 894 1011 l 894 503 " }, "\u03AE": { x_min: 0.78125, x_max: 697, ha: 810, o: "m 697 -278 l 572 -278 l 572 454 q 540 587 572 536 q 425 650 501 650 q 271 579 337 650 q 206 420 206 509 l 206 0 l 81 0 l 81 489 q 73 588 81 562 q 0 644 56 644 l 0 741 q 68 755 38 755 q 158 721 124 755 q 200 630 193 687 q 297 726 234 692 q 434 761 359 761 q 620 692 544 761 q 697 516 697 624 l 697 -278 m 479 1040 l 290 819 l 207 819 l 341 1040 l 479 1040 " }, "\u0398": { x_min: 0, x_max: 960, ha: 1056, o: "m 960 507 q 833 129 960 280 q 476 -32 698 -32 q 123 129 255 -32 q 0 507 0 280 q 123 883 0 732 q 476 1045 255 1045 q 832 883 696 1045 q 960 507 960 732 m 817 500 q 733 789 817 669 q 476 924 639 924 q 223 792 317 924 q 142 507 142 675 q 222 222 142 339 q 476 89 315 89 q 730 218 636 89 q 817 500 817 334 m 716 449 l 243 449 l 243 571 l 716 571 l 716 449 " }, "\xAE": { x_min: -3, x_max: 1008, ha: 1106, o: "m 503 532 q 614 562 566 532 q 672 658 672 598 q 614 747 672 716 q 503 772 569 772 l 338 772 l 338 532 l 503 532 m 502 -7 q 123 151 263 -7 q -3 501 -3 294 q 123 851 -3 706 q 502 1011 263 1011 q 881 851 739 1011 q 1008 501 1008 708 q 883 151 1008 292 q 502 -7 744 -7 m 502 60 q 830 197 709 60 q 940 501 940 322 q 831 805 940 681 q 502 944 709 944 q 174 805 296 944 q 65 501 65 680 q 173 197 65 320 q 502 60 294 60 m 788 146 l 678 146 q 653 316 655 183 q 527 449 652 449 l 338 449 l 338 146 l 241 146 l 241 854 l 518 854 q 688 808 621 854 q 766 658 766 755 q 739 563 766 607 q 668 497 713 519 q 751 331 747 472 q 788 164 756 190 l 788 146 " }, "~": { x_min: 0, x_max: 833, ha: 931, o: "m 833 958 q 778 753 833 831 q 594 665 716 665 q 402 761 502 665 q 240 857 302 857 q 131 795 166 857 q 104 665 104 745 l 0 665 q 54 867 0 789 q 237 958 116 958 q 429 861 331 958 q 594 765 527 765 q 704 827 670 765 q 729 958 729 874 l 833 958 " }, "\u0395": { x_min: 0, x_max: 736.21875, ha: 778, o: "m 736 0 l 0 0 l 0 1013 l 725 1013 l 725 889 l 139 889 l 139 585 l 677 585 l 677 467 l 139 467 l 139 125 l 736 125 l 736 0 " }, "\xB3": { x_min: 0, x_max: 450, ha: 547, o: "m 450 552 q 379 413 450 464 q 220 366 313 366 q 69 414 130 366 q 0 567 0 470 l 85 567 q 126 470 85 504 q 225 437 168 437 q 320 467 280 437 q 360 552 360 498 q 318 632 360 608 q 213 657 276 657 q 195 657 203 657 q 176 657 181 657 l 176 722 q 279 733 249 722 q 334 815 334 752 q 300 881 334 856 q 220 907 267 907 q 133 875 169 907 q 97 781 97 844 l 15 781 q 78 926 15 875 q 220 972 135 972 q 364 930 303 972 q 426 817 426 888 q 344 697 426 733 q 421 642 392 681 q 450 552 450 603 " }, "[": { x_min: 0, x_max: 273.609375, ha: 371, o: "m 273 -281 l 0 -281 l 0 1013 l 273 1013 l 273 920 l 124 920 l 124 -187 l 273 -187 l 273 -281 " }, L: { x_min: 0, x_max: 645.828125, ha: 696, o: "m 645 0 l 0 0 l 0 1013 l 140 1013 l 140 126 l 645 126 l 645 0 " }, "\u03C3": { x_min: 0, x_max: 803.390625, ha: 894, o: "m 803 628 l 633 628 q 713 368 713 512 q 618 93 713 204 q 357 -25 518 -25 q 94 91 194 -25 q 0 368 0 201 q 94 644 0 533 q 356 761 194 761 q 481 750 398 761 q 608 739 564 739 l 803 739 l 803 628 m 360 85 q 529 180 467 85 q 584 374 584 262 q 527 566 584 490 q 352 651 463 651 q 187 559 247 651 q 135 368 135 478 q 189 175 135 254 q 360 85 251 85 " }, "\u03B6": { x_min: 0, x_max: 573, ha: 642, o: "m 573 -40 q 553 -162 573 -97 q 510 -278 543 -193 l 400 -278 q 441 -187 428 -219 q 462 -90 462 -132 q 378 -14 462 -14 q 108 45 197 -14 q 0 290 0 117 q 108 631 0 462 q 353 901 194 767 l 55 901 l 55 1012 l 561 1012 l 561 924 q 261 669 382 831 q 128 301 128 489 q 243 117 128 149 q 458 98 350 108 q 573 -40 573 80 " }, "\u03B8": { x_min: 0, x_max: 674, ha: 778, o: "m 674 496 q 601 160 674 304 q 336 -26 508 -26 q 73 153 165 -26 q 0 485 0 296 q 72 840 0 683 q 343 1045 166 1045 q 605 844 516 1045 q 674 496 674 692 m 546 579 q 498 798 546 691 q 336 935 437 935 q 178 798 237 935 q 126 579 137 701 l 546 579 m 546 475 l 126 475 q 170 233 126 348 q 338 80 230 80 q 504 233 447 80 q 546 475 546 346 " }, "\u039F": { x_min: 0, x_max: 958, ha: 1054, o: "m 485 1042 q 834 883 703 1042 q 958 511 958 735 q 834 136 958 287 q 481 -26 701 -26 q 126 130 261 -26 q 0 504 0 279 q 127 880 0 729 q 485 1042 263 1042 m 480 98 q 731 225 638 98 q 815 504 815 340 q 733 783 815 670 q 480 913 640 913 q 226 785 321 913 q 142 504 142 671 q 226 224 142 339 q 480 98 319 98 " }, "\u0393": { x_min: 0, x_max: 705.28125, ha: 749, o: "m 705 886 l 140 886 l 140 0 l 0 0 l 0 1012 l 705 1012 l 705 886 " }, " ": { x_min: 0, x_max: 0, ha: 375 }, "%": { x_min: -3, x_max: 1089, ha: 1186, o: "m 845 0 q 663 76 731 0 q 602 244 602 145 q 661 412 602 344 q 845 489 728 489 q 1027 412 959 489 q 1089 244 1089 343 q 1029 76 1089 144 q 845 0 962 0 m 844 103 q 945 143 909 103 q 981 243 981 184 q 947 340 981 301 q 844 385 909 385 q 744 342 781 385 q 708 243 708 300 q 741 147 708 186 q 844 103 780 103 m 888 986 l 284 -25 l 199 -25 l 803 986 l 888 986 m 241 468 q 58 545 126 468 q -3 715 -3 615 q 56 881 -3 813 q 238 958 124 958 q 421 881 353 958 q 483 712 483 813 q 423 544 483 612 q 241 468 356 468 m 241 855 q 137 811 175 855 q 100 710 100 768 q 136 612 100 653 q 240 572 172 572 q 344 614 306 572 q 382 713 382 656 q 347 810 382 771 q 241 855 308 855 " }, P: { x_min: 0, x_max: 726, ha: 806, o: "m 424 1013 q 640 931 555 1013 q 726 719 726 850 q 637 506 726 587 q 413 426 548 426 l 140 426 l 140 0 l 0 0 l 0 1013 l 424 1013 m 379 889 l 140 889 l 140 548 l 372 548 q 522 589 459 548 q 593 720 593 637 q 528 845 593 801 q 379 889 463 889 " }, "\u0388": { x_min: 0, x_max: 1078.21875, ha: 1118, o: "m 1078 0 l 342 0 l 342 1013 l 1067 1013 l 1067 889 l 481 889 l 481 585 l 1019 585 l 1019 467 l 481 467 l 481 125 l 1078 125 l 1078 0 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 " }, "\u038F": { x_min: 0.125, x_max: 1136.546875, ha: 1235, o: "m 1136 0 l 722 0 l 722 123 q 911 309 842 194 q 981 558 981 423 q 893 813 981 710 q 651 923 800 923 q 411 821 501 923 q 321 568 321 720 q 390 316 321 433 q 579 123 459 200 l 579 0 l 166 0 l 166 124 l 384 124 q 235 327 289 210 q 182 572 182 444 q 311 912 182 782 q 651 1042 441 1042 q 989 910 858 1042 q 1120 569 1120 778 q 1066 326 1120 443 q 917 124 1013 210 l 1136 124 l 1136 0 m 277 1040 l 83 800 l 0 800 l 140 1041 l 277 1040 " }, _: { x_min: 0, x_max: 705.5625, ha: 803, o: "m 705 -334 l 0 -334 l 0 -234 l 705 -234 l 705 -334 " }, "\u03AA": { x_min: -110, x_max: 246, ha: 275, o: "m 246 1046 l 118 1046 l 118 1189 l 246 1189 l 246 1046 m 18 1046 l -110 1046 l -110 1189 l 18 1189 l 18 1046 m 136 0 l 0 0 l 0 1012 l 136 1012 l 136 0 " }, "+": { x_min: 23, x_max: 768, ha: 792, o: "m 768 372 l 444 372 l 444 0 l 347 0 l 347 372 l 23 372 l 23 468 l 347 468 l 347 840 l 444 840 l 444 468 l 768 468 l 768 372 " }, "\xBD": { x_min: 0, x_max: 1050, ha: 1149, o: "m 1050 0 l 625 0 q 712 178 625 108 q 878 277 722 187 q 967 385 967 328 q 932 456 967 429 q 850 484 897 484 q 759 450 798 484 q 721 352 721 416 l 640 352 q 706 502 640 448 q 851 551 766 551 q 987 509 931 551 q 1050 385 1050 462 q 976 251 1050 301 q 829 179 902 215 q 717 68 740 133 l 1050 68 l 1050 0 m 834 985 l 215 -28 l 130 -28 l 750 984 l 834 985 m 224 422 l 142 422 l 142 811 l 0 811 l 0 867 q 104 889 62 867 q 164 973 157 916 l 224 973 l 224 422 " }, "\u03A1": { x_min: 0, x_max: 720, ha: 783, o: "m 424 1013 q 637 933 554 1013 q 720 723 720 853 q 633 508 720 591 q 413 426 546 426 l 140 426 l 140 0 l 0 0 l 0 1013 l 424 1013 m 378 889 l 140 889 l 140 548 l 371 548 q 521 589 458 548 q 592 720 592 637 q 527 845 592 801 q 378 889 463 889 " }, "'": { x_min: 0, x_max: 139, ha: 236, o: "m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 " }, "\xAA": { x_min: 0, x_max: 350, ha: 397, o: "m 350 625 q 307 616 328 616 q 266 631 281 616 q 247 673 251 645 q 190 628 225 644 q 116 613 156 613 q 32 641 64 613 q 0 722 0 669 q 72 826 0 800 q 247 866 159 846 l 247 887 q 220 934 247 916 q 162 953 194 953 q 104 934 129 953 q 76 882 80 915 l 16 882 q 60 976 16 941 q 166 1011 104 1011 q 266 979 224 1011 q 308 891 308 948 l 308 706 q 311 679 308 688 q 331 670 315 670 l 350 672 l 350 625 m 247 757 l 247 811 q 136 790 175 798 q 64 726 64 773 q 83 682 64 697 q 132 667 103 667 q 207 690 174 667 q 247 757 247 718 " }, "\u0385": { x_min: 0, x_max: 450, ha: 553, o: "m 450 800 l 340 800 l 340 925 l 450 925 l 450 800 m 406 1040 l 212 800 l 129 800 l 269 1040 l 406 1040 m 110 800 l 0 800 l 0 925 l 110 925 l 110 800 " }, T: { x_min: 0, x_max: 777, ha: 835, o: "m 777 894 l 458 894 l 458 0 l 319 0 l 319 894 l 0 894 l 0 1013 l 777 1013 l 777 894 " }, "\u03A6": { x_min: 0, x_max: 915, ha: 997, o: "m 527 0 l 389 0 l 389 122 q 110 231 220 122 q 0 509 0 340 q 110 785 0 677 q 389 893 220 893 l 389 1013 l 527 1013 l 527 893 q 804 786 693 893 q 915 509 915 679 q 805 231 915 341 q 527 122 696 122 l 527 0 m 527 226 q 712 310 641 226 q 779 507 779 389 q 712 705 779 627 q 527 787 641 787 l 527 226 m 389 226 l 389 787 q 205 698 275 775 q 136 505 136 620 q 206 308 136 391 q 389 226 276 226 " }, "\u204B": { x_min: 0, x_max: 0, ha: 694 }, j: { x_min: -77.78125, x_max: 167, ha: 349, o: "m 167 871 l 42 871 l 42 1013 l 167 1013 l 167 871 m 167 -80 q 121 -231 167 -184 q -26 -278 76 -278 l -77 -278 l -77 -164 l -41 -164 q 26 -143 11 -164 q 42 -65 42 -122 l 42 737 l 167 737 l 167 -80 " }, "\u03A3": { x_min: 0, x_max: 756.953125, ha: 819, o: "m 756 0 l 0 0 l 0 107 l 395 523 l 22 904 l 22 1013 l 745 1013 l 745 889 l 209 889 l 566 523 l 187 125 l 756 125 l 756 0 " }, "\u203A": { x_min: 18.0625, x_max: 774, ha: 792, o: "m 774 376 l 18 40 l 18 149 l 631 421 l 18 692 l 18 799 l 774 465 l 774 376 " }, "<": { x_min: 17.984375, x_max: 773.609375, ha: 792, o: "m 773 40 l 18 376 l 17 465 l 773 799 l 773 692 l 159 420 l 773 149 l 773 40 " }, "\xA3": { x_min: 0, x_max: 704.484375, ha: 801, o: "m 704 41 q 623 -10 664 5 q 543 -26 583 -26 q 359 15 501 -26 q 243 36 288 36 q 158 23 197 36 q 73 -21 119 10 l 6 76 q 125 195 90 150 q 175 331 175 262 q 147 443 175 383 l 0 443 l 0 512 l 108 512 q 43 734 43 623 q 120 929 43 854 q 358 1010 204 1010 q 579 936 487 1010 q 678 729 678 857 l 678 684 l 552 684 q 504 838 552 780 q 362 896 457 896 q 216 852 263 896 q 176 747 176 815 q 199 627 176 697 q 248 512 217 574 l 468 512 l 468 443 l 279 443 q 297 356 297 398 q 230 194 297 279 q 153 107 211 170 q 227 133 190 125 q 293 142 264 142 q 410 119 339 142 q 516 96 482 96 q 579 105 550 96 q 648 142 608 115 l 704 41 " }, t: { x_min: 0, x_max: 367, ha: 458, o: "m 367 0 q 312 -5 339 -2 q 262 -8 284 -8 q 145 28 183 -8 q 108 143 108 64 l 108 638 l 0 638 l 0 738 l 108 738 l 108 944 l 232 944 l 232 738 l 367 738 l 367 638 l 232 638 l 232 185 q 248 121 232 140 q 307 102 264 102 q 345 104 330 102 q 367 107 360 107 l 367 0 " }, "\xAC": { x_min: 0, x_max: 706, ha: 803, o: "m 706 411 l 706 158 l 630 158 l 630 335 l 0 335 l 0 411 l 706 411 " }, "\u03BB": { x_min: 0, x_max: 750, ha: 803, o: "m 750 -7 q 679 -15 716 -15 q 538 59 591 -15 q 466 214 512 97 l 336 551 l 126 0 l 0 0 l 270 705 q 223 837 247 770 q 116 899 190 899 q 90 898 100 899 l 90 1004 q 152 1011 125 1011 q 298 938 244 1011 q 373 783 326 901 l 605 192 q 649 115 629 136 q 716 95 669 95 l 736 95 q 750 97 745 97 l 750 -7 " }, W: { x_min: 0, x_max: 1263.890625, ha: 1351, o: "m 1263 1013 l 995 0 l 859 0 l 627 837 l 405 0 l 265 0 l 0 1013 l 136 1013 l 342 202 l 556 1013 l 701 1013 l 921 207 l 1133 1012 l 1263 1013 " }, ">": { x_min: 18.0625, x_max: 774, ha: 792, o: "m 774 376 l 18 40 l 18 149 l 631 421 l 18 692 l 18 799 l 774 465 l 774 376 " }, v: { x_min: 0, x_max: 675.15625, ha: 761, o: "m 675 738 l 404 0 l 272 0 l 0 738 l 133 737 l 340 147 l 541 737 l 675 738 " }, "\u03C4": { x_min: 0.28125, x_max: 644.5, ha: 703, o: "m 644 628 l 382 628 l 382 179 q 388 120 382 137 q 436 91 401 91 q 474 94 447 91 q 504 97 501 97 l 504 0 q 454 -9 482 -5 q 401 -14 426 -14 q 278 67 308 -14 q 260 233 260 118 l 260 628 l 0 628 l 0 739 l 644 739 l 644 628 " }, "\u03BE": { x_min: 0, x_max: 624.9375, ha: 699, o: "m 624 -37 q 608 -153 624 -96 q 563 -278 593 -211 l 454 -278 q 491 -183 486 -200 q 511 -83 511 -126 q 484 -23 511 -44 q 370 1 452 1 q 323 0 354 1 q 283 -1 293 -1 q 84 76 169 -1 q 0 266 0 154 q 56 431 0 358 q 197 538 108 498 q 94 613 134 562 q 54 730 54 665 q 77 823 54 780 q 143 901 101 867 l 27 901 l 27 1012 l 576 1012 l 576 901 l 380 901 q 244 863 303 901 q 178 745 178 820 q 312 600 178 636 q 532 582 380 582 l 532 479 q 276 455 361 479 q 118 281 118 410 q 165 173 118 217 q 274 120 208 133 q 494 101 384 110 q 624 -37 624 76 " }, "&": { x_min: -3, x_max: 894.25, ha: 992, o: "m 894 0 l 725 0 l 624 123 q 471 0 553 40 q 306 -41 390 -41 q 168 -7 231 -41 q 62 92 105 26 q 14 187 31 139 q -3 276 -3 235 q 55 433 -3 358 q 248 581 114 508 q 170 689 196 640 q 137 817 137 751 q 214 985 137 922 q 384 1041 284 1041 q 548 988 483 1041 q 622 824 622 928 q 563 666 622 739 q 431 556 516 608 l 621 326 q 649 407 639 361 q 663 493 653 426 l 781 493 q 703 229 781 352 l 894 0 m 504 818 q 468 908 504 877 q 384 940 433 940 q 293 907 331 940 q 255 818 255 875 q 289 714 255 767 q 363 628 313 678 q 477 729 446 682 q 504 818 504 771 m 556 209 l 314 499 q 179 395 223 449 q 135 283 135 341 q 146 222 135 253 q 183 158 158 192 q 333 80 241 80 q 556 209 448 80 " }, "\u039B": { x_min: 0, x_max: 862.5, ha: 942, o: "m 862 0 l 719 0 l 426 847 l 143 0 l 0 0 l 356 1013 l 501 1013 l 862 0 " }, I: { x_min: 41, x_max: 180, ha: 293, o: "m 180 0 l 41 0 l 41 1013 l 180 1013 l 180 0 " }, G: { x_min: 0, x_max: 921, ha: 1011, o: "m 921 0 l 832 0 l 801 136 q 655 15 741 58 q 470 -28 568 -28 q 126 133 259 -28 q 0 499 0 284 q 125 881 0 731 q 486 1043 259 1043 q 763 957 647 1043 q 905 709 890 864 l 772 709 q 668 866 747 807 q 486 926 589 926 q 228 795 322 926 q 142 507 142 677 q 228 224 142 342 q 483 94 323 94 q 712 195 625 94 q 796 435 796 291 l 477 435 l 477 549 l 921 549 l 921 0 " }, "\u03B0": { x_min: 0, x_max: 617, ha: 725, o: "m 524 800 l 414 800 l 414 925 l 524 925 l 524 800 m 183 800 l 73 800 l 73 925 l 183 925 l 183 800 m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 m 489 1040 l 300 819 l 216 819 l 351 1040 l 489 1040 " }, "`": { x_min: 0, x_max: 138.890625, ha: 236, o: "m 138 699 l 0 699 l 0 861 q 36 974 0 929 q 138 1041 72 1020 l 138 977 q 82 931 95 969 q 69 839 69 893 l 138 839 l 138 699 " }, "\xB7": { x_min: 0, x_max: 142, ha: 239, o: "m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 " }, "\u03A5": { x_min: 0.328125, x_max: 819.515625, ha: 889, o: "m 819 1013 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1013 l 140 1013 l 411 533 l 679 1013 l 819 1013 " }, r: { x_min: 0, x_max: 355.5625, ha: 432, o: "m 355 621 l 343 621 q 179 569 236 621 q 122 411 122 518 l 122 0 l 0 0 l 0 737 l 117 737 l 117 604 q 204 719 146 686 q 355 753 262 753 l 355 621 " }, x: { x_min: 0, x_max: 675, ha: 764, o: "m 675 0 l 525 0 l 331 286 l 144 0 l 0 0 l 256 379 l 12 738 l 157 737 l 336 473 l 516 738 l 661 738 l 412 380 l 675 0 " }, "\u03BC": { x_min: 0, x_max: 696.609375, ha: 747, o: "m 696 -4 q 628 -14 657 -14 q 498 97 513 -14 q 422 8 470 41 q 313 -24 374 -24 q 207 3 258 -24 q 120 80 157 31 l 120 -278 l 0 -278 l 0 738 l 124 738 l 124 343 q 165 172 124 246 q 308 82 216 82 q 451 177 402 82 q 492 358 492 254 l 492 738 l 616 738 l 616 214 q 623 136 616 160 q 673 92 636 92 q 696 95 684 92 l 696 -4 " }, h: { x_min: 0, x_max: 615, ha: 724, o: "m 615 472 l 615 0 l 490 0 l 490 454 q 456 590 490 535 q 338 654 416 654 q 186 588 251 654 q 122 436 122 522 l 122 0 l 0 0 l 0 1013 l 122 1013 l 122 633 q 218 727 149 694 q 362 760 287 760 q 552 676 484 760 q 615 472 615 600 " }, ".": { x_min: 0, x_max: 142, ha: 239, o: "m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 " }, "\u03C6": { x_min: -2, x_max: 878, ha: 974, o: "m 496 -279 l 378 -279 l 378 -17 q 101 88 204 -17 q -2 367 -2 194 q 68 626 -2 510 q 283 758 151 758 l 283 646 q 167 537 209 626 q 133 373 133 462 q 192 177 133 254 q 378 93 259 93 l 378 758 q 445 764 426 763 q 476 765 464 765 q 765 659 653 765 q 878 377 878 553 q 771 96 878 209 q 496 -17 665 -17 l 496 -279 m 496 93 l 514 93 q 687 183 623 93 q 746 380 746 265 q 691 569 746 491 q 522 658 629 658 l 496 656 l 496 93 " }, ";": { x_min: 0, x_max: 142, ha: 239, o: "m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 m 142 -12 q 105 -132 142 -82 q 0 -206 68 -182 l 0 -138 q 58 -82 43 -123 q 68 0 68 -56 l 0 0 l 0 151 l 142 151 l 142 -12 " }, f: { x_min: 0, x_max: 378, ha: 472, o: "m 378 638 l 246 638 l 246 0 l 121 0 l 121 638 l 0 638 l 0 738 l 121 738 q 137 935 121 887 q 290 1028 171 1028 q 320 1027 305 1028 q 378 1021 334 1026 l 378 908 q 323 918 346 918 q 257 870 273 918 q 246 780 246 840 l 246 738 l 378 738 l 378 638 " }, "\u201C": { x_min: 1, x_max: 348.21875, ha: 454, o: "m 140 670 l 1 670 l 1 830 q 37 943 1 897 q 140 1011 74 990 l 140 947 q 82 900 97 940 q 68 810 68 861 l 140 810 l 140 670 m 348 670 l 209 670 l 209 830 q 245 943 209 897 q 348 1011 282 990 l 348 947 q 290 900 305 940 q 276 810 276 861 l 348 810 l 348 670 " }, A: { x_min: 0.03125, x_max: 906.953125, ha: 1008, o: "m 906 0 l 756 0 l 648 303 l 251 303 l 142 0 l 0 0 l 376 1013 l 529 1013 l 906 0 m 610 421 l 452 867 l 293 421 l 610 421 " }, "\u2018": { x_min: 1, x_max: 139.890625, ha: 236, o: "m 139 670 l 1 670 l 1 830 q 37 943 1 897 q 139 1011 74 990 l 139 947 q 82 900 97 940 q 68 810 68 861 l 139 810 l 139 670 " }, "\u03CA": { x_min: -70, x_max: 283, ha: 361, o: "m 283 800 l 173 800 l 173 925 l 283 925 l 283 800 m 40 800 l -70 800 l -70 925 l 40 925 l 40 800 m 283 3 q 232 -10 257 -5 q 181 -15 206 -15 q 84 26 118 -15 q 41 200 41 79 l 41 737 l 166 737 l 167 215 q 171 141 167 157 q 225 101 182 101 q 247 103 238 101 q 283 112 256 104 l 283 3 " }, "\u03C0": { x_min: -0.21875, x_max: 773.21875, ha: 857, o: "m 773 -7 l 707 -11 q 575 40 607 -11 q 552 174 552 77 l 552 226 l 552 626 l 222 626 l 222 0 l 97 0 l 97 626 l 0 626 l 0 737 l 773 737 l 773 626 l 676 626 l 676 171 q 695 103 676 117 q 773 90 714 90 l 773 -7 " }, "\u03AC": { x_min: 0, x_max: 765.5625, ha: 809, o: "m 765 -4 q 698 -14 726 -14 q 564 97 586 -14 q 466 7 525 40 q 337 -26 407 -26 q 88 98 186 -26 q 0 369 0 212 q 88 637 0 525 q 337 760 184 760 q 465 727 407 760 q 563 637 524 695 l 563 738 l 685 738 l 685 222 q 693 141 685 168 q 748 94 708 94 q 765 95 760 94 l 765 -4 m 584 371 q 531 562 584 485 q 360 653 470 653 q 192 566 254 653 q 135 379 135 489 q 186 181 135 261 q 358 84 247 84 q 528 176 465 84 q 584 371 584 260 m 604 1040 l 415 819 l 332 819 l 466 1040 l 604 1040 " }, O: { x_min: 0, x_max: 958, ha: 1057, o: "m 485 1041 q 834 882 702 1041 q 958 512 958 734 q 834 136 958 287 q 481 -26 702 -26 q 126 130 261 -26 q 0 504 0 279 q 127 880 0 728 q 485 1041 263 1041 m 480 98 q 731 225 638 98 q 815 504 815 340 q 733 783 815 669 q 480 912 640 912 q 226 784 321 912 q 142 504 142 670 q 226 224 142 339 q 480 98 319 98 " }, n: { x_min: 0, x_max: 615, ha: 724, o: "m 615 463 l 615 0 l 490 0 l 490 454 q 453 592 490 537 q 331 656 410 656 q 178 585 240 656 q 117 421 117 514 l 117 0 l 0 0 l 0 738 l 117 738 l 117 630 q 218 728 150 693 q 359 764 286 764 q 552 675 484 764 q 615 463 615 593 " }, l: { x_min: 41, x_max: 166, ha: 279, o: "m 166 0 l 41 0 l 41 1013 l 166 1013 l 166 0 " }, "\xA4": { x_min: 40.09375, x_max: 728.796875, ha: 825, o: "m 728 304 l 649 224 l 512 363 q 383 331 458 331 q 256 363 310 331 l 119 224 l 40 304 l 177 441 q 150 553 150 493 q 184 673 150 621 l 40 818 l 119 898 l 267 749 q 321 766 291 759 q 384 773 351 773 q 447 766 417 773 q 501 749 477 759 l 649 898 l 728 818 l 585 675 q 612 618 604 648 q 621 553 621 587 q 591 441 621 491 l 728 304 m 384 682 q 280 643 318 682 q 243 551 243 604 q 279 461 243 499 q 383 423 316 423 q 487 461 449 423 q 525 553 525 500 q 490 641 525 605 q 384 682 451 682 " }, "\u03BA": { x_min: 0, x_max: 632.328125, ha: 679, o: "m 632 0 l 482 0 l 225 384 l 124 288 l 124 0 l 0 0 l 0 738 l 124 738 l 124 446 l 433 738 l 596 738 l 312 466 l 632 0 " }, p: { x_min: 0, x_max: 685, ha: 786, o: "m 685 364 q 598 96 685 205 q 350 -23 504 -23 q 121 89 205 -23 l 121 -278 l 0 -278 l 0 738 l 121 738 l 121 633 q 220 726 159 691 q 351 761 280 761 q 598 636 504 761 q 685 364 685 522 m 557 371 q 501 560 557 481 q 330 651 437 651 q 162 559 223 651 q 108 366 108 479 q 162 177 108 254 q 333 87 224 87 q 502 178 441 87 q 557 371 557 258 " }, "\u2021": { x_min: 0, x_max: 777, ha: 835, o: "m 458 238 l 458 0 l 319 0 l 319 238 l 0 238 l 0 360 l 319 360 l 319 681 l 0 683 l 0 804 l 319 804 l 319 1015 l 458 1013 l 458 804 l 777 804 l 777 683 l 458 683 l 458 360 l 777 360 l 777 238 l 458 238 " }, "\u03C8": { x_min: 0, x_max: 808, ha: 907, o: "m 465 -278 l 341 -278 l 341 -15 q 87 102 180 -15 q 0 378 0 210 l 0 739 l 133 739 l 133 379 q 182 195 133 275 q 341 98 242 98 l 341 922 l 465 922 l 465 98 q 623 195 563 98 q 675 382 675 278 l 675 742 l 808 742 l 808 381 q 720 104 808 213 q 466 -13 627 -13 l 465 -278 " }, "\u03B7": { x_min: 0.78125, x_max: 697, ha: 810, o: "m 697 -278 l 572 -278 l 572 454 q 540 587 572 536 q 425 650 501 650 q 271 579 337 650 q 206 420 206 509 l 206 0 l 81 0 l 81 489 q 73 588 81 562 q 0 644 56 644 l 0 741 q 68 755 38 755 q 158 720 124 755 q 200 630 193 686 q 297 726 234 692 q 434 761 359 761 q 620 692 544 761 q 697 516 697 624 l 697 -278 " } };
var cssFontWeight = "normal";
var ascender = 1189;
var underlinePosition = -100;
var cssFontStyle = "normal";
var boundingBox = { yMin: -334, xMin: -111, yMax: 1189, xMax: 1672 };
var resolution = 1e3;
var original_font_information = { postscript_name: "Helvetiker-Regular", version_string: "Version 1.00 2004 initial release", vendor_url: "http://www.magenta.gr/", full_font_name: "Helvetiker", font_family_name: "Helvetiker", copyright: "Copyright (c) \u039Cagenta ltd, 2004", description: "", trademark: "", designer: "", designer_url: "", unique_font_identifier: "\u039Cagenta ltd:Helvetiker:22-10-104", license_url: "http://www.ellak.gr/fonts/MgOpen/license.html", license_description: 'Copyright (c) 2004 by MAGENTA Ltd. All Rights Reserved.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of the fonts accompanying this license ("Fonts") and associated documentation files (the "Font Software"), to reproduce and distribute the Font Software, including without limitation the rights to use, copy, merge, publish, distribute, and/or sell copies of the Font Software, and to permit persons to whom the Font Software is furnished to do so, subject to the following conditions: \r\n\r\nThe above copyright and this permission notice shall be included in all copies of one or more of the Font Software typefaces.\r\n\r\nThe Font Software may be modified, altered, or added to, and in particular the designs of glyphs or characters in the Fonts may be modified and additional glyphs or characters may be added to the Fonts, only if the fonts are renamed to names not containing the word "MgOpen", or if the modifications are accepted for inclusion in the Font Software itself by the each appointed Administrator.\r\n\r\nThis License becomes null and void to the extent applicable to Fonts or Font Software that has been modified and is distributed under the "MgOpen" name.\r\n\r\nThe Font Software may be sold as part of a larger software package but no copy of one or more of the Font Software typefaces may be sold by itself. \r\n\r\nTHE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL MAGENTA OR PERSONS OR BODIES IN CHARGE OF ADMINISTRATION AND MAINTENANCE OF THE FONT SOFTWARE BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE.', manufacturer_name: "\u039Cagenta ltd", font_sub_family_name: "Regular" };
var descender = -334;
var familyName = "Helvetiker";
var lineHeight = 1522;
var underlineThickness = 50;
var defaultTypeFace = { glyphs, cssFontWeight, ascender, underlinePosition, cssFontStyle, boundingBox, resolution, original_font_information, descender, familyName, lineHeight, underlineThickness };
var THREE$12 = window.THREE ? window.THREE : {
  CircleBufferGeometry,
  Font,
  Group,
  Mesh,
  MeshLambertMaterial,
  TextBufferGeometry,
  Vector3
};
var LabelsLayerKapsule = kapsule_module_default({
  props: {
    labelsData: {
      "default": []
    },
    labelLat: {
      "default": "lat"
    },
    labelLng: {
      "default": "lng"
    },
    labelAltitude: {
      "default": 0
    },
    labelText: {
      "default": "text"
    },
    labelSize: {
      "default": 0.5
    },
    labelTypeFace: {
      "default": defaultTypeFace,
      onChange: function onChange4(tf, state) {
        state.font = new THREE$12.Font(tf);
      }
    },
    labelColor: {
      "default": function _default15() {
        return "lightgrey";
      }
    },
    labelRotation: {
      "default": 0
    },
    labelResolution: {
      "default": 3
    },
    labelIncludeDot: {
      "default": true
    },
    labelDotRadius: {
      "default": 0.1
    },
    labelDotOrientation: {
      "default": function _default16() {
        return "bottom";
      }
    },
    labelsTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    }
  },
  init: function init9(threeObj, state) {
    emptyObject(threeObj);
    state.scene = threeObj;
  },
  update: function update10(state) {
    var latAccessor = accessor_fn_module_default(state.labelLat);
    var lngAccessor = accessor_fn_module_default(state.labelLng);
    var altitudeAccessor = accessor_fn_module_default(state.labelAltitude);
    var textAccessor = accessor_fn_module_default(state.labelText);
    var sizeAccessor = accessor_fn_module_default(state.labelSize);
    var rotationAccessor = accessor_fn_module_default(state.labelRotation);
    var colorAccessor = accessor_fn_module_default(state.labelColor);
    var includeDotAccessor = accessor_fn_module_default(state.labelIncludeDot);
    var dotRadiusAccessor = accessor_fn_module_default(state.labelDotRadius);
    var dotOrientationAccessor = accessor_fn_module_default(state.labelDotOrientation);
    var orientations = new Set(["right", "top", "bottom"]);
    var pxPerDeg = 2 * Math.PI * GLOBE_RADIUS / 360;
    var circleGeometry = new THREE$12.CircleBufferGeometry(1, 16);
    threeDigest(state.labelsData, state.scene, {
      createObj: function createObj() {
        var material = new THREE$12.MeshLambertMaterial();
        var obj = new THREE$12.Group();
        obj.add(new THREE$12.Mesh(circleGeometry, material));
        obj.add(new THREE$12.Mesh(void 0, material));
        obj.__globeObjType = "label";
        return obj;
      },
      updateObj: function updateObj(obj, d) {
        var _obj$children = _slicedToArray6(obj.children, 2), dotObj = _obj$children[0], textObj = _obj$children[1];
        var color3 = colorAccessor(d);
        var opacity = colorAlpha(color3);
        textObj.material.color.set(colorStr2Hex(color3));
        textObj.material.transparent = opacity < 1;
        textObj.material.opacity = opacity;
        var includeDot = includeDotAccessor(d);
        var dotOrient = dotOrientationAccessor(d);
        !includeDot || !orientations.has(dotOrient) && (dotOrient = "bottom");
        var dotR = includeDot ? +dotRadiusAccessor(d) * pxPerDeg : 1e-12;
        dotObj.scale.x = dotObj.scale.y = dotR;
        var textHeight = +sizeAccessor(d) * pxPerDeg;
        textObj.geometry = new THREE$12.TextBufferGeometry(textAccessor(d), {
          font: state.font,
          size: textHeight,
          height: 0,
          curveSegments: state.labelResolution
        });
        dotOrient !== "right" && textObj.geometry.center();
        if (includeDot) {
          var padding = dotR + textHeight / 2;
          dotOrient === "right" && (textObj.position.x = padding);
          textObj.position.y = {
            right: -textHeight / 2,
            top: padding + textHeight / 2,
            bottom: -padding - textHeight / 2
          }[dotOrient];
        }
        var applyPosition = function applyPosition2(td) {
          var _obj$__currentTargetD = obj.__currentTargetD = td, lat = _obj$__currentTargetD.lat, lng = _obj$__currentTargetD.lng, alt = _obj$__currentTargetD.alt, rot = _obj$__currentTargetD.rot, scale2 = _obj$__currentTargetD.scale;
          Object.assign(obj.position, polar2Cartesian3(lat, lng, alt));
          obj.lookAt(state.scene.localToWorld(new THREE$12.Vector3(0, 0, 0)));
          obj.rotateY(Math.PI);
          obj.rotateZ(-rot * Math.PI / 180);
          obj.scale.x = obj.scale.y = obj.scale.z = scale2;
        };
        var targetD = {
          lat: +latAccessor(d),
          lng: +lngAccessor(d),
          alt: +altitudeAccessor(d),
          rot: +rotationAccessor(d),
          scale: 1
        };
        var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {
          scale: 1e-12
        });
        if (Object.keys(targetD).some(function(k) {
          return currentTargetD[k] !== targetD[k];
        })) {
          if (!state.labelsTransitionDuration || state.labelsTransitionDuration < 0) {
            applyPosition(targetD);
          } else {
            new tween_esm_default.Tween(currentTargetD).to(targetD, state.labelsTransitionDuration).easing(tween_esm_default.Easing.Quadratic.InOut).onUpdate(applyPosition).start();
          }
        }
      }
    });
  }
});
var CustomLayerKapsule = kapsule_module_default({
  props: {
    customLayerData: {
      "default": []
    },
    customThreeObject: {},
    customThreeObjectUpdate: {
      triggerUpdate: false
    }
  },
  init: function init10(threeObj, state) {
    emptyObject(threeObj);
    state.scene = threeObj;
  },
  update: function update11(state) {
    if (!state.customThreeObjectUpdate) {
      emptyObject(state.scene);
    }
    var customObjectAccessor = accessor_fn_module_default(state.customThreeObject);
    var customObjectUpdateAccessor = accessor_fn_module_default(state.customThreeObjectUpdate);
    threeDigest(state.customLayerData, state.scene, {
      createObj: function createObj(d) {
        var obj = customObjectAccessor(d, GLOBE_RADIUS);
        if (obj) {
          if (state.customThreeObject === obj) {
            obj = obj.clone();
          }
          obj.__globeObjType = "custom";
        }
        return obj;
      },
      updateObj: function updateObj(obj, d) {
        return customObjectUpdateAccessor(obj, d, GLOBE_RADIUS);
      }
    });
  }
});
var THREE4 = window.THREE ? window.THREE : {
  Group,
  Vector2,
  Vector3
};
var layers = ["globeLayer", "pointsLayer", "arcsLayer", "hexBinLayer", "polygonsLayer", "hexedPolygonsLayer", "pathsLayer", "tilesLayer", "labelsLayer", "customLayer"];
var bindGlobeLayer = linkKapsule("globeLayer", GlobeLayerKapsule);
var linkedGlobeLayerProps = Object.assign.apply(Object, _toConsumableArray4(["globeImageUrl", "bumpImageUrl", "showGlobe", "showGraticules", "showAtmosphere", "atmosphereColor", "atmosphereAltitude"].map(function(p) {
  return _defineProperty2({}, p, bindGlobeLayer.linkProp(p));
})));
var linkedGlobeLayerMethods = Object.assign.apply(Object, _toConsumableArray4(["globeMaterial"].map(function(p) {
  return _defineProperty2({}, p, bindGlobeLayer.linkMethod(p));
})));
var bindPointsLayer = linkKapsule("pointsLayer", PointsLayerKapsule);
var linkedPointsLayerProps = Object.assign.apply(Object, _toConsumableArray4(["pointsData", "pointLat", "pointLng", "pointColor", "pointAltitude", "pointRadius", "pointResolution", "pointsMerge", "pointsTransitionDuration"].map(function(p) {
  return _defineProperty2({}, p, bindPointsLayer.linkProp(p));
})));
var bindArcsLayer = linkKapsule("arcsLayer", ArcsLayerKapsule);
var linkedArcsLayerProps = Object.assign.apply(Object, _toConsumableArray4(["arcsData", "arcStartLat", "arcStartLng", "arcEndLat", "arcEndLng", "arcColor", "arcAltitude", "arcAltitudeAutoScale", "arcStroke", "arcCurveResolution", "arcCircularResolution", "arcDashLength", "arcDashGap", "arcDashInitialGap", "arcDashAnimateTime", "arcsTransitionDuration"].map(function(p) {
  return _defineProperty2({}, p, bindArcsLayer.linkProp(p));
})));
var bindHexBinLayer = linkKapsule("hexBinLayer", HexBinLayerKapsule);
var linkedHexBinLayerProps = Object.assign.apply(Object, _toConsumableArray4(["hexBinPointsData", "hexBinPointLat", "hexBinPointLng", "hexBinPointWeight", "hexBinResolution", "hexMargin", "hexTopCurvatureResolution", "hexTopColor", "hexSideColor", "hexAltitude", "hexBinMerge", "hexTransitionDuration"].map(function(p) {
  return _defineProperty2({}, p, bindHexBinLayer.linkProp(p));
})));
var bindHexedPolygonsLayer = linkKapsule("hexedPolygonsLayer", HexedPolygonsLayerKapsule);
var linkedHexedPolygonsLayerProps = Object.assign.apply(Object, _toConsumableArray4(["hexPolygonsData", "hexPolygonGeoJsonGeometry", "hexPolygonColor", "hexPolygonAltitude", "hexPolygonResolution", "hexPolygonMargin", "hexPolygonCurvatureResolution", "hexPolygonsTransitionDuration"].map(function(p) {
  return _defineProperty2({}, p, bindHexedPolygonsLayer.linkProp(p));
})));
var bindPolygonsLayer = linkKapsule("polygonsLayer", PolygonsLayerKapsule);
var linkedPolygonsLayerProps = Object.assign.apply(Object, _toConsumableArray4(["polygonsData", "polygonGeoJsonGeometry", "polygonCapColor", "polygonCapMaterial", "polygonSideColor", "polygonSideMaterial", "polygonStrokeColor", "polygonAltitude", "polygonCapCurvatureResolution", "polygonsTransitionDuration"].map(function(p) {
  return _defineProperty2({}, p, bindPolygonsLayer.linkProp(p));
})));
var bindPathsLayer = linkKapsule("pathsLayer", PathsLayerKapsule);
var linkedPathsLayerProps = Object.assign.apply(Object, _toConsumableArray4(["pathsData", "pathPoints", "pathPointLat", "pathPointLng", "pathPointAlt", "pathResolution", "pathColor", "pathStroke", "pathDashLength", "pathDashGap", "pathDashInitialGap", "pathDashAnimateTime", "pathTransitionDuration"].map(function(p) {
  return _defineProperty2({}, p, bindPathsLayer.linkProp(p));
})));
var bindTilesLayer = linkKapsule("tilesLayer", TilesLayerKapsule);
var linkedTilesLayerProps = Object.assign.apply(Object, _toConsumableArray4(["tilesData", "tileLat", "tileLng", "tileAltitude", "tileWidth", "tileHeight", "tileUseGlobeProjection", "tileMaterial", "tileCurvatureResolution", "tilesTransitionDuration"].map(function(p) {
  return _defineProperty2({}, p, bindTilesLayer.linkProp(p));
})));
var bindLabelsLayer = linkKapsule("labelsLayer", LabelsLayerKapsule);
var linkedLabelsLayerProps = Object.assign.apply(Object, _toConsumableArray4(["labelsData", "labelLat", "labelLng", "labelAltitude", "labelRotation", "labelText", "labelSize", "labelTypeFace", "labelColor", "labelResolution", "labelIncludeDot", "labelDotRadius", "labelDotOrientation", "labelsTransitionDuration"].map(function(p) {
  return _defineProperty2({}, p, bindLabelsLayer.linkProp(p));
})));
var bindCustomLayer = linkKapsule("customLayer", CustomLayerKapsule);
var linkedCustomLayerProps = Object.assign.apply(Object, _toConsumableArray4(["customLayerData", "customThreeObject", "customThreeObjectUpdate"].map(function(p) {
  return _defineProperty2({}, p, bindCustomLayer.linkProp(p));
})));
var Globe = kapsule_module_default({
  props: _objectSpread22(_objectSpread22(_objectSpread22(_objectSpread22(_objectSpread22(_objectSpread22(_objectSpread22(_objectSpread22(_objectSpread22(_objectSpread22({
    onGlobeReady: {
      triggerUpdate: false
    },
    rendererSize: {
      "default": new THREE4.Vector2(window.innerWidth, window.innerHeight),
      onChange: function onChange5(rendererSize, state) {
        state.pathsLayer.rendererSize(rendererSize);
      },
      triggerUpdate: false
    }
  }, linkedGlobeLayerProps), linkedPointsLayerProps), linkedArcsLayerProps), linkedHexBinLayerProps), linkedPolygonsLayerProps), linkedHexedPolygonsLayerProps), linkedPathsLayerProps), linkedTilesLayerProps), linkedLabelsLayerProps), linkedCustomLayerProps),
  methods: _objectSpread22({
    getCoords: function getCoords(state) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return polar2Cartesian3.apply(void 0, args);
    },
    toGeoCoords: function toGeoCoords(state) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      return cartesian2Polar.apply(void 0, args);
    }
  }, linkedGlobeLayerMethods),
  stateInit: function stateInit2() {
    return {
      globeLayer: GlobeLayerKapsule(),
      pointsLayer: PointsLayerKapsule(),
      arcsLayer: ArcsLayerKapsule(),
      hexBinLayer: HexBinLayerKapsule(),
      polygonsLayer: PolygonsLayerKapsule(),
      hexedPolygonsLayer: HexedPolygonsLayerKapsule(),
      pathsLayer: PathsLayerKapsule(),
      tilesLayer: TilesLayerKapsule(),
      labelsLayer: LabelsLayerKapsule(),
      customLayer: CustomLayerKapsule()
    };
  },
  init: function init11(threeObj, state, _ref12) {
    var _ref12$animateIn = _ref12.animateIn, animateIn = _ref12$animateIn === void 0 ? true : _ref12$animateIn, _ref12$waitForGlobeRe = _ref12.waitForGlobeReady, waitForGlobeReady = _ref12$waitForGlobeRe === void 0 ? true : _ref12$waitForGlobeRe;
    emptyObject(threeObj);
    threeObj.add(state.scene = new THREE4.Group());
    state.scene.visible = false;
    layers.forEach(function(layer) {
      var g = new THREE4.Group();
      state.scene.add(g);
      state[layer](g);
    });
    var initGlobe = function initGlobe2() {
      if (animateIn) {
        state.scene.scale.set(1e-6, 1e-6, 1e-6);
        new tween_esm_default.Tween({
          k: 1e-6
        }).to({
          k: 1
        }, 600).easing(tween_esm_default.Easing.Quadratic.Out).onUpdate(function(_ref13) {
          var k = _ref13.k;
          return state.scene.scale.set(k, k, k);
        }).start();
        var rotAxis = new THREE4.Vector3(0, 1, 0);
        new tween_esm_default.Tween({
          rot: Math.PI * 2
        }).to({
          rot: 0
        }, 1200).easing(tween_esm_default.Easing.Quintic.Out).onUpdate(function(_ref14) {
          var rot = _ref14.rot;
          return state.scene.setRotationFromAxisAngle(rotAxis, rot);
        }).start();
      }
      state.scene.visible = true;
      state.onGlobeReady && state.onGlobeReady();
    };
    waitForGlobeReady ? state.globeLayer.onReady(initGlobe) : initGlobe();
    (function onFrame() {
      requestAnimationFrame(onFrame);
      tween_esm_default.update();
    })();
  },
  update: function update12(state) {
  }
});
function fromKapsule(kapsule) {
  var baseClass = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Object;
  var initKapsuleWithSelf = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  var FromKapsule = function(_baseClass) {
    _inherits3(FromKapsule2, _baseClass);
    var _super = _createSuper3(FromKapsule2);
    function FromKapsule2() {
      var _this;
      _classCallCheck4(this, FromKapsule2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.__kapsuleInstance = kapsule.apply(void 0, args).apply(void 0, [].concat(_toConsumableArray4(initKapsuleWithSelf ? [_assertThisInitialized3(_this)] : []), args));
      return _this;
    }
    return FromKapsule2;
  }(baseClass);
  Object.keys(kapsule()).forEach(function(m) {
    return FromKapsule.prototype[m] = function() {
      var _this$__kapsuleInstan;
      var returnVal = (_this$__kapsuleInstan = this.__kapsuleInstance)[m].apply(_this$__kapsuleInstan, arguments);
      return returnVal === this.__kapsuleInstance ? this : returnVal;
    };
  });
  return FromKapsule;
}
var three = window.THREE ? window.THREE : {
  Group
};
var threeGlobe = fromKapsule(Globe, three.Group, true);
var three_globe_module_default = threeGlobe;

// dep:three-globe
var three_globe_default = three_globe_module_default;
export {
  three_globe_default as default
};
//# sourceMappingURL=three-globe.js.map
